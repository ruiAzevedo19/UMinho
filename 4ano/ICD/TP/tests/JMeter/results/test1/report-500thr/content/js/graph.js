/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 49.0, "minX": 0.0, "maxY": 72530.0, "series": [{"data": [[0.0, 49.0], [0.1, 49.0], [0.2, 56.0], [0.3, 56.0], [0.4, 56.0], [0.5, 56.0], [0.6, 56.0], [0.7, 58.0], [0.8, 58.0], [0.9, 58.0], [1.0, 59.0], [1.1, 59.0], [1.2, 59.0], [1.3, 59.0], [1.4, 59.0], [1.5, 59.0], [1.6, 59.0], [1.7, 59.0], [1.8, 59.0], [1.9, 59.0], [2.0, 60.0], [2.1, 60.0], [2.2, 61.0], [2.3, 61.0], [2.4, 61.0], [2.5, 61.0], [2.6, 61.0], [2.7, 61.0], [2.8, 61.0], [2.9, 61.0], [3.0, 62.0], [3.1, 62.0], [3.2, 63.0], [3.3, 63.0], [3.4, 63.0], [3.5, 63.0], [3.6, 64.0], [3.7, 64.0], [3.8, 64.0], [3.9, 64.0], [4.0, 78.0], [4.1, 78.0], [4.2, 79.0], [4.3, 79.0], [4.4, 79.0], [4.5, 79.0], [4.6, 79.0], [4.7, 79.0], [4.8, 80.0], [4.9, 80.0], [5.0, 80.0], [5.1, 80.0], [5.2, 80.0], [5.3, 80.0], [5.4, 80.0], [5.5, 80.0], [5.6, 90.0], [5.7, 90.0], [5.8, 90.0], [5.9, 90.0], [6.0, 104.0], [6.1, 104.0], [6.2, 105.0], [6.3, 105.0], [6.4, 105.0], [6.5, 105.0], [6.6, 105.0], [6.7, 105.0], [6.8, 105.0], [6.9, 105.0], [7.0, 106.0], [7.1, 106.0], [7.2, 106.0], [7.3, 106.0], [7.4, 107.0], [7.5, 107.0], [7.6, 107.0], [7.7, 107.0], [7.8, 107.0], [7.9, 107.0], [8.0, 107.0], [8.1, 107.0], [8.2, 107.0], [8.3, 107.0], [8.4, 107.0], [8.5, 107.0], [8.6, 107.0], [8.7, 107.0], [8.8, 108.0], [8.9, 108.0], [9.0, 108.0], [9.1, 108.0], [9.2, 108.0], [9.3, 108.0], [9.4, 108.0], [9.5, 108.0], [9.6, 108.0], [9.7, 108.0], [9.8, 109.0], [9.9, 109.0], [10.0, 109.0], [10.1, 109.0], [10.2, 109.0], [10.3, 110.0], [10.4, 111.0], [10.5, 111.0], [10.6, 111.0], [10.7, 111.0], [10.8, 113.0], [10.9, 113.0], [11.0, 117.0], [11.1, 117.0], [11.2, 118.0], [11.3, 118.0], [11.4, 118.0], [11.5, 118.0], [11.6, 118.0], [11.7, 118.0], [11.8, 118.0], [11.9, 118.0], [12.0, 120.0], [12.1, 120.0], [12.2, 121.0], [12.3, 121.0], [12.4, 121.0], [12.5, 121.0], [12.6, 121.0], [12.7, 121.0], [12.8, 122.0], [12.9, 122.0], [13.0, 122.0], [13.1, 122.0], [13.2, 122.0], [13.3, 122.0], [13.4, 122.0], [13.5, 122.0], [13.6, 122.0], [13.7, 122.0], [13.8, 123.0], [13.9, 123.0], [14.0, 123.0], [14.1, 123.0], [14.2, 123.0], [14.3, 123.0], [14.4, 123.0], [14.5, 123.0], [14.6, 124.0], [14.7, 124.0], [14.8, 124.0], [14.9, 124.0], [15.0, 124.0], [15.1, 124.0], [15.2, 124.0], [15.3, 124.0], [15.4, 125.0], [15.5, 125.0], [15.6, 128.0], [15.7, 128.0], [15.8, 129.0], [15.9, 129.0], [16.0, 129.0], [16.1, 129.0], [16.2, 130.0], [16.3, 130.0], [16.4, 130.0], [16.5, 130.0], [16.6, 130.0], [16.7, 130.0], [16.8, 131.0], [16.9, 131.0], [17.0, 131.0], [17.1, 131.0], [17.2, 131.0], [17.3, 131.0], [17.4, 131.0], [17.5, 131.0], [17.6, 132.0], [17.7, 132.0], [17.8, 132.0], [17.9, 132.0], [18.0, 132.0], [18.1, 132.0], [18.2, 132.0], [18.3, 132.0], [18.4, 132.0], [18.5, 132.0], [18.6, 133.0], [18.7, 133.0], [18.8, 133.0], [18.9, 133.0], [19.0, 133.0], [19.1, 133.0], [19.2, 133.0], [19.3, 133.0], [19.4, 133.0], [19.5, 133.0], [19.6, 133.0], [19.7, 133.0], [19.8, 133.0], [19.9, 133.0], [20.0, 133.0], [20.1, 133.0], [20.2, 133.0], [20.3, 134.0], [20.4, 134.0], [20.5, 134.0], [20.6, 134.0], [20.7, 134.0], [20.8, 134.0], [20.9, 134.0], [21.0, 134.0], [21.1, 135.0], [21.2, 135.0], [21.3, 135.0], [21.4, 135.0], [21.5, 135.0], [21.6, 135.0], [21.7, 135.0], [21.8, 135.0], [21.9, 136.0], [22.0, 136.0], [22.1, 136.0], [22.2, 136.0], [22.3, 137.0], [22.4, 137.0], [22.5, 138.0], [22.6, 138.0], [22.7, 138.0], [22.8, 138.0], [22.9, 138.0], [23.0, 138.0], [23.1, 138.0], [23.2, 138.0], [23.3, 138.0], [23.4, 138.0], [23.5, 139.0], [23.6, 139.0], [23.7, 139.0], [23.8, 139.0], [23.9, 139.0], [24.0, 139.0], [24.1, 139.0], [24.2, 139.0], [24.3, 139.0], [24.4, 139.0], [24.5, 140.0], [24.6, 140.0], [24.7, 140.0], [24.8, 141.0], [24.9, 141.0], [25.0, 141.0], [25.1, 141.0], [25.2, 147.0], [25.3, 147.0], [25.4, 149.0], [25.5, 149.0], [25.6, 151.0], [25.7, 151.0], [25.8, 151.0], [25.9, 151.0], [26.0, 160.0], [26.1, 160.0], [26.2, 161.0], [26.3, 161.0], [26.4, 161.0], [26.5, 161.0], [26.6, 161.0], [26.7, 161.0], [26.8, 162.0], [26.9, 162.0], [27.0, 162.0], [27.1, 162.0], [27.2, 162.0], [27.3, 162.0], [27.4, 162.0], [27.5, 162.0], [27.6, 162.0], [27.7, 162.0], [27.8, 163.0], [27.9, 163.0], [28.0, 163.0], [28.1, 163.0], [28.2, 163.0], [28.3, 163.0], [28.4, 163.0], [28.5, 163.0], [28.6, 164.0], [28.7, 164.0], [28.8, 164.0], [28.9, 164.0], [29.0, 164.0], [29.1, 164.0], [29.2, 164.0], [29.3, 164.0], [29.4, 164.0], [29.5, 164.0], [29.6, 164.0], [29.7, 164.0], [29.8, 164.0], [29.9, 164.0], [30.0, 164.0], [30.1, 164.0], [30.2, 165.0], [30.3, 165.0], [30.4, 165.0], [30.5, 165.0], [30.6, 165.0], [30.7, 165.0], [30.8, 165.0], [30.9, 165.0], [31.0, 165.0], [31.1, 165.0], [31.2, 165.0], [31.3, 165.0], [31.4, 165.0], [31.5, 165.0], [31.6, 165.0], [31.7, 165.0], [31.8, 165.0], [31.9, 165.0], [32.0, 165.0], [32.1, 165.0], [32.2, 165.0], [32.3, 165.0], [32.4, 165.0], [32.5, 165.0], [32.6, 166.0], [32.7, 166.0], [32.8, 166.0], [32.9, 166.0], [33.0, 166.0], [33.1, 166.0], [33.2, 166.0], [33.3, 166.0], [33.4, 166.0], [33.5, 166.0], [33.6, 166.0], [33.7, 166.0], [33.8, 166.0], [33.9, 166.0], [34.0, 166.0], [34.1, 166.0], [34.2, 166.0], [34.3, 166.0], [34.4, 166.0], [34.5, 166.0], [34.6, 167.0], [34.7, 167.0], [34.8, 167.0], [34.9, 167.0], [35.0, 167.0], [35.1, 167.0], [35.2, 168.0], [35.3, 168.0], [35.4, 168.0], [35.5, 168.0], [35.6, 168.0], [35.7, 168.0], [35.8, 168.0], [35.9, 168.0], [36.0, 168.0], [36.1, 168.0], [36.2, 168.0], [36.3, 168.0], [36.4, 168.0], [36.5, 168.0], [36.6, 168.0], [36.7, 168.0], [36.8, 168.0], [36.9, 169.0], [37.0, 169.0], [37.1, 169.0], [37.2, 169.0], [37.3, 169.0], [37.4, 169.0], [37.5, 169.0], [37.6, 169.0], [37.7, 169.0], [37.8, 169.0], [37.9, 169.0], [38.0, 169.0], [38.1, 170.0], [38.2, 170.0], [38.3, 170.0], [38.4, 170.0], [38.5, 170.0], [38.6, 170.0], [38.7, 170.0], [38.8, 170.0], [38.9, 170.0], [39.0, 170.0], [39.1, 171.0], [39.2, 171.0], [39.3, 171.0], [39.4, 171.0], [39.5, 171.0], [39.6, 171.0], [39.7, 171.0], [39.8, 171.0], [39.9, 171.0], [40.0, 171.0], [40.1, 171.0], [40.2, 171.0], [40.3, 171.0], [40.4, 171.0], [40.5, 171.0], [40.6, 171.0], [40.7, 172.0], [40.8, 172.0], [40.9, 173.0], [41.0, 173.0], [41.1, 174.0], [41.2, 174.0], [41.3, 174.0], [41.4, 174.0], [41.5, 174.0], [41.6, 174.0], [41.7, 174.0], [41.8, 174.0], [41.9, 174.0], [42.0, 174.0], [42.1, 174.0], [42.2, 174.0], [42.3, 174.0], [42.4, 174.0], [42.5, 174.0], [42.6, 174.0], [42.7, 174.0], [42.8, 174.0], [42.9, 175.0], [43.0, 175.0], [43.1, 176.0], [43.2, 176.0], [43.3, 176.0], [43.4, 176.0], [43.5, 176.0], [43.6, 176.0], [43.7, 176.0], [43.8, 176.0], [43.9, 176.0], [44.0, 176.0], [44.1, 176.0], [44.2, 176.0], [44.3, 176.0], [44.4, 176.0], [44.5, 176.0], [44.6, 176.0], [44.7, 176.0], [44.8, 176.0], [44.9, 176.0], [45.0, 176.0], [45.1, 176.0], [45.2, 176.0], [45.3, 176.0], [45.4, 176.0], [45.5, 176.0], [45.6, 176.0], [45.7, 177.0], [45.8, 177.0], [45.9, 177.0], [46.0, 177.0], [46.1, 177.0], [46.2, 177.0], [46.3, 177.0], [46.4, 177.0], [46.5, 177.0], [46.6, 177.0], [46.7, 177.0], [46.8, 177.0], [46.9, 177.0], [47.0, 177.0], [47.1, 177.0], [47.2, 177.0], [47.3, 177.0], [47.4, 177.0], [47.5, 178.0], [47.6, 178.0], [47.7, 178.0], [47.8, 178.0], [47.9, 178.0], [48.0, 178.0], [48.1, 178.0], [48.2, 178.0], [48.3, 178.0], [48.4, 178.0], [48.5, 178.0], [48.6, 178.0], [48.7, 178.0], [48.8, 178.0], [48.9, 178.0], [49.0, 178.0], [49.1, 178.0], [49.2, 178.0], [49.3, 178.0], [49.4, 178.0], [49.5, 178.0], [49.6, 178.0], [49.7, 178.0], [49.8, 178.0], [49.9, 178.0], [50.0, 178.0], [50.1, 179.0], [50.2, 179.0], [50.3, 179.0], [50.4, 179.0], [50.5, 179.0], [50.6, 179.0], [50.7, 179.0], [50.8, 179.0], [50.9, 179.0], [51.0, 179.0], [51.1, 179.0], [51.2, 179.0], [51.3, 179.0], [51.4, 179.0], [51.5, 179.0], [51.6, 179.0], [51.7, 179.0], [51.8, 179.0], [51.9, 180.0], [52.0, 180.0], [52.1, 180.0], [52.2, 180.0], [52.3, 180.0], [52.4, 180.0], [52.5, 180.0], [52.6, 180.0], [52.7, 180.0], [52.8, 180.0], [52.9, 180.0], [53.0, 180.0], [53.1, 180.0], [53.2, 180.0], [53.3, 180.0], [53.4, 180.0], [53.5, 181.0], [53.6, 181.0], [53.7, 181.0], [53.8, 181.0], [53.9, 181.0], [54.0, 181.0], [54.1, 181.0], [54.2, 181.0], [54.3, 181.0], [54.4, 181.0], [54.5, 182.0], [54.6, 182.0], [54.7, 182.0], [54.8, 182.0], [54.9, 182.0], [55.0, 182.0], [55.1, 182.0], [55.2, 182.0], [55.3, 183.0], [55.4, 183.0], [55.5, 184.0], [55.6, 184.0], [55.7, 184.0], [55.8, 184.0], [55.9, 185.0], [56.0, 185.0], [56.1, 186.0], [56.2, 186.0], [56.3, 186.0], [56.4, 186.0], [56.5, 187.0], [56.6, 187.0], [56.7, 187.0], [56.8, 187.0], [56.9, 188.0], [57.0, 188.0], [57.1, 189.0], [57.2, 189.0], [57.3, 189.0], [57.4, 189.0], [57.5, 189.0], [57.6, 189.0], [57.7, 189.0], [57.8, 189.0], [57.9, 189.0], [58.0, 189.0], [58.1, 189.0], [58.2, 189.0], [58.3, 190.0], [58.4, 190.0], [58.5, 190.0], [58.6, 190.0], [58.7, 190.0], [58.8, 190.0], [58.9, 190.0], [59.0, 190.0], [59.1, 190.0], [59.2, 190.0], [59.3, 190.0], [59.4, 190.0], [59.5, 190.0], [59.6, 190.0], [59.7, 191.0], [59.8, 191.0], [59.9, 191.0], [60.0, 191.0], [60.1, 191.0], [60.2, 191.0], [60.3, 191.0], [60.4, 191.0], [60.5, 191.0], [60.6, 191.0], [60.7, 191.0], [60.8, 191.0], [60.9, 191.0], [61.0, 191.0], [61.1, 191.0], [61.2, 191.0], [61.3, 191.0], [61.4, 191.0], [61.5, 192.0], [61.6, 192.0], [61.7, 192.0], [61.8, 192.0], [61.9, 192.0], [62.0, 192.0], [62.1, 192.0], [62.2, 192.0], [62.3, 192.0], [62.4, 192.0], [62.5, 192.0], [62.6, 192.0], [62.7, 192.0], [62.8, 192.0], [62.9, 192.0], [63.0, 192.0], [63.1, 192.0], [63.2, 192.0], [63.3, 192.0], [63.4, 192.0], [63.5, 192.0], [63.6, 192.0], [63.7, 192.0], [63.8, 192.0], [63.9, 193.0], [64.0, 193.0], [64.1, 193.0], [64.2, 193.0], [64.3, 193.0], [64.4, 193.0], [64.5, 193.0], [64.6, 193.0], [64.7, 193.0], [64.8, 193.0], [64.9, 193.0], [65.0, 193.0], [65.1, 194.0], [65.2, 194.0], [65.3, 194.0], [65.4, 194.0], [65.5, 194.0], [65.6, 194.0], [65.7, 194.0], [65.8, 194.0], [65.9, 194.0], [66.0, 194.0], [66.1, 195.0], [66.2, 195.0], [66.3, 195.0], [66.4, 195.0], [66.5, 195.0], [66.6, 195.0], [66.7, 195.0], [66.8, 195.0], [66.9, 196.0], [67.0, 196.0], [67.1, 196.0], [67.2, 196.0], [67.3, 197.0], [67.4, 197.0], [67.5, 197.0], [67.6, 197.0], [67.7, 197.0], [67.8, 197.0], [67.9, 198.0], [68.0, 198.0], [68.1, 198.0], [68.2, 198.0], [68.3, 199.0], [68.4, 199.0], [68.5, 199.0], [68.6, 199.0], [68.7, 200.0], [68.8, 200.0], [68.9, 200.0], [69.0, 200.0], [69.1, 201.0], [69.2, 201.0], [69.3, 201.0], [69.4, 201.0], [69.5, 202.0], [69.6, 202.0], [69.7, 202.0], [69.8, 202.0], [69.9, 202.0], [70.0, 202.0], [70.1, 202.0], [70.2, 202.0], [70.3, 202.0], [70.4, 202.0], [70.5, 203.0], [70.6, 203.0], [70.7, 203.0], [70.8, 203.0], [70.9, 203.0], [71.0, 203.0], [71.1, 204.0], [71.2, 204.0], [71.3, 204.0], [71.4, 204.0], [71.5, 204.0], [71.6, 204.0], [71.7, 204.0], [71.8, 204.0], [71.9, 204.0], [72.0, 204.0], [72.1, 205.0], [72.2, 205.0], [72.3, 205.0], [72.4, 205.0], [72.5, 205.0], [72.6, 205.0], [72.7, 205.0], [72.8, 205.0], [72.9, 205.0], [73.0, 205.0], [73.1, 206.0], [73.2, 206.0], [73.3, 206.0], [73.4, 206.0], [73.5, 206.0], [73.6, 206.0], [73.7, 206.0], [73.8, 206.0], [73.9, 206.0], [74.0, 206.0], [74.1, 206.0], [74.2, 206.0], [74.3, 206.0], [74.4, 206.0], [74.5, 206.0], [74.6, 206.0], [74.7, 207.0], [74.8, 207.0], [74.9, 207.0], [75.0, 207.0], [75.1, 207.0], [75.2, 207.0], [75.3, 207.0], [75.4, 207.0], [75.5, 207.0], [75.6, 207.0], [75.7, 208.0], [75.8, 208.0], [75.9, 208.0], [76.0, 208.0], [76.1, 211.0], [76.2, 211.0], [76.3, 212.0], [76.4, 212.0], [76.5, 213.0], [76.6, 213.0], [76.7, 217.0], [76.8, 217.0], [76.9, 217.0], [77.0, 217.0], [77.1, 217.0], [77.2, 217.0], [77.3, 217.0], [77.4, 217.0], [77.5, 217.0], [77.6, 217.0], [77.7, 217.0], [77.8, 217.0], [77.9, 218.0], [78.0, 218.0], [78.1, 218.0], [78.2, 218.0], [78.3, 218.0], [78.4, 218.0], [78.5, 219.0], [78.6, 219.0], [78.7, 219.0], [78.8, 219.0], [78.9, 220.0], [79.0, 220.0], [79.1, 220.0], [79.2, 220.0], [79.3, 220.0], [79.4, 220.0], [79.5, 220.0], [79.6, 220.0], [79.7, 220.0], [79.8, 220.0], [79.9, 221.0], [80.0, 221.0], [80.1, 221.0], [80.2, 221.0], [80.3, 221.0], [80.4, 221.0], [80.5, 221.0], [80.6, 221.0], [80.7, 222.0], [80.8, 222.0], [80.9, 222.0], [81.0, 222.0], [81.1, 223.0], [81.2, 223.0], [81.3, 223.0], [81.4, 223.0], [81.5, 223.0], [81.6, 223.0], [81.7, 223.0], [81.8, 223.0], [81.9, 223.0], [82.0, 223.0], [82.1, 224.0], [82.2, 224.0], [82.3, 224.0], [82.4, 224.0], [82.5, 224.0], [82.6, 224.0], [82.7, 224.0], [82.8, 224.0], [82.9, 224.0], [83.0, 224.0], [83.1, 225.0], [83.2, 225.0], [83.3, 225.0], [83.4, 225.0], [83.5, 225.0], [83.6, 225.0], [83.7, 225.0], [83.8, 225.0], [83.9, 225.0], [84.0, 225.0], [84.1, 225.0], [84.2, 225.0], [84.3, 225.0], [84.4, 225.0], [84.5, 225.0], [84.6, 225.0], [84.7, 225.0], [84.8, 225.0], [84.9, 226.0], [85.0, 226.0], [85.1, 226.0], [85.2, 226.0], [85.3, 226.0], [85.4, 226.0], [85.5, 226.0], [85.6, 226.0], [85.7, 226.0], [85.8, 226.0], [85.9, 226.0], [86.0, 226.0], [86.1, 226.0], [86.2, 226.0], [86.3, 227.0], [86.4, 227.0], [86.5, 228.0], [86.6, 228.0], [86.7, 228.0], [86.8, 228.0], [86.9, 228.0], [87.0, 228.0], [87.1, 229.0], [87.2, 229.0], [87.3, 229.0], [87.4, 229.0], [87.5, 229.0], [87.6, 229.0], [87.7, 249.0], [87.8, 249.0], [87.9, 251.0], [88.0, 251.0], [88.1, 251.0], [88.2, 251.0], [88.3, 252.0], [88.4, 252.0], [88.5, 252.0], [88.6, 252.0], [88.7, 253.0], [88.8, 253.0], [88.9, 253.0], [89.0, 253.0], [89.1, 253.0], [89.2, 253.0], [89.3, 254.0], [89.4, 254.0], [89.5, 255.0], [89.6, 255.0], [89.7, 255.0], [89.8, 255.0], [89.9, 256.0], [90.0, 256.0], [90.1, 256.0], [90.2, 256.0], [90.3, 256.0], [90.4, 256.0], [90.5, 257.0], [90.6, 257.0], [90.7, 257.0], [90.8, 257.0], [90.9, 257.0], [91.0, 257.0], [91.1, 257.0], [91.2, 257.0], [91.3, 257.0], [91.4, 257.0], [91.5, 264.0], [91.6, 264.0], [91.7, 264.0], [91.8, 264.0], [91.9, 264.0], [92.0, 264.0], [92.1, 264.0], [92.2, 264.0], [92.3, 266.0], [92.4, 266.0], [92.5, 266.0], [92.6, 266.0], [92.7, 266.0], [92.8, 266.0], [92.9, 267.0], [93.0, 267.0], [93.1, 268.0], [93.2, 268.0], [93.3, 268.0], [93.4, 268.0], [93.5, 268.0], [93.6, 268.0], [93.7, 272.0], [93.8, 272.0], [93.9, 2763.0], [94.0, 2763.0], [94.1, 2763.0], [94.2, 2763.0], [94.3, 2764.0], [94.4, 2764.0], [94.5, 2764.0], [94.6, 2764.0], [94.7, 2764.0], [94.8, 2764.0], [94.9, 2765.0], [95.0, 2765.0], [95.1, 2766.0], [95.2, 2766.0], [95.3, 2767.0], [95.4, 2767.0], [95.5, 2767.0], [95.6, 2767.0], [95.7, 2770.0], [95.8, 2770.0], [95.9, 2779.0], [96.0, 2779.0], [96.1, 2780.0], [96.2, 2780.0], [96.3, 2781.0], [96.4, 2781.0], [96.5, 2782.0], [96.6, 2782.0], [96.7, 2783.0], [96.8, 2783.0], [96.9, 2784.0], [97.0, 2784.0], [97.1, 2785.0], [97.2, 2785.0], [97.3, 2786.0], [97.4, 2786.0], [97.5, 2786.0], [97.6, 2786.0], [97.7, 2788.0], [97.8, 2788.0], [97.9, 2788.0], [98.0, 2788.0], [98.1, 2789.0], [98.2, 2789.0], [98.3, 2790.0], [98.4, 2790.0], [98.5, 2790.0], [98.6, 2790.0], [98.7, 2790.0], [98.8, 2790.0], [98.9, 2791.0], [99.0, 2791.0], [99.1, 2792.0], [99.2, 2792.0], [99.3, 2792.0], [99.4, 2792.0], [99.5, 2792.0], [99.6, 2792.0], [99.7, 2793.0], [99.8, 2793.0], [99.9, 2969.0], [100.0, 2969.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[0.0, 61301.0], [0.1, 61301.0], [0.2, 61305.0], [0.3, 61305.0], [0.4, 61306.0], [0.5, 61306.0], [0.6, 61306.0], [0.7, 61306.0], [0.8, 61307.0], [0.9, 61307.0], [1.0, 61307.0], [1.1, 61307.0], [1.2, 61307.0], [1.3, 61307.0], [1.4, 61308.0], [1.5, 61308.0], [1.6, 61309.0], [1.7, 61309.0], [1.8, 61309.0], [1.9, 61309.0], [2.0, 61309.0], [2.1, 61309.0], [2.2, 61311.0], [2.3, 61311.0], [2.4, 61311.0], [2.5, 61311.0], [2.6, 61311.0], [2.7, 61311.0], [2.8, 61312.0], [2.9, 61312.0], [3.0, 61312.0], [3.1, 61312.0], [3.2, 61312.0], [3.3, 61312.0], [3.4, 61313.0], [3.5, 61313.0], [3.6, 61313.0], [3.7, 61313.0], [3.8, 61313.0], [3.9, 61313.0], [4.0, 61313.0], [4.1, 61313.0], [4.2, 61314.0], [4.3, 61314.0], [4.4, 61314.0], [4.5, 61314.0], [4.6, 61314.0], [4.7, 61314.0], [4.8, 61315.0], [4.9, 61315.0], [5.0, 61315.0], [5.1, 61315.0], [5.2, 61315.0], [5.3, 61315.0], [5.4, 61317.0], [5.5, 61317.0], [5.6, 61317.0], [5.7, 61317.0], [5.8, 61317.0], [5.9, 61317.0], [6.0, 61317.0], [6.1, 61317.0], [6.2, 61318.0], [6.3, 61318.0], [6.4, 61319.0], [6.5, 61319.0], [6.6, 61320.0], [6.7, 61320.0], [6.8, 61320.0], [6.9, 61320.0], [7.0, 61321.0], [7.1, 61321.0], [7.2, 61321.0], [7.3, 61321.0], [7.4, 61322.0], [7.5, 61322.0], [7.6, 61322.0], [7.7, 61323.0], [7.8, 61323.0], [7.9, 61323.0], [8.0, 61323.0], [8.1, 61323.0], [8.2, 61323.0], [8.3, 61324.0], [8.4, 61408.0], [8.5, 61408.0], [8.6, 61409.0], [8.7, 61409.0], [8.8, 61409.0], [8.9, 61409.0], [9.0, 61409.0], [9.1, 61409.0], [9.2, 61409.0], [9.3, 61409.0], [9.4, 61409.0], [9.5, 61409.0], [9.6, 61409.0], [9.7, 61409.0], [9.8, 61413.0], [9.9, 61413.0], [10.0, 61413.0], [10.1, 61413.0], [10.2, 61472.0], [10.3, 61472.0], [10.4, 61472.0], [10.5, 61472.0], [10.6, 61472.0], [10.7, 61472.0], [10.8, 61472.0], [10.9, 61472.0], [11.0, 61472.0], [11.1, 61472.0], [11.2, 61473.0], [11.3, 61473.0], [11.4, 61473.0], [11.5, 61473.0], [11.6, 61473.0], [11.7, 61473.0], [11.8, 61473.0], [11.9, 61473.0], [12.0, 61474.0], [12.1, 61474.0], [12.2, 61474.0], [12.3, 61474.0], [12.4, 61475.0], [12.5, 61475.0], [12.6, 61476.0], [12.7, 61476.0], [12.8, 61476.0], [12.9, 61476.0], [13.0, 61476.0], [13.1, 61476.0], [13.2, 61476.0], [13.3, 61476.0], [13.4, 61476.0], [13.5, 61476.0], [13.6, 61476.0], [13.7, 61476.0], [13.8, 61477.0], [13.9, 61477.0], [14.0, 61477.0], [14.1, 61477.0], [14.2, 61478.0], [14.3, 61478.0], [14.4, 61478.0], [14.5, 61478.0], [14.6, 61479.0], [14.7, 61479.0], [14.8, 61479.0], [14.9, 61479.0], [15.0, 61480.0], [15.1, 61480.0], [15.2, 61480.0], [15.3, 61480.0], [15.4, 61481.0], [15.5, 61481.0], [15.6, 61481.0], [15.7, 61481.0], [15.8, 61998.0], [15.9, 61998.0], [16.0, 61999.0], [16.1, 61999.0], [16.2, 61999.0], [16.3, 61999.0], [16.4, 62000.0], [16.5, 62000.0], [16.6, 62000.0], [16.7, 62000.0], [16.8, 62000.0], [16.9, 62000.0], [17.0, 62000.0], [17.1, 62000.0], [17.2, 62001.0], [17.3, 62001.0], [17.4, 62002.0], [17.5, 62002.0], [17.6, 62002.0], [17.7, 62002.0], [17.8, 62008.0], [17.9, 62008.0], [18.0, 62009.0], [18.1, 62009.0], [18.2, 62082.0], [18.3, 62082.0], [18.4, 62083.0], [18.5, 62083.0], [18.6, 62083.0], [18.7, 62083.0], [18.8, 62083.0], [18.9, 62083.0], [19.0, 62084.0], [19.1, 62084.0], [19.2, 62084.0], [19.3, 62084.0], [19.4, 62084.0], [19.5, 62084.0], [19.6, 62084.0], [19.7, 62084.0], [19.8, 62084.0], [19.9, 62084.0], [20.0, 62084.0], [20.1, 62084.0], [20.2, 62085.0], [20.3, 62085.0], [20.4, 62085.0], [20.5, 62085.0], [20.6, 62086.0], [20.7, 62086.0], [20.8, 62087.0], [20.9, 62087.0], [21.0, 62087.0], [21.1, 62087.0], [21.2, 62087.0], [21.3, 62087.0], [21.4, 62087.0], [21.5, 62087.0], [21.6, 62088.0], [21.7, 62088.0], [21.8, 62088.0], [21.9, 62088.0], [22.0, 62089.0], [22.1, 62089.0], [22.2, 62089.0], [22.3, 62089.0], [22.4, 62090.0], [22.5, 62090.0], [22.6, 62090.0], [22.7, 62090.0], [22.8, 62090.0], [22.9, 62090.0], [23.0, 62091.0], [23.1, 62091.0], [23.2, 62096.0], [23.3, 62096.0], [23.4, 62096.0], [23.5, 62096.0], [23.6, 62096.0], [23.7, 62096.0], [23.8, 62096.0], [23.9, 62096.0], [24.0, 62096.0], [24.1, 62096.0], [24.2, 62097.0], [24.3, 62097.0], [24.4, 62097.0], [24.5, 62097.0], [24.6, 62097.0], [24.7, 62097.0], [24.8, 62097.0], [24.9, 62097.0], [25.0, 62097.0], [25.1, 62097.0], [25.2, 62097.0], [25.3, 62097.0], [25.4, 62097.0], [25.5, 62097.0], [25.6, 62097.0], [25.7, 62097.0], [25.8, 62098.0], [25.9, 62098.0], [26.0, 62098.0], [26.1, 62098.0], [26.2, 62098.0], [26.3, 62098.0], [26.4, 62099.0], [26.5, 62099.0], [26.6, 62099.0], [26.7, 62099.0], [26.8, 62099.0], [26.9, 62099.0], [27.0, 62099.0], [27.1, 62099.0], [27.2, 62099.0], [27.3, 62099.0], [27.4, 62100.0], [27.5, 62100.0], [27.6, 62100.0], [27.7, 62100.0], [27.8, 62100.0], [27.9, 62100.0], [28.0, 62100.0], [28.1, 62100.0], [28.2, 62100.0], [28.3, 62100.0], [28.4, 62100.0], [28.5, 62100.0], [28.6, 62101.0], [28.7, 62101.0], [28.8, 62101.0], [28.9, 62101.0], [29.0, 62101.0], [29.1, 62101.0], [29.2, 62101.0], [29.3, 62101.0], [29.4, 62101.0], [29.5, 62101.0], [29.6, 62101.0], [29.7, 62101.0], [29.8, 62101.0], [29.9, 62101.0], [30.0, 62101.0], [30.1, 62101.0], [30.2, 62102.0], [30.3, 62102.0], [30.4, 62102.0], [30.5, 62102.0], [30.6, 62102.0], [30.7, 62102.0], [30.8, 62102.0], [30.9, 62102.0], [31.0, 62102.0], [31.1, 62102.0], [31.2, 62103.0], [31.3, 62103.0], [31.4, 62103.0], [31.5, 62103.0], [31.6, 62103.0], [31.7, 62103.0], [31.8, 62103.0], [31.9, 62103.0], [32.0, 62103.0], [32.1, 62103.0], [32.2, 62103.0], [32.3, 62103.0], [32.4, 62104.0], [32.5, 62104.0], [32.6, 62105.0], [32.7, 62105.0], [32.8, 62105.0], [32.9, 62105.0], [33.0, 62106.0], [33.1, 62106.0], [33.2, 62106.0], [33.3, 62106.0], [33.4, 62106.0], [33.5, 62106.0], [33.6, 62109.0], [33.7, 62109.0], [33.8, 62109.0], [33.9, 62112.0], [34.0, 62112.0], [34.1, 62113.0], [34.2, 62113.0], [34.3, 62113.0], [34.4, 62113.0], [34.5, 62113.0], [34.6, 62113.0], [34.7, 62114.0], [34.8, 62114.0], [34.9, 62115.0], [35.0, 62115.0], [35.1, 62115.0], [35.2, 62115.0], [35.3, 62116.0], [35.4, 62116.0], [35.5, 62117.0], [35.6, 62117.0], [35.7, 62136.0], [35.8, 62136.0], [35.9, 62139.0], [36.0, 62139.0], [36.1, 62139.0], [36.2, 62139.0], [36.3, 62152.0], [36.4, 62152.0], [36.5, 62170.0], [36.6, 62170.0], [36.7, 62173.0], [36.8, 62173.0], [36.9, 62174.0], [37.0, 62174.0], [37.1, 62211.0], [37.2, 62211.0], [37.3, 62211.0], [37.4, 62211.0], [37.5, 62212.0], [37.6, 62212.0], [37.7, 62212.0], [37.8, 62212.0], [37.9, 62212.0], [38.0, 62212.0], [38.1, 62213.0], [38.2, 62213.0], [38.3, 62213.0], [38.4, 62213.0], [38.5, 62213.0], [38.6, 62213.0], [38.7, 62213.0], [38.8, 62213.0], [38.9, 62214.0], [39.0, 62214.0], [39.1, 62214.0], [39.2, 62214.0], [39.3, 62215.0], [39.4, 62215.0], [39.5, 62215.0], [39.6, 62215.0], [39.7, 62215.0], [39.8, 62215.0], [39.9, 62215.0], [40.0, 62215.0], [40.1, 62216.0], [40.2, 62216.0], [40.3, 62216.0], [40.4, 62216.0], [40.5, 62216.0], [40.6, 62216.0], [40.7, 62216.0], [40.8, 62216.0], [40.9, 62218.0], [41.0, 62218.0], [41.1, 62218.0], [41.2, 62218.0], [41.3, 62219.0], [41.4, 62219.0], [41.5, 62219.0], [41.6, 62219.0], [41.7, 62219.0], [41.8, 62219.0], [41.9, 62222.0], [42.0, 62222.0], [42.1, 62222.0], [42.2, 62222.0], [42.3, 62222.0], [42.4, 62222.0], [42.5, 62223.0], [42.6, 62223.0], [42.7, 62223.0], [42.8, 62223.0], [42.9, 62224.0], [43.0, 62224.0], [43.1, 62224.0], [43.2, 62224.0], [43.3, 62224.0], [43.4, 62224.0], [43.5, 62225.0], [43.6, 62225.0], [43.7, 62225.0], [43.8, 62225.0], [43.9, 62225.0], [44.0, 62225.0], [44.1, 62226.0], [44.2, 62226.0], [44.3, 62226.0], [44.4, 62226.0], [44.5, 62226.0], [44.6, 62226.0], [44.7, 62227.0], [44.8, 62227.0], [44.9, 62227.0], [45.0, 62227.0], [45.1, 62237.0], [45.2, 62237.0], [45.3, 62257.0], [45.4, 62257.0], [45.5, 62257.0], [45.6, 62257.0], [45.7, 62258.0], [45.8, 62258.0], [45.9, 62258.0], [46.0, 62258.0], [46.1, 62259.0], [46.2, 62259.0], [46.3, 62259.0], [46.4, 62259.0], [46.5, 62260.0], [46.6, 62260.0], [46.7, 62260.0], [46.8, 62260.0], [46.9, 62260.0], [47.0, 62260.0], [47.1, 62260.0], [47.2, 62260.0], [47.3, 62260.0], [47.4, 62260.0], [47.5, 62260.0], [47.6, 62260.0], [47.7, 62260.0], [47.8, 62260.0], [47.9, 62260.0], [48.0, 62260.0], [48.1, 62261.0], [48.2, 62261.0], [48.3, 62261.0], [48.4, 62261.0], [48.5, 62261.0], [48.6, 62261.0], [48.7, 62261.0], [48.8, 62261.0], [48.9, 62261.0], [49.0, 62261.0], [49.1, 62261.0], [49.2, 62261.0], [49.3, 62261.0], [49.4, 62261.0], [49.5, 62261.0], [49.6, 62261.0], [49.7, 62261.0], [49.8, 62261.0], [49.9, 62261.0], [50.0, 62261.0], [50.1, 62262.0], [50.2, 62262.0], [50.3, 62262.0], [50.4, 62262.0], [50.5, 62262.0], [50.6, 62262.0], [50.7, 62262.0], [50.8, 62262.0], [50.9, 62262.0], [51.0, 62262.0], [51.1, 62262.0], [51.2, 62262.0], [51.3, 62263.0], [51.4, 62263.0], [51.5, 62263.0], [51.6, 62263.0], [51.7, 62263.0], [51.8, 62263.0], [51.9, 62263.0], [52.0, 62263.0], [52.1, 62263.0], [52.2, 62263.0], [52.3, 62264.0], [52.4, 62264.0], [52.5, 62264.0], [52.6, 62264.0], [52.7, 62264.0], [52.8, 62264.0], [52.9, 62264.0], [53.0, 62264.0], [53.1, 62264.0], [53.2, 62264.0], [53.3, 62264.0], [53.4, 62264.0], [53.5, 62264.0], [53.6, 62264.0], [53.7, 62265.0], [53.8, 62265.0], [53.9, 62265.0], [54.0, 62265.0], [54.1, 62265.0], [54.2, 62265.0], [54.3, 62265.0], [54.4, 62265.0], [54.5, 62265.0], [54.6, 62265.0], [54.7, 62266.0], [54.8, 62266.0], [54.9, 62266.0], [55.0, 62266.0], [55.1, 62267.0], [55.2, 62267.0], [55.3, 62269.0], [55.4, 62269.0], [55.5, 62270.0], [55.6, 62270.0], [55.7, 62276.0], [55.8, 62276.0], [55.9, 63254.0], [56.0, 63254.0], [56.1, 63255.0], [56.2, 63255.0], [56.3, 63256.0], [56.4, 63256.0], [56.5, 63257.0], [56.6, 63257.0], [56.7, 63257.0], [56.8, 63257.0], [56.9, 63257.0], [57.0, 63257.0], [57.1, 63258.0], [57.2, 63258.0], [57.3, 63270.0], [57.4, 63270.0], [57.5, 63272.0], [57.6, 63272.0], [57.7, 63272.0], [57.8, 63272.0], [57.9, 63300.0], [58.0, 63300.0], [58.1, 63489.0], [58.2, 63489.0], [58.3, 65460.0], [58.4, 65460.0], [58.5, 65461.0], [58.6, 65461.0], [58.7, 65461.0], [58.8, 65461.0], [58.9, 65461.0], [59.0, 65461.0], [59.1, 65461.0], [59.2, 65461.0], [59.3, 65461.0], [59.4, 65461.0], [59.5, 65461.0], [59.6, 65461.0], [59.7, 65461.0], [59.8, 65461.0], [59.9, 65462.0], [60.0, 65462.0], [60.1, 65462.0], [60.2, 65462.0], [60.3, 65462.0], [60.4, 65462.0], [60.5, 65462.0], [60.6, 65462.0], [60.7, 65463.0], [60.8, 65463.0], [60.9, 65463.0], [61.0, 65463.0], [61.1, 65463.0], [61.2, 65463.0], [61.3, 65463.0], [61.4, 65463.0], [61.5, 65464.0], [61.6, 65464.0], [61.7, 65464.0], [61.8, 65464.0], [61.9, 65464.0], [62.0, 65464.0], [62.1, 65465.0], [62.2, 65465.0], [62.3, 65465.0], [62.4, 65465.0], [62.5, 65467.0], [62.6, 65467.0], [62.7, 65467.0], [62.8, 65467.0], [62.9, 65467.0], [63.0, 65467.0], [63.1, 65468.0], [63.2, 65468.0], [63.3, 65469.0], [63.4, 65469.0], [63.5, 65470.0], [63.6, 65470.0], [63.7, 65470.0], [63.8, 65470.0], [63.9, 65470.0], [64.0, 65470.0], [64.1, 68980.0], [64.2, 68980.0], [64.3, 71452.0], [64.4, 71452.0], [64.5, 71453.0], [64.6, 71453.0], [64.7, 71454.0], [64.8, 71454.0], [64.9, 71768.0], [65.0, 71768.0], [65.1, 71769.0], [65.2, 71769.0], [65.3, 71769.0], [65.4, 71769.0], [65.5, 71769.0], [65.6, 71769.0], [65.7, 71770.0], [65.8, 71770.0], [65.9, 71770.0], [66.0, 71770.0], [66.1, 71774.0], [66.2, 71774.0], [66.3, 72088.0], [66.4, 72088.0], [66.5, 72088.0], [66.6, 72088.0], [66.7, 72092.0], [66.8, 72092.0], [66.9, 72162.0], [67.0, 72162.0], [67.1, 72162.0], [67.2, 72162.0], [67.3, 72162.0], [67.4, 72162.0], [67.5, 72163.0], [67.6, 72163.0], [67.7, 72163.0], [67.8, 72163.0], [67.9, 72164.0], [68.0, 72164.0], [68.1, 72338.0], [68.2, 72338.0], [68.3, 72338.0], [68.4, 72338.0], [68.5, 72338.0], [68.6, 72338.0], [68.7, 72348.0], [68.8, 72348.0], [68.9, 72349.0], [69.0, 72349.0], [69.1, 72349.0], [69.2, 72349.0], [69.3, 72357.0], [69.4, 72357.0], [69.5, 72358.0], [69.6, 72358.0], [69.7, 72358.0], [69.8, 72358.0], [69.9, 72359.0], [70.0, 72359.0], [70.1, 72359.0], [70.2, 72359.0], [70.3, 72361.0], [70.4, 72361.0], [70.5, 72361.0], [70.6, 72361.0], [70.7, 72361.0], [70.8, 72361.0], [70.9, 72364.0], [71.0, 72364.0], [71.1, 72364.0], [71.2, 72364.0], [71.3, 72364.0], [71.4, 72364.0], [71.5, 72365.0], [71.6, 72365.0], [71.7, 72365.0], [71.8, 72365.0], [71.9, 72365.0], [72.0, 72365.0], [72.1, 72366.0], [72.2, 72366.0], [72.3, 72374.0], [72.4, 72374.0], [72.5, 72375.0], [72.6, 72375.0], [72.7, 72375.0], [72.8, 72375.0], [72.9, 72376.0], [73.0, 72376.0], [73.1, 72376.0], [73.2, 72376.0], [73.3, 72377.0], [73.4, 72377.0], [73.5, 72377.0], [73.6, 72377.0], [73.7, 72377.0], [73.8, 72377.0], [73.9, 72377.0], [74.0, 72377.0], [74.1, 72377.0], [74.2, 72377.0], [74.3, 72378.0], [74.4, 72378.0], [74.5, 72378.0], [74.6, 72378.0], [74.7, 72379.0], [74.8, 72379.0], [74.9, 72379.0], [75.0, 72379.0], [75.1, 72379.0], [75.2, 72379.0], [75.3, 72380.0], [75.4, 72380.0], [75.5, 72382.0], [75.6, 72382.0], [75.7, 72383.0], [75.8, 72383.0], [75.9, 72384.0], [76.0, 72384.0], [76.1, 72384.0], [76.2, 72384.0], [76.3, 72386.0], [76.4, 72386.0], [76.5, 72387.0], [76.6, 72387.0], [76.7, 72387.0], [76.8, 72387.0], [76.9, 72389.0], [77.0, 72389.0], [77.1, 72390.0], [77.2, 72390.0], [77.3, 72390.0], [77.4, 72390.0], [77.5, 72392.0], [77.6, 72392.0], [77.7, 72394.0], [77.8, 72394.0], [77.9, 72395.0], [78.0, 72395.0], [78.1, 72396.0], [78.2, 72396.0], [78.3, 72396.0], [78.4, 72396.0], [78.5, 72396.0], [78.6, 72396.0], [78.7, 72397.0], [78.8, 72397.0], [78.9, 72397.0], [79.0, 72397.0], [79.1, 72397.0], [79.2, 72397.0], [79.3, 72397.0], [79.4, 72397.0], [79.5, 72397.0], [79.6, 72397.0], [79.7, 72398.0], [79.8, 72398.0], [79.9, 72399.0], [80.0, 72399.0], [80.1, 72399.0], [80.2, 72399.0], [80.3, 72400.0], [80.4, 72400.0], [80.5, 72400.0], [80.6, 72400.0], [80.7, 72400.0], [80.8, 72400.0], [80.9, 72400.0], [81.0, 72400.0], [81.1, 72401.0], [81.2, 72401.0], [81.3, 72401.0], [81.4, 72401.0], [81.5, 72403.0], [81.6, 72403.0], [81.7, 72407.0], [81.8, 72407.0], [81.9, 72409.0], [82.0, 72409.0], [82.1, 72410.0], [82.2, 72410.0], [82.3, 72413.0], [82.4, 72413.0], [82.5, 72413.0], [82.6, 72413.0], [82.7, 72413.0], [82.8, 72413.0], [82.9, 72413.0], [83.0, 72413.0], [83.1, 72414.0], [83.2, 72414.0], [83.3, 72414.0], [83.4, 72414.0], [83.5, 72414.0], [83.6, 72414.0], [83.7, 72415.0], [83.8, 72415.0], [83.9, 72415.0], [84.0, 72415.0], [84.1, 72425.0], [84.2, 72425.0], [84.3, 72425.0], [84.4, 72425.0], [84.5, 72425.0], [84.6, 72425.0], [84.7, 72426.0], [84.8, 72426.0], [84.9, 72426.0], [85.0, 72426.0], [85.1, 72427.0], [85.2, 72427.0], [85.3, 72427.0], [85.4, 72427.0], [85.5, 72430.0], [85.6, 72430.0], [85.7, 72433.0], [85.8, 72433.0], [85.9, 72433.0], [86.0, 72433.0], [86.1, 72434.0], [86.2, 72434.0], [86.3, 72439.0], [86.4, 72439.0], [86.5, 72444.0], [86.6, 72444.0], [86.7, 72444.0], [86.8, 72444.0], [86.9, 72448.0], [87.0, 72448.0], [87.1, 72449.0], [87.2, 72449.0], [87.3, 72450.0], [87.4, 72450.0], [87.5, 72450.0], [87.6, 72450.0], [87.7, 72450.0], [87.8, 72450.0], [87.9, 72451.0], [88.0, 72451.0], [88.1, 72451.0], [88.2, 72451.0], [88.3, 72451.0], [88.4, 72451.0], [88.5, 72452.0], [88.6, 72452.0], [88.7, 72452.0], [88.8, 72452.0], [88.9, 72454.0], [89.0, 72454.0], [89.1, 72460.0], [89.2, 72460.0], [89.3, 72461.0], [89.4, 72461.0], [89.5, 72462.0], [89.6, 72462.0], [89.7, 72463.0], [89.8, 72463.0], [89.9, 72463.0], [90.0, 72463.0], [90.1, 72464.0], [90.2, 72464.0], [90.3, 72464.0], [90.4, 72464.0], [90.5, 72466.0], [90.6, 72466.0], [90.7, 72468.0], [90.8, 72468.0], [90.9, 72471.0], [91.0, 72471.0], [91.1, 72472.0], [91.2, 72472.0], [91.3, 72473.0], [91.4, 72473.0], [91.5, 72474.0], [91.6, 72474.0], [91.7, 72475.0], [91.8, 72475.0], [91.9, 72476.0], [92.0, 72476.0], [92.1, 72476.0], [92.2, 72476.0], [92.3, 72477.0], [92.4, 72477.0], [92.5, 72479.0], [92.6, 72479.0], [92.7, 72479.0], [92.8, 72479.0], [92.9, 72480.0], [93.0, 72480.0], [93.1, 72481.0], [93.2, 72481.0], [93.3, 72482.0], [93.4, 72482.0], [93.5, 72483.0], [93.6, 72483.0], [93.7, 72483.0], [93.8, 72483.0], [93.9, 72485.0], [94.0, 72485.0], [94.1, 72485.0], [94.2, 72485.0], [94.3, 72485.0], [94.4, 72485.0], [94.5, 72485.0], [94.6, 72485.0], [94.7, 72489.0], [94.8, 72489.0], [94.9, 72489.0], [95.0, 72489.0], [95.1, 72490.0], [95.2, 72490.0], [95.3, 72497.0], [95.4, 72497.0], [95.5, 72497.0], [95.6, 72497.0], [95.7, 72498.0], [95.8, 72498.0], [95.9, 72498.0], [96.0, 72498.0], [96.1, 72500.0], [96.2, 72500.0], [96.3, 72501.0], [96.4, 72501.0], [96.5, 72501.0], [96.6, 72501.0], [96.7, 72502.0], [96.8, 72502.0], [96.9, 72502.0], [97.0, 72502.0], [97.1, 72502.0], [97.2, 72502.0], [97.3, 72502.0], [97.4, 72502.0], [97.5, 72503.0], [97.6, 72503.0], [97.7, 72503.0], [97.8, 72503.0], [97.9, 72503.0], [98.0, 72503.0], [98.1, 72506.0], [98.2, 72506.0], [98.3, 72507.0], [98.4, 72507.0], [98.5, 72508.0], [98.6, 72508.0], [98.7, 72509.0], [98.8, 72509.0], [98.9, 72510.0], [99.0, 72510.0], [99.1, 72515.0], [99.2, 72515.0], [99.3, 72517.0], [99.4, 72517.0], [99.5, 72520.0], [99.6, 72520.0], [99.7, 72523.0], [99.8, 72523.0], [99.9, 72530.0], [100.0, 72530.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[0.0, 217.0], [0.1, 217.0], [0.2, 217.0], [0.3, 217.0], [0.4, 219.0], [0.5, 219.0], [0.6, 219.0], [0.7, 219.0], [0.8, 221.0], [0.9, 221.0], [1.0, 222.0], [1.1, 222.0], [1.2, 222.0], [1.3, 222.0], [1.4, 222.0], [1.5, 222.0], [1.6, 223.0], [1.7, 223.0], [1.8, 224.0], [1.9, 224.0], [2.0, 224.0], [2.1, 224.0], [2.2, 226.0], [2.3, 226.0], [2.4, 226.0], [2.5, 226.0], [2.6, 226.0], [2.7, 226.0], [2.8, 226.0], [2.9, 226.0], [3.0, 228.0], [3.1, 228.0], [3.2, 228.0], [3.3, 228.0], [3.4, 228.0], [3.5, 228.0], [3.6, 228.0], [3.7, 228.0], [3.8, 229.0], [3.9, 229.0], [4.0, 229.0], [4.1, 229.0], [4.2, 230.0], [4.3, 230.0], [4.4, 231.0], [4.5, 231.0], [4.6, 231.0], [4.7, 233.0], [4.8, 233.0], [4.9, 233.0], [5.0, 233.0], [5.1, 234.0], [5.2, 234.0], [5.3, 234.0], [5.4, 234.0], [5.5, 235.0], [5.6, 235.0], [5.7, 235.0], [5.8, 235.0], [5.9, 235.0], [6.0, 235.0], [6.1, 236.0], [6.2, 236.0], [6.3, 236.0], [6.4, 236.0], [6.5, 236.0], [6.6, 236.0], [6.7, 237.0], [6.8, 237.0], [6.9, 238.0], [7.0, 238.0], [7.1, 238.0], [7.2, 238.0], [7.3, 239.0], [7.4, 239.0], [7.5, 239.0], [7.6, 239.0], [7.7, 240.0], [7.8, 240.0], [7.9, 240.0], [8.0, 240.0], [8.1, 240.0], [8.2, 240.0], [8.3, 241.0], [8.4, 241.0], [8.5, 241.0], [8.6, 241.0], [8.7, 242.0], [8.8, 242.0], [8.9, 242.0], [9.0, 242.0], [9.1, 243.0], [9.2, 243.0], [9.3, 244.0], [9.4, 244.0], [9.5, 244.0], [9.6, 244.0], [9.7, 244.0], [9.8, 244.0], [9.9, 244.0], [10.0, 244.0], [10.1, 244.0], [10.2, 244.0], [10.3, 244.0], [10.4, 245.0], [10.5, 245.0], [10.6, 246.0], [10.7, 246.0], [10.8, 246.0], [10.9, 246.0], [11.0, 246.0], [11.1, 246.0], [11.2, 246.0], [11.3, 246.0], [11.4, 248.0], [11.5, 248.0], [11.6, 248.0], [11.7, 248.0], [11.8, 249.0], [11.9, 249.0], [12.0, 249.0], [12.1, 249.0], [12.2, 249.0], [12.3, 249.0], [12.4, 251.0], [12.5, 251.0], [12.6, 252.0], [12.7, 252.0], [12.8, 252.0], [12.9, 252.0], [13.0, 254.0], [13.1, 254.0], [13.2, 255.0], [13.3, 255.0], [13.4, 255.0], [13.5, 255.0], [13.6, 256.0], [13.7, 256.0], [13.8, 257.0], [13.9, 257.0], [14.0, 260.0], [14.1, 260.0], [14.2, 260.0], [14.3, 260.0], [14.4, 262.0], [14.5, 262.0], [14.6, 263.0], [14.7, 263.0], [14.8, 263.0], [14.9, 263.0], [15.0, 265.0], [15.1, 265.0], [15.2, 265.0], [15.3, 265.0], [15.4, 265.0], [15.5, 265.0], [15.6, 266.0], [15.7, 266.0], [15.8, 266.0], [15.9, 266.0], [16.0, 266.0], [16.1, 266.0], [16.2, 267.0], [16.3, 267.0], [16.4, 267.0], [16.5, 267.0], [16.6, 269.0], [16.7, 269.0], [16.8, 269.0], [16.9, 269.0], [17.0, 270.0], [17.1, 270.0], [17.2, 270.0], [17.3, 270.0], [17.4, 271.0], [17.5, 271.0], [17.6, 272.0], [17.7, 272.0], [17.8, 275.0], [17.9, 275.0], [18.0, 277.0], [18.1, 277.0], [18.2, 278.0], [18.3, 278.0], [18.4, 279.0], [18.5, 279.0], [18.6, 283.0], [18.7, 283.0], [18.8, 284.0], [18.9, 284.0], [19.0, 284.0], [19.1, 284.0], [19.2, 284.0], [19.3, 284.0], [19.4, 285.0], [19.5, 285.0], [19.6, 286.0], [19.7, 286.0], [19.8, 288.0], [19.9, 288.0], [20.0, 288.0], [20.1, 288.0], [20.2, 289.0], [20.3, 289.0], [20.4, 291.0], [20.5, 291.0], [20.6, 291.0], [20.7, 291.0], [20.8, 293.0], [20.9, 293.0], [21.0, 294.0], [21.1, 294.0], [21.2, 356.0], [21.3, 356.0], [21.4, 364.0], [21.5, 364.0], [21.6, 368.0], [21.7, 368.0], [21.8, 369.0], [21.9, 369.0], [22.0, 371.0], [22.1, 371.0], [22.2, 372.0], [22.3, 372.0], [22.4, 376.0], [22.5, 376.0], [22.6, 376.0], [22.7, 376.0], [22.8, 377.0], [22.9, 377.0], [23.0, 377.0], [23.1, 377.0], [23.2, 380.0], [23.3, 380.0], [23.4, 380.0], [23.5, 380.0], [23.6, 385.0], [23.7, 385.0], [23.8, 392.0], [23.9, 392.0], [24.0, 393.0], [24.1, 393.0], [24.2, 395.0], [24.3, 395.0], [24.4, 396.0], [24.5, 396.0], [24.6, 396.0], [24.7, 396.0], [24.8, 398.0], [24.9, 398.0], [25.0, 400.0], [25.1, 400.0], [25.2, 401.0], [25.3, 401.0], [25.4, 402.0], [25.5, 402.0], [25.6, 404.0], [25.7, 404.0], [25.8, 404.0], [25.9, 404.0], [26.0, 405.0], [26.1, 405.0], [26.2, 406.0], [26.3, 406.0], [26.4, 407.0], [26.5, 407.0], [26.6, 408.0], [26.7, 408.0], [26.8, 410.0], [26.9, 410.0], [27.0, 411.0], [27.1, 411.0], [27.2, 418.0], [27.3, 418.0], [27.4, 418.0], [27.5, 418.0], [27.6, 421.0], [27.7, 421.0], [27.8, 427.0], [27.9, 427.0], [28.0, 434.0], [28.1, 434.0], [28.2, 440.0], [28.3, 440.0], [28.4, 441.0], [28.5, 441.0], [28.6, 447.0], [28.7, 447.0], [28.8, 448.0], [28.9, 448.0], [29.0, 450.0], [29.1, 450.0], [29.2, 451.0], [29.3, 451.0], [29.4, 452.0], [29.5, 452.0], [29.6, 455.0], [29.7, 455.0], [29.8, 459.0], [29.9, 459.0], [30.0, 464.0], [30.1, 464.0], [30.2, 465.0], [30.3, 465.0], [30.4, 466.0], [30.5, 466.0], [30.6, 466.0], [30.7, 466.0], [30.8, 467.0], [30.9, 467.0], [31.0, 470.0], [31.1, 470.0], [31.2, 471.0], [31.3, 471.0], [31.4, 472.0], [31.5, 472.0], [31.6, 474.0], [31.7, 474.0], [31.8, 475.0], [31.9, 475.0], [32.0, 476.0], [32.1, 476.0], [32.2, 476.0], [32.3, 476.0], [32.4, 476.0], [32.5, 476.0], [32.6, 477.0], [32.7, 477.0], [32.8, 477.0], [32.9, 477.0], [33.0, 479.0], [33.1, 479.0], [33.2, 479.0], [33.3, 479.0], [33.4, 479.0], [33.5, 479.0], [33.6, 480.0], [33.7, 480.0], [33.8, 480.0], [33.9, 480.0], [34.0, 482.0], [34.1, 482.0], [34.2, 482.0], [34.3, 482.0], [34.4, 482.0], [34.5, 482.0], [34.6, 482.0], [34.7, 482.0], [34.8, 483.0], [34.9, 483.0], [35.0, 484.0], [35.1, 484.0], [35.2, 484.0], [35.3, 484.0], [35.4, 484.0], [35.5, 484.0], [35.6, 485.0], [35.7, 485.0], [35.8, 485.0], [35.9, 485.0], [36.0, 485.0], [36.1, 485.0], [36.2, 485.0], [36.3, 485.0], [36.4, 487.0], [36.5, 487.0], [36.6, 487.0], [36.7, 487.0], [36.8, 488.0], [36.9, 488.0], [37.0, 489.0], [37.1, 489.0], [37.2, 489.0], [37.3, 489.0], [37.4, 489.0], [37.5, 489.0], [37.6, 490.0], [37.7, 490.0], [37.8, 490.0], [37.9, 490.0], [38.0, 490.0], [38.1, 490.0], [38.2, 490.0], [38.3, 490.0], [38.4, 491.0], [38.5, 491.0], [38.6, 492.0], [38.7, 492.0], [38.8, 493.0], [38.9, 493.0], [39.0, 493.0], [39.1, 493.0], [39.2, 493.0], [39.3, 493.0], [39.4, 493.0], [39.5, 493.0], [39.6, 493.0], [39.7, 493.0], [39.8, 494.0], [39.9, 494.0], [40.0, 494.0], [40.1, 494.0], [40.2, 494.0], [40.3, 494.0], [40.4, 494.0], [40.5, 494.0], [40.6, 495.0], [40.7, 495.0], [40.8, 495.0], [40.9, 495.0], [41.0, 495.0], [41.1, 495.0], [41.2, 495.0], [41.3, 495.0], [41.4, 496.0], [41.5, 496.0], [41.6, 496.0], [41.7, 496.0], [41.8, 496.0], [41.9, 496.0], [42.0, 496.0], [42.1, 496.0], [42.2, 497.0], [42.3, 497.0], [42.4, 498.0], [42.5, 498.0], [42.6, 498.0], [42.7, 498.0], [42.8, 499.0], [42.9, 499.0], [43.0, 499.0], [43.1, 499.0], [43.2, 499.0], [43.3, 499.0], [43.4, 499.0], [43.5, 499.0], [43.6, 499.0], [43.7, 499.0], [43.8, 499.0], [43.9, 499.0], [44.0, 499.0], [44.1, 499.0], [44.2, 499.0], [44.3, 499.0], [44.4, 499.0], [44.5, 499.0], [44.6, 500.0], [44.7, 500.0], [44.8, 501.0], [44.9, 501.0], [45.0, 501.0], [45.1, 501.0], [45.2, 501.0], [45.3, 501.0], [45.4, 501.0], [45.5, 501.0], [45.6, 501.0], [45.7, 501.0], [45.8, 501.0], [45.9, 501.0], [46.0, 501.0], [46.1, 501.0], [46.2, 501.0], [46.3, 501.0], [46.4, 502.0], [46.5, 502.0], [46.6, 502.0], [46.7, 502.0], [46.8, 502.0], [46.9, 502.0], [47.0, 502.0], [47.1, 502.0], [47.2, 502.0], [47.3, 502.0], [47.4, 502.0], [47.5, 502.0], [47.6, 502.0], [47.7, 502.0], [47.8, 502.0], [47.9, 502.0], [48.0, 502.0], [48.1, 502.0], [48.2, 502.0], [48.3, 502.0], [48.4, 502.0], [48.5, 502.0], [48.6, 503.0], [48.7, 503.0], [48.8, 503.0], [48.9, 503.0], [49.0, 503.0], [49.1, 503.0], [49.2, 503.0], [49.3, 503.0], [49.4, 503.0], [49.5, 503.0], [49.6, 504.0], [49.7, 504.0], [49.8, 504.0], [49.9, 504.0], [50.0, 504.0], [50.1, 504.0], [50.2, 504.0], [50.3, 504.0], [50.4, 504.0], [50.5, 504.0], [50.6, 505.0], [50.7, 505.0], [50.8, 505.0], [50.9, 505.0], [51.0, 505.0], [51.1, 505.0], [51.2, 505.0], [51.3, 505.0], [51.4, 505.0], [51.5, 505.0], [51.6, 506.0], [51.7, 506.0], [51.8, 506.0], [51.9, 506.0], [52.0, 506.0], [52.1, 506.0], [52.2, 506.0], [52.3, 506.0], [52.4, 507.0], [52.5, 507.0], [52.6, 507.0], [52.7, 507.0], [52.8, 508.0], [52.9, 508.0], [53.0, 508.0], [53.1, 508.0], [53.2, 508.0], [53.3, 508.0], [53.4, 508.0], [53.5, 508.0], [53.6, 509.0], [53.7, 509.0], [53.8, 509.0], [53.9, 509.0], [54.0, 509.0], [54.1, 509.0], [54.2, 509.0], [54.3, 509.0], [54.4, 509.0], [54.5, 509.0], [54.6, 509.0], [54.7, 509.0], [54.8, 509.0], [54.9, 509.0], [55.0, 510.0], [55.1, 510.0], [55.2, 510.0], [55.3, 510.0], [55.4, 511.0], [55.5, 511.0], [55.6, 511.0], [55.7, 511.0], [55.8, 511.0], [55.9, 511.0], [56.0, 511.0], [56.1, 511.0], [56.2, 511.0], [56.3, 511.0], [56.4, 511.0], [56.5, 511.0], [56.6, 511.0], [56.7, 511.0], [56.8, 511.0], [56.9, 511.0], [57.0, 511.0], [57.1, 511.0], [57.2, 512.0], [57.3, 512.0], [57.4, 512.0], [57.5, 512.0], [57.6, 512.0], [57.7, 512.0], [57.8, 512.0], [57.9, 512.0], [58.0, 512.0], [58.1, 512.0], [58.2, 512.0], [58.3, 512.0], [58.4, 512.0], [58.5, 512.0], [58.6, 512.0], [58.7, 512.0], [58.8, 512.0], [58.9, 512.0], [59.0, 513.0], [59.1, 513.0], [59.2, 513.0], [59.3, 513.0], [59.4, 514.0], [59.5, 514.0], [59.6, 514.0], [59.7, 514.0], [59.8, 514.0], [59.9, 514.0], [60.0, 515.0], [60.1, 515.0], [60.2, 515.0], [60.3, 515.0], [60.4, 516.0], [60.5, 516.0], [60.6, 516.0], [60.7, 516.0], [60.8, 516.0], [60.9, 516.0], [61.0, 517.0], [61.1, 517.0], [61.2, 517.0], [61.3, 517.0], [61.4, 518.0], [61.5, 518.0], [61.6, 518.0], [61.7, 518.0], [61.8, 518.0], [61.9, 518.0], [62.0, 518.0], [62.1, 518.0], [62.2, 519.0], [62.3, 519.0], [62.4, 520.0], [62.5, 520.0], [62.6, 520.0], [62.7, 520.0], [62.8, 520.0], [62.9, 520.0], [63.0, 520.0], [63.1, 520.0], [63.2, 520.0], [63.3, 520.0], [63.4, 521.0], [63.5, 521.0], [63.6, 521.0], [63.7, 521.0], [63.8, 521.0], [63.9, 521.0], [64.0, 521.0], [64.1, 521.0], [64.2, 522.0], [64.3, 522.0], [64.4, 522.0], [64.5, 522.0], [64.6, 522.0], [64.7, 522.0], [64.8, 523.0], [64.9, 523.0], [65.0, 523.0], [65.1, 523.0], [65.2, 523.0], [65.3, 523.0], [65.4, 523.0], [65.5, 523.0], [65.6, 524.0], [65.7, 524.0], [65.8, 524.0], [65.9, 524.0], [66.0, 524.0], [66.1, 524.0], [66.2, 525.0], [66.3, 525.0], [66.4, 525.0], [66.5, 525.0], [66.6, 525.0], [66.7, 525.0], [66.8, 525.0], [66.9, 525.0], [67.0, 525.0], [67.1, 525.0], [67.2, 526.0], [67.3, 526.0], [67.4, 527.0], [67.5, 527.0], [67.6, 527.0], [67.7, 527.0], [67.8, 528.0], [67.9, 528.0], [68.0, 528.0], [68.1, 528.0], [68.2, 528.0], [68.3, 528.0], [68.4, 529.0], [68.5, 529.0], [68.6, 529.0], [68.7, 529.0], [68.8, 529.0], [68.9, 529.0], [69.0, 530.0], [69.1, 530.0], [69.2, 530.0], [69.3, 530.0], [69.4, 531.0], [69.5, 531.0], [69.6, 532.0], [69.7, 532.0], [69.8, 532.0], [69.9, 532.0], [70.0, 532.0], [70.1, 532.0], [70.2, 533.0], [70.3, 533.0], [70.4, 533.0], [70.5, 533.0], [70.6, 534.0], [70.7, 534.0], [70.8, 534.0], [70.9, 534.0], [71.0, 534.0], [71.1, 534.0], [71.2, 535.0], [71.3, 535.0], [71.4, 535.0], [71.5, 535.0], [71.6, 535.0], [71.7, 535.0], [71.8, 535.0], [71.9, 535.0], [72.0, 535.0], [72.1, 535.0], [72.2, 536.0], [72.3, 536.0], [72.4, 536.0], [72.5, 536.0], [72.6, 536.0], [72.7, 536.0], [72.8, 537.0], [72.9, 537.0], [73.0, 537.0], [73.1, 537.0], [73.2, 537.0], [73.3, 537.0], [73.4, 537.0], [73.5, 537.0], [73.6, 537.0], [73.7, 537.0], [73.8, 538.0], [73.9, 538.0], [74.0, 538.0], [74.1, 538.0], [74.2, 538.0], [74.3, 538.0], [74.4, 538.0], [74.5, 538.0], [74.6, 539.0], [74.7, 539.0], [74.8, 540.0], [74.9, 540.0], [75.0, 540.0], [75.1, 540.0], [75.2, 540.0], [75.3, 540.0], [75.4, 541.0], [75.5, 541.0], [75.6, 543.0], [75.7, 543.0], [75.8, 544.0], [75.9, 544.0], [76.0, 544.0], [76.1, 544.0], [76.2, 544.0], [76.3, 544.0], [76.4, 545.0], [76.5, 545.0], [76.6, 545.0], [76.7, 545.0], [76.8, 547.0], [76.9, 547.0], [77.0, 548.0], [77.1, 548.0], [77.2, 548.0], [77.3, 548.0], [77.4, 551.0], [77.5, 551.0], [77.6, 552.0], [77.7, 552.0], [77.8, 552.0], [77.9, 552.0], [78.0, 553.0], [78.1, 553.0], [78.2, 554.0], [78.3, 554.0], [78.4, 554.0], [78.5, 554.0], [78.6, 555.0], [78.7, 555.0], [78.8, 556.0], [78.9, 556.0], [79.0, 556.0], [79.1, 556.0], [79.2, 557.0], [79.3, 557.0], [79.4, 559.0], [79.5, 559.0], [79.6, 560.0], [79.7, 560.0], [79.8, 699.0], [79.9, 699.0], [80.0, 700.0], [80.1, 700.0], [80.2, 738.0], [80.3, 738.0], [80.4, 760.0], [80.5, 760.0], [80.6, 764.0], [80.7, 764.0], [80.8, 774.0], [80.9, 774.0], [81.0, 774.0], [81.1, 774.0], [81.2, 774.0], [81.3, 774.0], [81.4, 774.0], [81.5, 774.0], [81.6, 777.0], [81.7, 777.0], [81.8, 902.0], [81.9, 902.0], [82.0, 907.0], [82.1, 907.0], [82.2, 933.0], [82.3, 933.0], [82.4, 968.0], [82.5, 968.0], [82.6, 969.0], [82.7, 969.0], [82.8, 969.0], [82.9, 969.0], [83.0, 970.0], [83.1, 970.0], [83.2, 970.0], [83.3, 970.0], [83.4, 977.0], [83.5, 977.0], [83.6, 977.0], [83.7, 977.0], [83.8, 1104.0], [83.9, 1104.0], [84.0, 1111.0], [84.1, 1111.0], [84.2, 1176.0], [84.3, 1176.0], [84.4, 1177.0], [84.5, 1177.0], [84.6, 1177.0], [84.7, 1178.0], [84.8, 1178.0], [84.9, 1178.0], [85.0, 1178.0], [85.1, 1179.0], [85.2, 1179.0], [85.3, 1181.0], [85.4, 1181.0], [85.5, 1182.0], [85.6, 1182.0], [85.7, 1187.0], [85.8, 1187.0], [85.9, 1304.0], [86.0, 1304.0], [86.1, 1309.0], [86.2, 1309.0], [86.3, 1357.0], [86.4, 1357.0], [86.5, 1358.0], [86.6, 1358.0], [86.7, 1361.0], [86.8, 1361.0], [86.9, 1361.0], [87.0, 1361.0], [87.1, 1369.0], [87.2, 1369.0], [87.3, 1369.0], [87.4, 1369.0], [87.5, 1370.0], [87.6, 1370.0], [87.7, 1374.0], [87.8, 1374.0], [87.9, 1468.0], [88.0, 1468.0], [88.1, 1471.0], [88.2, 1471.0], [88.3, 1478.0], [88.4, 1478.0], [88.5, 1489.0], [88.6, 1489.0], [88.7, 1490.0], [88.8, 1490.0], [88.9, 1490.0], [89.0, 1490.0], [89.1, 1491.0], [89.2, 1491.0], [89.3, 1492.0], [89.4, 1492.0], [89.5, 1498.0], [89.6, 1498.0], [89.7, 1502.0], [89.8, 1502.0], [89.9, 1503.0], [90.0, 1503.0], [90.1, 1504.0], [90.2, 1504.0], [90.3, 1505.0], [90.4, 1505.0], [90.5, 1506.0], [90.6, 1506.0], [90.7, 1506.0], [90.8, 1506.0], [90.9, 1510.0], [91.0, 1510.0], [91.1, 1523.0], [91.2, 1523.0], [91.3, 1531.0], [91.4, 1531.0], [91.5, 1533.0], [91.6, 1533.0], [91.7, 1535.0], [91.8, 1535.0], [91.9, 1535.0], [92.0, 1535.0], [92.1, 1536.0], [92.2, 1536.0], [92.3, 1536.0], [92.4, 1536.0], [92.5, 1537.0], [92.6, 1537.0], [92.7, 1538.0], [92.8, 1538.0], [92.9, 1538.0], [93.0, 1538.0], [93.1, 1539.0], [93.2, 1539.0], [93.3, 1541.0], [93.4, 1541.0], [93.5, 1544.0], [93.6, 1544.0], [93.7, 1544.0], [93.8, 1544.0], [93.9, 1545.0], [94.0, 1545.0], [94.1, 1546.0], [94.2, 1546.0], [94.3, 1546.0], [94.4, 1546.0], [94.5, 1546.0], [94.6, 1546.0], [94.7, 1547.0], [94.8, 1547.0], [94.9, 1547.0], [95.0, 1547.0], [95.1, 1547.0], [95.2, 1547.0], [95.3, 1549.0], [95.4, 1549.0], [95.5, 1549.0], [95.6, 1549.0], [95.7, 1550.0], [95.8, 1550.0], [95.9, 1550.0], [96.0, 1550.0], [96.1, 1550.0], [96.2, 1550.0], [96.3, 1550.0], [96.4, 1550.0], [96.5, 1551.0], [96.6, 1551.0], [96.7, 1553.0], [96.8, 1553.0], [96.9, 1553.0], [97.0, 1553.0], [97.1, 1554.0], [97.2, 1554.0], [97.3, 1556.0], [97.4, 1556.0], [97.5, 1559.0], [97.6, 1559.0], [97.7, 1559.0], [97.8, 1559.0], [97.9, 1560.0], [98.0, 1560.0], [98.1, 1575.0], [98.2, 1575.0], [98.3, 1584.0], [98.4, 1584.0], [98.5, 1584.0], [98.6, 1584.0], [98.7, 1587.0], [98.8, 1587.0], [98.9, 1593.0], [99.0, 1593.0], [99.1, 1604.0], [99.2, 1604.0], [99.3, 1607.0], [99.4, 1607.0], [99.5, 1608.0], [99.6, 1608.0], [99.7, 1611.0], [99.8, 1611.0], [99.9, 6120.0], [100.0, 6120.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 313.0, "series": [{"data": [[0.0, 30.0], [2700.0, 30.0], [2900.0, 1.0], [100.0, 313.0], [200.0, 126.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[61300.0, 42.0], [61400.0, 37.0], [62200.0, 94.0], [62100.0, 48.0], [62000.0, 55.0], [61900.0, 3.0], [63200.0, 10.0], [63300.0, 1.0], [63400.0, 1.0], [65400.0, 29.0], [68900.0, 1.0], [71400.0, 3.0], [72100.0, 6.0], [72300.0, 61.0], [72400.0, 79.0], [72500.0, 20.0], [71700.0, 7.0], [72000.0, 3.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[600.0, 1.0], [700.0, 9.0], [200.0, 106.0], [900.0, 10.0], [1100.0, 10.0], [300.0, 19.0], [1300.0, 10.0], [1400.0, 9.0], [1500.0, 47.0], [6100.0, 1.0], [400.0, 98.0], [1600.0, 4.0], [500.0, 176.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 72500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 224.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 693.0, "series": [{"data": [[0.0, 693.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 224.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 583.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 83.0248447204969, "minX": 1.608743166E12, "maxY": 500.0, "series": [{"data": [[1.60874317E12, 500.0], [1.608743172E12, 500.0], [1.608743235E12, 206.55172413793105], [1.608743237E12, 181.0], [1.608743228E12, 500.0], [1.608743238E12, 172.29411764705884], [1.608743229E12, 402.08500000000015], [1.608743175E12, 500.0], [1.608743239E12, 83.0248447204969], [1.608743166E12, 393.4629156010227], [1.60874323E12, 220.63636363636363], [1.608743167E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608743239E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 106.72727272727272, "minX": 2.0, "maxY": 72523.0, "series": [{"data": [[315.0, 106.72727272727272], [317.0, 113.0], [318.0, 107.63636363636364], [320.0, 108.5], [329.0, 132.0], [334.0, 123.75], [337.0, 120.66666666666667], [338.0, 122.0], [359.0, 138.33333333333334], [360.0, 136.36363636363637], [362.0, 132.5], [363.0, 131.0], [404.0, 202.0], [406.0, 205.11111111111111], [431.0, 223.0], [433.0, 221.0], [434.0, 221.33333333333334], [435.0, 220.0], [438.0, 215.45454545454547], [477.0, 265.5], [478.0, 233.16666666666666], [479.0, 234.9], [480.0, 225.5], [481.0, 272.0], [500.0, 390.8903743315506]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[471.4659999999999, 334.678]], "isOverall": false, "label": "GET /login-Aggregated", "isController": false}, {"data": [[2.0, 70377.0], [6.0, 71769.0], [9.0, 71770.0], [11.0, 71929.0], [12.0, 72349.0], [14.0, 72397.0], [15.0, 72349.0], [17.0, 72374.0], [19.0, 72388.0], [21.0, 72388.0], [22.0, 72384.0], [26.0, 72377.5], [27.0, 72377.5], [32.0, 72376.33333333333], [39.0, 72360.0], [41.0, 72361.71428571428], [42.0, 72401.0], [44.0, 72397.0], [48.0, 72398.4], [52.0, 72389.5], [55.0, 72382.66666666667], [62.0, 72392.14285714286], [66.0, 72396.0], [70.0, 72400.0], [69.0, 72396.0], [72.0, 72398.5], [78.0, 72377.66666666667], [82.0, 72383.25], [85.0, 72433.33333333333], [92.0, 72425.85714285714], [99.0, 72414.0], [97.0, 72473.0], [102.0, 72423.33333333334], [100.0, 72443.5], [106.0, 72453.0], [110.0, 72515.0], [109.0, 72444.0], [108.0, 72468.75], [114.0, 72510.0], [112.0, 72473.5], [117.0, 72509.0], [116.0, 72507.0], [122.0, 72501.8], [125.0, 72489.33333333333], [134.0, 72503.0], [132.0, 72483.8], [130.0, 72520.0], [129.0, 72523.0], [141.0, 72497.33333333333], [138.0, 72499.0], [137.0, 72502.33333333333], [151.0, 72466.0], [148.0, 72480.66666666667], [146.0, 72480.5], [145.0, 72481.0], [158.0, 72469.16666666666], [156.0, 72476.0], [167.0, 72450.5], [161.0, 72461.0], [171.0, 72338.0], [168.0, 72448.0], [181.0, 71453.0], [178.0, 70923.57142857143], [205.0, 65463.5], [210.0, 65465.22222222222], [221.0, 63267.625], [220.0, 63256.0], [219.0, 63255.0], [397.0, 62105.958333333336], [396.0, 62098.0], [393.0, 62127.0], [399.0, 62150.333333333336], [394.0, 62080.9076923077], [413.0, 62261.0], [415.0, 62264.5], [412.0, 62265.333333333336], [411.0, 62264.0], [409.0, 62244.17021276596], [410.0, 62262.0], [408.0, 62213.333333333336], [407.0, 62213.0], [404.0, 62213.5], [403.0, 62215.0], [402.0, 62216.0], [400.0, 62182.2], [421.0, 62260.28571428571], [419.0, 62261.625], [418.0, 62261.0], [416.0, 62260.5], [500.0, 61382.189873417745]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[290.346, 65926.19400000003]], "isOverall": false, "label": "POST /graphql - Login-Aggregated", "isController": false}, {"data": [[261.0, 271.6666666666667], [260.0, 380.5], [264.0, 260.5], [265.0, 257.25], [266.0, 250.0], [273.0, 240.33333333333334], [274.0, 241.0], [275.0, 239.0], [276.0, 249.0], [277.0, 239.0], [278.0, 232.4], [279.0, 223.0], [281.0, 226.0], [288.0, 230.66666666666666], [289.0, 224.0], [291.0, 328.75], [292.0, 442.1666666666667], [298.0, 228.0], [301.0, 233.5], [302.0, 222.25], [305.0, 228.5], [320.0, 250.16666666666666], [322.0, 249.0], [323.0, 278.42857142857144], [324.0, 499.0], [339.0, 266.3333333333333], [342.0, 263.0], [343.0, 553.0], [344.0, 549.0], [345.0, 548.0], [362.0, 286.0], [363.0, 288.25], [364.0, 284.5], [367.0, 275.0], [368.0, 286.0], [420.0, 374.42857142857144], [421.0, 367.25], [422.0, 699.5], [445.0, 406.0], [447.0, 411.0], [449.0, 413.0], [450.0, 406.25], [452.0, 400.0], [453.0, 395.5], [454.0, 544.2], [455.0, 769.3333333333334], [456.0, 763.0], [483.0, 450.0], [484.0, 455.5], [494.0, 453.5], [493.0, 466.0], [490.0, 465.5], [500.0, 776.7883435582821]], "isOverall": false, "label": "GET /", "isController": false}, {"data": [[445.22199999999987, 624.6899999999998]], "isOverall": false, "label": "GET /-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 117.0, "minX": 1.608743166E12, "maxY": 1417136.0, "series": [{"data": [[1.60874317E12, 61800.0], [1.608743172E12, 2894.0], [1.608743235E12, 23432.0], [1.608743237E12, 4335.0], [1.608743228E12, 63832.0], [1.608743238E12, 23928.0], [1.608743229E12, 161600.0], [1.608743175E12, 2060.0], [1.608743239E12, 232645.0], [1.608743166E12, 993110.0], [1.60874323E12, 8888.0], [1.608743167E12, 1417136.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60874317E12, 3660.0], [1.608743172E12, 117.0], [1.608743235E12, 20503.0], [1.608743237E12, 2121.0], [1.608743228E12, 55853.0], [1.608743238E12, 12019.0], [1.608743229E12, 141400.0], [1.608743175E12, 122.0], [1.608743239E12, 113827.0], [1.608743166E12, 46577.0], [1.60874323E12, 7777.0], [1.608743167E12, 69024.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608743239E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 170.39156626506025, "minX": 1.608743166E12, "maxY": 72372.98136645963, "series": [{"data": [[1.60874317E12, 2779.7999999999997], [1.608743175E12, 2969.0], [1.608743166E12, 170.39156626506025], [1.608743167E12, 173.89768976897685]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.608743235E12, 65464.034482758616], [1.608743237E12, 71453.0], [1.608743228E12, 61382.189873417745], [1.608743238E12, 71801.76470588235], [1.608743229E12, 62162.49999999999], [1.608743239E12, 72372.98136645963], [1.60874323E12, 63264.36363636364]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.608743172E12, 6120.0], [1.608743166E12, 396.2533333333334], [1.608743167E12, 792.2189781021899]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743239E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 170.3012048192771, "minX": 1.608743166E12, "maxY": 72372.78881987574, "series": [{"data": [[1.60874317E12, 2779.7999999999997], [1.608743175E12, 2969.0], [1.608743166E12, 170.3012048192771], [1.608743167E12, 173.85148514851477]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.608743235E12, 65464.034482758616], [1.608743237E12, 71453.0], [1.608743228E12, 61382.189873417745], [1.608743238E12, 71801.76470588235], [1.608743229E12, 62162.494999999995], [1.608743239E12, 72372.78881987574], [1.60874323E12, 63264.36363636364]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.608743172E12, 6120.0], [1.608743166E12, 396.0488888888888], [1.608743167E12, 792.0401459854013]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743239E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.608743166E12, "maxY": 47.93430656934313, "series": [{"data": [[1.60874317E12, 0.0], [1.608743175E12, 0.0], [1.608743166E12, 0.0], [1.608743167E12, 0.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.608743235E12, 0.0], [1.608743237E12, 0.0], [1.608743228E12, 0.0], [1.608743238E12, 0.0], [1.608743229E12, 0.0], [1.608743239E12, 0.0], [1.60874323E12, 0.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.608743172E12, 38.0], [1.608743166E12, 46.235555555555514], [1.608743167E12, 47.93430656934313]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743239E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 49.0, "minX": 1.608743166E12, "maxY": 72530.0, "series": [{"data": [[1.60874317E12, 2793.0], [1.608743172E12, 6120.0], [1.608743235E12, 65470.0], [1.608743237E12, 71454.0], [1.608743228E12, 61481.0], [1.608743238E12, 72451.0], [1.608743229E12, 62276.0], [1.608743175E12, 2969.0], [1.608743239E12, 72530.0], [1.608743166E12, 977.0], [1.60874323E12, 63300.0], [1.608743167E12, 1611.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60874317E12, 2792.0], [1.608743172E12, 6120.0], [1.608743235E12, 65470.0], [1.608743237E12, 71454.0], [1.608743228E12, 61478.0], [1.608743238E12, 72451.0], [1.608743229E12, 62263.0], [1.608743175E12, 2969.0], [1.608743239E12, 72502.0], [1.608743166E12, 510.6], [1.60874323E12, 63294.4], [1.608743167E12, 1480.2000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60874317E12, 2793.0], [1.608743172E12, 6120.0], [1.608743235E12, 65470.0], [1.608743237E12, 71454.0], [1.608743228E12, 61481.0], [1.608743238E12, 72451.0], [1.608743229E12, 62269.99], [1.608743175E12, 2969.0], [1.608743239E12, 72525.66], [1.608743166E12, 970.0], [1.60874323E12, 63300.0], [1.608743167E12, 1588.3200000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60874317E12, 2792.45], [1.608743172E12, 6120.0], [1.608743235E12, 65470.0], [1.608743237E12, 71454.0], [1.608743228E12, 61480.0], [1.608743238E12, 72451.0], [1.608743229E12, 62265.0], [1.608743175E12, 2969.0], [1.608743239E12, 72507.9], [1.608743166E12, 699.4], [1.60874323E12, 63300.0], [1.608743167E12, 1546.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60874317E12, 2763.0], [1.608743172E12, 6120.0], [1.608743235E12, 65460.0], [1.608743237E12, 71452.0], [1.608743228E12, 61301.0], [1.608743238E12, 63489.0], [1.608743229E12, 61998.0], [1.608743175E12, 2969.0], [1.608743239E12, 68980.0], [1.608743166E12, 104.0], [1.60874323E12, 63254.0], [1.608743167E12, 49.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60874317E12, 2783.5], [1.608743172E12, 6120.0], [1.608743235E12, 65463.0], [1.608743237E12, 71453.0], [1.608743228E12, 61323.0], [1.608743238E12, 72338.0], [1.608743229E12, 62137.5], [1.608743175E12, 2969.0], [1.608743239E12, 72413.0], [1.608743166E12, 241.0], [1.60874323E12, 63257.0], [1.608743167E12, 252.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608743239E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 241.0, "minX": 1.0, "maxY": 72413.0, "series": [{"data": [[1.0, 4544.5], [17.0, 72338.0], [577.0, 252.0], [79.0, 61323.0], [161.0, 72413.0], [11.0, 63257.0], [391.0, 241.0], [3.0, 71453.0], [200.0, 62137.5], [29.0, 65463.0], [30.0, 2783.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 577.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 241.0, "minX": 1.0, "maxY": 72413.0, "series": [{"data": [[1.0, 4544.5], [17.0, 72338.0], [577.0, 252.0], [79.0, 61323.0], [161.0, 72413.0], [11.0, 63257.0], [391.0, 241.0], [3.0, 71453.0], [200.0, 62137.5], [29.0, 65463.0], [30.0, 2783.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 577.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.608743166E12, "maxY": 891.0, "series": [{"data": [[1.60874317E12, 30.0], [1.608743172E12, 1.0], [1.608743175E12, 1.0], [1.608743166E12, 891.0], [1.608743167E12, 577.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608743175E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.608743166E12, "maxY": 577.0, "series": [{"data": [[1.60874317E12, 30.0], [1.608743172E12, 1.0], [1.608743235E12, 29.0], [1.608743237E12, 3.0], [1.608743228E12, 79.0], [1.608743238E12, 17.0], [1.608743229E12, 200.0], [1.608743175E12, 1.0], [1.608743239E12, 161.0], [1.608743166E12, 391.0], [1.60874323E12, 11.0], [1.608743167E12, 577.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608743239E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.608743166E12, "maxY": 303.0, "series": [{"data": [[1.608743172E12, 1.0], [1.608743166E12, 225.0], [1.608743167E12, 274.0]], "isOverall": false, "label": "GET /-success", "isController": false}, {"data": [[1.608743235E12, 29.0], [1.608743237E12, 3.0], [1.608743228E12, 79.0], [1.608743238E12, 17.0], [1.608743229E12, 200.0], [1.608743239E12, 161.0], [1.60874323E12, 11.0]], "isOverall": false, "label": "POST /graphql - Login-success", "isController": false}, {"data": [[1.60874317E12, 30.0], [1.608743175E12, 1.0], [1.608743166E12, 166.0], [1.608743167E12, 303.0]], "isOverall": false, "label": "GET /login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743239E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.608743166E12, "maxY": 577.0, "series": [{"data": [[1.60874317E12, 30.0], [1.608743172E12, 1.0], [1.608743235E12, 29.0], [1.608743237E12, 3.0], [1.608743228E12, 79.0], [1.608743238E12, 17.0], [1.608743229E12, 200.0], [1.608743175E12, 1.0], [1.608743239E12, 161.0], [1.608743166E12, 391.0], [1.60874323E12, 11.0], [1.608743167E12, 577.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743239E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

