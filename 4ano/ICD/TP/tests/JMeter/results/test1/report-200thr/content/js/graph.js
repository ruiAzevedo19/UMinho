/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 56.0, "minX": 0.0, "maxY": 79552.0, "series": [{"data": [[0.0, 56.0], [0.1, 56.0], [0.2, 56.0], [0.3, 56.0], [0.4, 56.0], [0.5, 56.0], [0.6, 56.0], [0.7, 56.0], [0.8, 56.0], [0.9, 56.0], [1.0, 56.0], [1.1, 56.0], [1.2, 56.0], [1.3, 56.0], [1.4, 56.0], [1.5, 57.0], [1.6, 57.0], [1.7, 57.0], [1.8, 57.0], [1.9, 57.0], [2.0, 58.0], [2.1, 58.0], [2.2, 58.0], [2.3, 58.0], [2.4, 58.0], [2.5, 58.0], [2.6, 58.0], [2.7, 58.0], [2.8, 58.0], [2.9, 58.0], [3.0, 58.0], [3.1, 58.0], [3.2, 58.0], [3.3, 58.0], [3.4, 58.0], [3.5, 58.0], [3.6, 58.0], [3.7, 58.0], [3.8, 58.0], [3.9, 58.0], [4.0, 58.0], [4.1, 58.0], [4.2, 58.0], [4.3, 58.0], [4.4, 58.0], [4.5, 59.0], [4.6, 59.0], [4.7, 59.0], [4.8, 59.0], [4.9, 59.0], [5.0, 59.0], [5.1, 59.0], [5.2, 59.0], [5.3, 59.0], [5.4, 59.0], [5.5, 59.0], [5.6, 59.0], [5.7, 59.0], [5.8, 59.0], [5.9, 59.0], [6.0, 62.0], [6.1, 62.0], [6.2, 62.0], [6.3, 62.0], [6.4, 62.0], [6.5, 75.0], [6.6, 75.0], [6.7, 75.0], [6.8, 75.0], [6.9, 75.0], [7.0, 75.0], [7.1, 75.0], [7.2, 75.0], [7.3, 75.0], [7.4, 75.0], [7.5, 76.0], [7.6, 76.0], [7.7, 76.0], [7.8, 76.0], [7.9, 76.0], [8.0, 76.0], [8.1, 76.0], [8.2, 76.0], [8.3, 76.0], [8.4, 76.0], [8.5, 76.0], [8.6, 76.0], [8.7, 76.0], [8.8, 76.0], [8.9, 76.0], [9.0, 76.0], [9.1, 76.0], [9.2, 76.0], [9.3, 76.0], [9.4, 76.0], [9.5, 76.0], [9.6, 76.0], [9.7, 76.0], [9.8, 76.0], [9.9, 76.0], [10.0, 77.0], [10.1, 77.0], [10.2, 77.0], [10.3, 77.0], [10.4, 77.0], [10.5, 77.0], [10.6, 77.0], [10.7, 77.0], [10.8, 77.0], [10.9, 77.0], [11.0, 77.0], [11.1, 77.0], [11.2, 77.0], [11.3, 77.0], [11.4, 77.0], [11.5, 77.0], [11.6, 77.0], [11.7, 77.0], [11.8, 77.0], [11.9, 77.0], [12.0, 77.0], [12.1, 77.0], [12.2, 77.0], [12.3, 77.0], [12.4, 77.0], [12.5, 77.0], [12.6, 77.0], [12.7, 77.0], [12.8, 77.0], [12.9, 77.0], [13.0, 78.0], [13.1, 78.0], [13.2, 78.0], [13.3, 78.0], [13.4, 78.0], [13.5, 92.0], [13.6, 92.0], [13.7, 92.0], [13.8, 92.0], [13.9, 92.0], [14.0, 93.0], [14.1, 93.0], [14.2, 93.0], [14.3, 93.0], [14.4, 93.0], [14.5, 93.0], [14.6, 93.0], [14.7, 93.0], [14.8, 93.0], [14.9, 93.0], [15.0, 95.0], [15.1, 95.0], [15.2, 95.0], [15.3, 95.0], [15.4, 95.0], [15.5, 96.0], [15.6, 96.0], [15.7, 96.0], [15.8, 96.0], [15.9, 96.0], [16.0, 96.0], [16.1, 96.0], [16.2, 96.0], [16.3, 96.0], [16.4, 96.0], [16.5, 96.0], [16.6, 96.0], [16.7, 96.0], [16.8, 96.0], [16.9, 96.0], [17.0, 97.0], [17.1, 97.0], [17.2, 97.0], [17.3, 97.0], [17.4, 97.0], [17.5, 97.0], [17.6, 97.0], [17.7, 97.0], [17.8, 97.0], [17.9, 97.0], [18.0, 97.0], [18.1, 97.0], [18.2, 97.0], [18.3, 97.0], [18.4, 97.0], [18.5, 97.0], [18.6, 97.0], [18.7, 97.0], [18.8, 97.0], [18.9, 97.0], [19.0, 97.0], [19.1, 97.0], [19.2, 97.0], [19.3, 97.0], [19.4, 97.0], [19.5, 97.0], [19.6, 97.0], [19.7, 97.0], [19.8, 97.0], [19.9, 97.0], [20.0, 97.0], [20.1, 97.0], [20.2, 97.0], [20.3, 97.0], [20.4, 97.0], [20.5, 97.0], [20.6, 97.0], [20.7, 97.0], [20.8, 97.0], [20.9, 97.0], [21.0, 97.0], [21.1, 97.0], [21.2, 97.0], [21.3, 97.0], [21.4, 97.0], [21.5, 98.0], [21.6, 98.0], [21.7, 98.0], [21.8, 98.0], [21.9, 98.0], [22.0, 98.0], [22.1, 98.0], [22.2, 98.0], [22.3, 98.0], [22.4, 98.0], [22.5, 99.0], [22.6, 99.0], [22.7, 99.0], [22.8, 99.0], [22.9, 99.0], [23.0, 99.0], [23.1, 99.0], [23.2, 99.0], [23.3, 99.0], [23.4, 99.0], [23.5, 99.0], [23.6, 99.0], [23.7, 99.0], [23.8, 99.0], [23.9, 99.0], [24.0, 99.0], [24.1, 99.0], [24.2, 99.0], [24.3, 99.0], [24.4, 99.0], [24.5, 99.0], [24.6, 99.0], [24.7, 99.0], [24.8, 99.0], [24.9, 99.0], [25.0, 99.0], [25.1, 99.0], [25.2, 99.0], [25.3, 99.0], [25.4, 99.0], [25.5, 99.0], [25.6, 99.0], [25.7, 99.0], [25.8, 99.0], [25.9, 99.0], [26.0, 99.0], [26.1, 99.0], [26.2, 99.0], [26.3, 99.0], [26.4, 99.0], [26.5, 100.0], [26.6, 100.0], [26.7, 100.0], [26.8, 100.0], [26.9, 100.0], [27.0, 100.0], [27.1, 100.0], [27.2, 100.0], [27.3, 100.0], [27.4, 100.0], [27.5, 100.0], [27.6, 100.0], [27.7, 100.0], [27.8, 100.0], [27.9, 100.0], [28.0, 100.0], [28.1, 100.0], [28.2, 100.0], [28.3, 100.0], [28.4, 100.0], [28.5, 100.0], [28.6, 100.0], [28.7, 100.0], [28.8, 100.0], [28.9, 100.0], [29.0, 101.0], [29.1, 101.0], [29.2, 101.0], [29.3, 101.0], [29.4, 101.0], [29.5, 101.0], [29.6, 101.0], [29.7, 101.0], [29.8, 101.0], [29.9, 101.0], [30.0, 101.0], [30.1, 101.0], [30.2, 101.0], [30.3, 101.0], [30.4, 101.0], [30.5, 101.0], [30.6, 101.0], [30.7, 101.0], [30.8, 101.0], [30.9, 101.0], [31.0, 101.0], [31.1, 101.0], [31.2, 101.0], [31.3, 101.0], [31.4, 101.0], [31.5, 102.0], [31.6, 102.0], [31.7, 102.0], [31.8, 102.0], [31.9, 102.0], [32.0, 102.0], [32.1, 102.0], [32.2, 102.0], [32.3, 102.0], [32.4, 102.0], [32.5, 102.0], [32.6, 102.0], [32.7, 102.0], [32.8, 102.0], [32.9, 102.0], [33.0, 102.0], [33.1, 102.0], [33.2, 102.0], [33.3, 102.0], [33.4, 102.0], [33.5, 102.0], [33.6, 102.0], [33.7, 102.0], [33.8, 102.0], [33.9, 102.0], [34.0, 102.0], [34.1, 102.0], [34.2, 102.0], [34.3, 102.0], [34.4, 102.0], [34.5, 102.0], [34.6, 102.0], [34.7, 102.0], [34.8, 102.0], [34.9, 102.0], [35.0, 102.0], [35.1, 102.0], [35.2, 102.0], [35.3, 102.0], [35.4, 102.0], [35.5, 103.0], [35.6, 103.0], [35.7, 103.0], [35.8, 103.0], [35.9, 103.0], [36.0, 104.0], [36.1, 104.0], [36.2, 104.0], [36.3, 104.0], [36.4, 104.0], [36.5, 104.0], [36.6, 104.0], [36.7, 104.0], [36.8, 104.0], [36.9, 104.0], [37.0, 104.0], [37.1, 104.0], [37.2, 104.0], [37.3, 104.0], [37.4, 104.0], [37.5, 105.0], [37.6, 105.0], [37.7, 105.0], [37.8, 105.0], [37.9, 105.0], [38.0, 105.0], [38.1, 105.0], [38.2, 105.0], [38.3, 105.0], [38.4, 105.0], [38.5, 106.0], [38.6, 106.0], [38.7, 106.0], [38.8, 106.0], [38.9, 106.0], [39.0, 107.0], [39.1, 107.0], [39.2, 107.0], [39.3, 107.0], [39.4, 107.0], [39.5, 107.0], [39.6, 107.0], [39.7, 107.0], [39.8, 107.0], [39.9, 107.0], [40.0, 108.0], [40.1, 108.0], [40.2, 108.0], [40.3, 108.0], [40.4, 108.0], [40.5, 108.0], [40.6, 108.0], [40.7, 108.0], [40.8, 108.0], [40.9, 108.0], [41.0, 109.0], [41.1, 109.0], [41.2, 109.0], [41.3, 109.0], [41.4, 109.0], [41.5, 109.0], [41.6, 109.0], [41.7, 109.0], [41.8, 109.0], [41.9, 109.0], [42.0, 109.0], [42.1, 109.0], [42.2, 109.0], [42.3, 109.0], [42.4, 109.0], [42.5, 110.0], [42.6, 110.0], [42.7, 110.0], [42.8, 110.0], [42.9, 110.0], [43.0, 110.0], [43.1, 110.0], [43.2, 110.0], [43.3, 110.0], [43.4, 110.0], [43.5, 110.0], [43.6, 110.0], [43.7, 110.0], [43.8, 110.0], [43.9, 110.0], [44.0, 111.0], [44.1, 111.0], [44.2, 111.0], [44.3, 111.0], [44.4, 111.0], [44.5, 111.0], [44.6, 111.0], [44.7, 111.0], [44.8, 111.0], [44.9, 111.0], [45.0, 112.0], [45.1, 112.0], [45.2, 112.0], [45.3, 112.0], [45.4, 112.0], [45.5, 112.0], [45.6, 112.0], [45.7, 112.0], [45.8, 112.0], [45.9, 112.0], [46.0, 112.0], [46.1, 112.0], [46.2, 112.0], [46.3, 112.0], [46.4, 112.0], [46.5, 113.0], [46.6, 113.0], [46.7, 113.0], [46.8, 113.0], [46.9, 113.0], [47.0, 113.0], [47.1, 113.0], [47.2, 113.0], [47.3, 113.0], [47.4, 113.0], [47.5, 126.0], [47.6, 126.0], [47.7, 126.0], [47.8, 126.0], [47.9, 126.0], [48.0, 126.0], [48.1, 126.0], [48.2, 126.0], [48.3, 126.0], [48.4, 126.0], [48.5, 133.0], [48.6, 133.0], [48.7, 133.0], [48.8, 133.0], [48.9, 133.0], [49.0, 2168.0], [49.1, 2168.0], [49.2, 2168.0], [49.3, 2168.0], [49.4, 2168.0], [49.5, 2171.0], [49.6, 2171.0], [49.7, 2171.0], [49.8, 2171.0], [49.9, 2171.0], [50.0, 2968.0], [50.1, 2968.0], [50.2, 2968.0], [50.3, 2968.0], [50.4, 2968.0], [50.5, 2968.0], [50.6, 2968.0], [50.7, 2968.0], [50.8, 2968.0], [50.9, 2968.0], [51.0, 2969.0], [51.1, 2969.0], [51.2, 2969.0], [51.3, 2969.0], [51.4, 2969.0], [51.5, 2970.0], [51.6, 2970.0], [51.7, 2970.0], [51.8, 2970.0], [51.9, 2970.0], [52.0, 2970.0], [52.1, 2970.0], [52.2, 2970.0], [52.3, 2970.0], [52.4, 2970.0], [52.5, 2970.0], [52.6, 2970.0], [52.7, 2970.0], [52.8, 2970.0], [52.9, 2970.0], [53.0, 2970.0], [53.1, 2970.0], [53.2, 2970.0], [53.3, 2970.0], [53.4, 2970.0], [53.5, 2970.0], [53.6, 2970.0], [53.7, 2970.0], [53.8, 2970.0], [53.9, 2970.0], [54.0, 3061.0], [54.1, 3061.0], [54.2, 3061.0], [54.3, 3061.0], [54.4, 3061.0], [54.5, 3061.0], [54.6, 3061.0], [54.7, 3061.0], [54.8, 3061.0], [54.9, 3061.0], [55.0, 3061.0], [55.1, 3061.0], [55.2, 3061.0], [55.3, 3061.0], [55.4, 3061.0], [55.5, 3062.0], [55.6, 3062.0], [55.7, 3062.0], [55.8, 3062.0], [55.9, 3062.0], [56.0, 3062.0], [56.1, 3062.0], [56.2, 3062.0], [56.3, 3062.0], [56.4, 3062.0], [56.5, 3062.0], [56.6, 3062.0], [56.7, 3062.0], [56.8, 3062.0], [56.9, 3062.0], [57.0, 3062.0], [57.1, 3062.0], [57.2, 3062.0], [57.3, 3062.0], [57.4, 3062.0], [57.5, 3068.0], [57.6, 3068.0], [57.7, 3068.0], [57.8, 3068.0], [57.9, 3068.0], [58.0, 3068.0], [58.1, 3068.0], [58.2, 3068.0], [58.3, 3068.0], [58.4, 3068.0], [58.5, 3069.0], [58.6, 3069.0], [58.7, 3069.0], [58.8, 3069.0], [58.9, 3069.0], [59.0, 3070.0], [59.1, 3070.0], [59.2, 3070.0], [59.3, 3070.0], [59.4, 3070.0], [59.5, 3070.0], [59.6, 3070.0], [59.7, 3070.0], [59.8, 3070.0], [59.9, 3070.0], [60.0, 3070.0], [60.1, 3070.0], [60.2, 3070.0], [60.3, 3070.0], [60.4, 3070.0], [60.5, 3070.0], [60.6, 3070.0], [60.7, 3070.0], [60.8, 3070.0], [60.9, 3070.0], [61.0, 3070.0], [61.1, 3070.0], [61.2, 3070.0], [61.3, 3070.0], [61.4, 3070.0], [61.5, 3070.0], [61.6, 3070.0], [61.7, 3070.0], [61.8, 3070.0], [61.9, 3070.0], [62.0, 3071.0], [62.1, 3071.0], [62.2, 3071.0], [62.3, 3071.0], [62.4, 3071.0], [62.5, 3071.0], [62.6, 3071.0], [62.7, 3071.0], [62.8, 3071.0], [62.9, 3071.0], [63.0, 3072.0], [63.1, 3072.0], [63.2, 3072.0], [63.3, 3072.0], [63.4, 3072.0], [63.5, 3072.0], [63.6, 3072.0], [63.7, 3072.0], [63.8, 3072.0], [63.9, 3072.0], [64.0, 3072.0], [64.1, 3072.0], [64.2, 3072.0], [64.3, 3072.0], [64.4, 3072.0], [64.5, 3072.0], [64.6, 3072.0], [64.7, 3072.0], [64.8, 3072.0], [64.9, 3072.0], [65.0, 3072.0], [65.1, 3072.0], [65.2, 3072.0], [65.3, 3072.0], [65.4, 3072.0], [65.5, 3073.0], [65.6, 3073.0], [65.7, 3073.0], [65.8, 3073.0], [65.9, 3073.0], [66.0, 3073.0], [66.1, 3073.0], [66.2, 3073.0], [66.3, 3073.0], [66.4, 3073.0], [66.5, 3073.0], [66.6, 3073.0], [66.7, 3073.0], [66.8, 3073.0], [66.9, 3073.0], [67.0, 3073.0], [67.1, 3073.0], [67.2, 3073.0], [67.3, 3073.0], [67.4, 3073.0], [67.5, 3073.0], [67.6, 3073.0], [67.7, 3073.0], [67.8, 3073.0], [67.9, 3073.0], [68.0, 3073.0], [68.1, 3073.0], [68.2, 3073.0], [68.3, 3073.0], [68.4, 3073.0], [68.5, 3074.0], [68.6, 3074.0], [68.7, 3074.0], [68.8, 3074.0], [68.9, 3074.0], [69.0, 3074.0], [69.1, 3074.0], [69.2, 3074.0], [69.3, 3074.0], [69.4, 3074.0], [69.5, 3074.0], [69.6, 3074.0], [69.7, 3074.0], [69.8, 3074.0], [69.9, 3074.0], [70.0, 3075.0], [70.1, 3075.0], [70.2, 3075.0], [70.3, 3075.0], [70.4, 3075.0], [70.5, 3075.0], [70.6, 3075.0], [70.7, 3075.0], [70.8, 3075.0], [70.9, 3075.0], [71.0, 3075.0], [71.1, 3075.0], [71.2, 3075.0], [71.3, 3075.0], [71.4, 3075.0], [71.5, 3075.0], [71.6, 3075.0], [71.7, 3075.0], [71.8, 3075.0], [71.9, 3075.0], [72.0, 3075.0], [72.1, 3075.0], [72.2, 3075.0], [72.3, 3075.0], [72.4, 3075.0], [72.5, 3076.0], [72.6, 3076.0], [72.7, 3076.0], [72.8, 3076.0], [72.9, 3076.0], [73.0, 3076.0], [73.1, 3076.0], [73.2, 3076.0], [73.3, 3076.0], [73.4, 3076.0], [73.5, 3076.0], [73.6, 3076.0], [73.7, 3076.0], [73.8, 3076.0], [73.9, 3076.0], [74.0, 3076.0], [74.1, 3076.0], [74.2, 3076.0], [74.3, 3076.0], [74.4, 3076.0], [74.5, 3077.0], [74.6, 3077.0], [74.7, 3077.0], [74.8, 3077.0], [74.9, 3077.0], [75.0, 3077.0], [75.1, 3077.0], [75.2, 3077.0], [75.3, 3077.0], [75.4, 3077.0], [75.5, 3077.0], [75.6, 3077.0], [75.7, 3077.0], [75.8, 3077.0], [75.9, 3077.0], [76.0, 3077.0], [76.1, 3077.0], [76.2, 3077.0], [76.3, 3077.0], [76.4, 3077.0], [76.5, 3077.0], [76.6, 3077.0], [76.7, 3077.0], [76.8, 3077.0], [76.9, 3077.0], [77.0, 3078.0], [77.1, 3078.0], [77.2, 3078.0], [77.3, 3078.0], [77.4, 3078.0], [77.5, 3078.0], [77.6, 3078.0], [77.7, 3078.0], [77.8, 3078.0], [77.9, 3078.0], [78.0, 3078.0], [78.1, 3078.0], [78.2, 3078.0], [78.3, 3078.0], [78.4, 3078.0], [78.5, 3078.0], [78.6, 3078.0], [78.7, 3078.0], [78.8, 3078.0], [78.9, 3078.0], [79.0, 3078.0], [79.1, 3078.0], [79.2, 3078.0], [79.3, 3078.0], [79.4, 3078.0], [79.5, 3078.0], [79.6, 3078.0], [79.7, 3078.0], [79.8, 3078.0], [79.9, 3078.0], [80.0, 3078.0], [80.1, 3078.0], [80.2, 3078.0], [80.3, 3078.0], [80.4, 3078.0], [80.5, 3078.0], [80.6, 3078.0], [80.7, 3078.0], [80.8, 3078.0], [80.9, 3078.0], [81.0, 3079.0], [81.1, 3079.0], [81.2, 3079.0], [81.3, 3079.0], [81.4, 3079.0], [81.5, 3079.0], [81.6, 3079.0], [81.7, 3079.0], [81.8, 3079.0], [81.9, 3079.0], [82.0, 3080.0], [82.1, 3080.0], [82.2, 3080.0], [82.3, 3080.0], [82.4, 3080.0], [82.5, 3080.0], [82.6, 3080.0], [82.7, 3080.0], [82.8, 3080.0], [82.9, 3080.0], [83.0, 3080.0], [83.1, 3080.0], [83.2, 3080.0], [83.3, 3080.0], [83.4, 3080.0], [83.5, 3081.0], [83.6, 3081.0], [83.7, 3081.0], [83.8, 3081.0], [83.9, 3081.0], [84.0, 3083.0], [84.1, 3083.0], [84.2, 3083.0], [84.3, 3083.0], [84.4, 3083.0], [84.5, 3084.0], [84.6, 3084.0], [84.7, 3084.0], [84.8, 3084.0], [84.9, 3084.0], [85.0, 3087.0], [85.1, 3087.0], [85.2, 3087.0], [85.3, 3087.0], [85.4, 3087.0], [85.5, 3087.0], [85.6, 3087.0], [85.7, 3087.0], [85.8, 3087.0], [85.9, 3087.0], [86.0, 3089.0], [86.1, 3089.0], [86.2, 3089.0], [86.3, 3089.0], [86.4, 3089.0], [86.5, 3090.0], [86.6, 3090.0], [86.7, 3090.0], [86.8, 3090.0], [86.9, 3090.0], [87.0, 3123.0], [87.1, 3123.0], [87.2, 3123.0], [87.3, 3123.0], [87.4, 3123.0], [87.5, 3123.0], [87.6, 3123.0], [87.7, 3123.0], [87.8, 3123.0], [87.9, 3123.0], [88.0, 3123.0], [88.1, 3123.0], [88.2, 3123.0], [88.3, 3123.0], [88.4, 3123.0], [88.5, 3125.0], [88.6, 3125.0], [88.7, 3125.0], [88.8, 3125.0], [88.9, 3125.0], [89.0, 3132.0], [89.1, 3132.0], [89.2, 3132.0], [89.3, 3132.0], [89.4, 3132.0], [89.5, 3141.0], [89.6, 3141.0], [89.7, 3141.0], [89.8, 3141.0], [89.9, 3141.0], [90.0, 3142.0], [90.1, 3142.0], [90.2, 3142.0], [90.3, 3142.0], [90.4, 3142.0], [90.5, 3990.0], [90.6, 3990.0], [90.7, 3990.0], [90.8, 3990.0], [90.9, 3990.0], [91.0, 3990.0], [91.1, 3990.0], [91.2, 3990.0], [91.3, 3990.0], [91.4, 3990.0], [91.5, 3991.0], [91.6, 3991.0], [91.7, 3991.0], [91.8, 3991.0], [91.9, 3991.0], [92.0, 3991.0], [92.1, 3991.0], [92.2, 3991.0], [92.3, 3991.0], [92.4, 3991.0], [92.5, 3991.0], [92.6, 3991.0], [92.7, 3991.0], [92.8, 3991.0], [92.9, 3991.0], [93.0, 3991.0], [93.1, 3991.0], [93.2, 3991.0], [93.3, 3991.0], [93.4, 3991.0], [93.5, 4064.0], [93.6, 4064.0], [93.7, 4064.0], [93.8, 4064.0], [93.9, 4064.0], [94.0, 4065.0], [94.1, 4065.0], [94.2, 4065.0], [94.3, 4065.0], [94.4, 4065.0], [94.5, 4065.0], [94.6, 4065.0], [94.7, 4065.0], [94.8, 4065.0], [94.9, 4065.0], [95.0, 4065.0], [95.1, 4065.0], [95.2, 4065.0], [95.3, 4065.0], [95.4, 4065.0], [95.5, 4065.0], [95.6, 4065.0], [95.7, 4065.0], [95.8, 4065.0], [95.9, 4065.0], [96.0, 4065.0], [96.1, 4065.0], [96.2, 4065.0], [96.3, 4065.0], [96.4, 4065.0], [96.5, 4087.0], [96.6, 4087.0], [96.7, 4087.0], [96.8, 4087.0], [96.9, 4087.0], [97.0, 4088.0], [97.1, 4088.0], [97.2, 4088.0], [97.3, 4088.0], [97.4, 4088.0], [97.5, 4089.0], [97.6, 4089.0], [97.7, 4089.0], [97.8, 4089.0], [97.9, 4089.0], [98.0, 4089.0], [98.1, 4089.0], [98.2, 4089.0], [98.3, 4089.0], [98.4, 4089.0], [98.5, 4091.0], [98.6, 4091.0], [98.7, 4091.0], [98.8, 4091.0], [98.9, 4091.0], [99.0, 4091.0], [99.1, 4091.0], [99.2, 4091.0], [99.3, 4091.0], [99.4, 4091.0], [99.5, 4092.0], [99.6, 4092.0], [99.7, 4092.0], [99.8, 4092.0], [99.9, 4092.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[0.0, 39321.0], [0.1, 39321.0], [0.2, 39321.0], [0.3, 39321.0], [0.4, 39321.0], [0.5, 39324.0], [0.6, 39324.0], [0.7, 39324.0], [0.8, 39324.0], [0.9, 39324.0], [1.0, 39324.0], [1.1, 39324.0], [1.2, 39324.0], [1.3, 39324.0], [1.4, 39324.0], [1.5, 40081.0], [1.6, 40081.0], [1.7, 40081.0], [1.8, 40081.0], [1.9, 40081.0], [2.0, 40081.0], [2.1, 40081.0], [2.2, 40081.0], [2.3, 40081.0], [2.4, 40081.0], [2.5, 40082.0], [2.6, 40082.0], [2.7, 40082.0], [2.8, 40082.0], [2.9, 40082.0], [3.0, 40085.0], [3.1, 40085.0], [3.2, 40085.0], [3.3, 40085.0], [3.4, 40085.0], [3.5, 40085.0], [3.6, 40085.0], [3.7, 40085.0], [3.8, 40085.0], [3.9, 40085.0], [4.0, 40086.0], [4.1, 40086.0], [4.2, 40086.0], [4.3, 40086.0], [4.4, 40086.0], [4.5, 40088.0], [4.6, 40088.0], [4.7, 40088.0], [4.8, 40088.0], [4.9, 40088.0], [5.0, 47249.0], [5.1, 47249.0], [5.2, 47249.0], [5.3, 47249.0], [5.4, 47249.0], [5.5, 47250.0], [5.6, 47250.0], [5.7, 47250.0], [5.8, 47250.0], [5.9, 47250.0], [6.0, 47253.0], [6.1, 47253.0], [6.2, 47253.0], [6.3, 47253.0], [6.4, 47253.0], [6.5, 47952.0], [6.6, 47952.0], [6.7, 47952.0], [6.8, 47952.0], [6.9, 47952.0], [7.0, 47953.0], [7.1, 47953.0], [7.2, 47953.0], [7.3, 47953.0], [7.4, 47953.0], [7.5, 47953.0], [7.6, 47953.0], [7.7, 47953.0], [7.8, 47953.0], [7.9, 47953.0], [8.0, 47954.0], [8.1, 47954.0], [8.2, 47954.0], [8.3, 47954.0], [8.4, 47954.0], [8.5, 47954.0], [8.6, 47954.0], [8.7, 47954.0], [8.8, 47954.0], [8.9, 47954.0], [9.0, 47954.0], [9.1, 47954.0], [9.2, 47954.0], [9.3, 47954.0], [9.4, 47954.0], [9.5, 47956.0], [9.6, 47956.0], [9.7, 47956.0], [9.8, 47956.0], [9.9, 47956.0], [10.0, 52354.0], [10.1, 52354.0], [10.2, 52354.0], [10.3, 52354.0], [10.4, 52354.0], [10.5, 52355.0], [10.6, 52355.0], [10.7, 52355.0], [10.8, 52355.0], [10.9, 52355.0], [11.0, 52356.0], [11.1, 52356.0], [11.2, 52356.0], [11.3, 52356.0], [11.4, 52356.0], [11.5, 52357.0], [11.6, 52357.0], [11.7, 52357.0], [11.8, 52357.0], [11.9, 52357.0], [12.0, 53555.0], [12.1, 53555.0], [12.2, 53555.0], [12.3, 53555.0], [12.4, 53555.0], [12.5, 53579.0], [12.6, 53579.0], [12.7, 53579.0], [12.8, 53579.0], [12.9, 53579.0], [13.0, 53580.0], [13.1, 53580.0], [13.2, 53580.0], [13.3, 53580.0], [13.4, 53580.0], [13.5, 54271.0], [13.6, 54271.0], [13.7, 54271.0], [13.8, 54271.0], [13.9, 54271.0], [14.0, 54271.0], [14.1, 54271.0], [14.2, 54271.0], [14.3, 54271.0], [14.4, 54271.0], [14.5, 54298.0], [14.6, 54298.0], [14.7, 54298.0], [14.8, 54298.0], [14.9, 54298.0], [15.0, 67431.0], [15.1, 67431.0], [15.2, 67431.0], [15.3, 67431.0], [15.4, 67431.0], [15.5, 67442.0], [15.6, 67442.0], [15.7, 67442.0], [15.8, 67442.0], [15.9, 67442.0], [16.0, 67443.0], [16.1, 67443.0], [16.2, 67443.0], [16.3, 67443.0], [16.4, 67443.0], [16.5, 67449.0], [16.6, 67449.0], [16.7, 67449.0], [16.8, 67449.0], [16.9, 67449.0], [17.0, 67449.0], [17.1, 67449.0], [17.2, 67449.0], [17.3, 67449.0], [17.4, 67449.0], [17.5, 67450.0], [17.6, 67450.0], [17.7, 67450.0], [17.8, 67450.0], [17.9, 67450.0], [18.0, 67450.0], [18.1, 67450.0], [18.2, 67450.0], [18.3, 67450.0], [18.4, 67450.0], [18.5, 67451.0], [18.6, 67451.0], [18.7, 67451.0], [18.8, 67451.0], [18.9, 67451.0], [19.0, 67457.0], [19.1, 67457.0], [19.2, 67457.0], [19.3, 67457.0], [19.4, 67457.0], [19.5, 67459.0], [19.6, 67459.0], [19.7, 67459.0], [19.8, 67459.0], [19.9, 67459.0], [20.0, 67459.0], [20.1, 67459.0], [20.2, 67459.0], [20.3, 67459.0], [20.4, 67459.0], [20.5, 67460.0], [20.6, 67460.0], [20.7, 67460.0], [20.8, 67460.0], [20.9, 67460.0], [21.0, 67460.0], [21.1, 67460.0], [21.2, 67460.0], [21.3, 67460.0], [21.4, 67460.0], [21.5, 67460.0], [21.6, 67460.0], [21.7, 67460.0], [21.8, 67460.0], [21.9, 67460.0], [22.0, 67462.0], [22.1, 67462.0], [22.2, 67462.0], [22.3, 67462.0], [22.4, 67462.0], [22.5, 67463.0], [22.6, 67463.0], [22.7, 67463.0], [22.8, 67463.0], [22.9, 67463.0], [23.0, 67464.0], [23.1, 67464.0], [23.2, 67464.0], [23.3, 67464.0], [23.4, 67464.0], [23.5, 67465.0], [23.6, 67465.0], [23.7, 67465.0], [23.8, 67465.0], [23.9, 67465.0], [24.0, 67473.0], [24.1, 67473.0], [24.2, 67473.0], [24.3, 67473.0], [24.4, 67473.0], [24.5, 67474.0], [24.6, 67474.0], [24.7, 67474.0], [24.8, 67474.0], [24.9, 67474.0], [25.0, 67474.0], [25.1, 67474.0], [25.2, 67474.0], [25.3, 67474.0], [25.4, 67474.0], [25.5, 67475.0], [25.6, 67475.0], [25.7, 67475.0], [25.8, 67475.0], [25.9, 67475.0], [26.0, 67475.0], [26.1, 67475.0], [26.2, 67475.0], [26.3, 67475.0], [26.4, 67475.0], [26.5, 67476.0], [26.6, 67476.0], [26.7, 67476.0], [26.8, 67476.0], [26.9, 67476.0], [27.0, 67477.0], [27.1, 67477.0], [27.2, 67477.0], [27.3, 67477.0], [27.4, 67477.0], [27.5, 67477.0], [27.6, 67477.0], [27.7, 67477.0], [27.8, 67477.0], [27.9, 67477.0], [28.0, 67477.0], [28.1, 67477.0], [28.2, 67477.0], [28.3, 67477.0], [28.4, 67477.0], [28.5, 67478.0], [28.6, 67478.0], [28.7, 67478.0], [28.8, 67478.0], [28.9, 67478.0], [29.0, 67487.0], [29.1, 67487.0], [29.2, 67487.0], [29.3, 67487.0], [29.4, 67487.0], [29.5, 67488.0], [29.6, 67488.0], [29.7, 67488.0], [29.8, 67488.0], [29.9, 67488.0], [30.0, 67489.0], [30.1, 67489.0], [30.2, 67489.0], [30.3, 67489.0], [30.4, 67489.0], [30.5, 67491.0], [30.6, 67491.0], [30.7, 67491.0], [30.8, 67491.0], [30.9, 67491.0], [31.0, 67491.0], [31.1, 67491.0], [31.2, 67491.0], [31.3, 67491.0], [31.4, 67491.0], [31.5, 67491.0], [31.6, 67491.0], [31.7, 67491.0], [31.8, 67491.0], [31.9, 67491.0], [32.0, 67495.0], [32.1, 67495.0], [32.2, 67495.0], [32.3, 67495.0], [32.4, 67495.0], [32.5, 67495.0], [32.6, 67495.0], [32.7, 67495.0], [32.8, 67495.0], [32.9, 67495.0], [33.0, 67495.0], [33.1, 67495.0], [33.2, 67495.0], [33.3, 67495.0], [33.4, 67495.0], [33.5, 67498.0], [33.6, 67498.0], [33.7, 67498.0], [33.8, 67498.0], [33.9, 67498.0], [34.0, 67508.0], [34.1, 67508.0], [34.2, 67508.0], [34.3, 67508.0], [34.4, 67508.0], [34.5, 67508.0], [34.6, 67508.0], [34.7, 67508.0], [34.8, 67508.0], [34.9, 67508.0], [35.0, 67509.0], [35.1, 67509.0], [35.2, 67509.0], [35.3, 67509.0], [35.4, 67509.0], [35.5, 67510.0], [35.6, 67510.0], [35.7, 67510.0], [35.8, 67510.0], [35.9, 67510.0], [36.0, 67517.0], [36.1, 67517.0], [36.2, 67517.0], [36.3, 67517.0], [36.4, 67517.0], [36.5, 67517.0], [36.6, 67517.0], [36.7, 67517.0], [36.8, 67517.0], [36.9, 67517.0], [37.0, 67518.0], [37.1, 67518.0], [37.2, 67518.0], [37.3, 67518.0], [37.4, 67518.0], [37.5, 67518.0], [37.6, 67518.0], [37.7, 67518.0], [37.8, 67518.0], [37.9, 67518.0], [38.0, 67518.0], [38.1, 67518.0], [38.2, 67518.0], [38.3, 67518.0], [38.4, 67518.0], [38.5, 67520.0], [38.6, 67520.0], [38.7, 67520.0], [38.8, 67520.0], [38.9, 67520.0], [39.0, 67536.0], [39.1, 67536.0], [39.2, 67536.0], [39.3, 67536.0], [39.4, 67536.0], [39.5, 67536.0], [39.6, 67536.0], [39.7, 67536.0], [39.8, 67536.0], [39.9, 67536.0], [40.0, 67536.0], [40.1, 67536.0], [40.2, 67536.0], [40.3, 67536.0], [40.4, 67536.0], [40.5, 67536.0], [40.6, 67536.0], [40.7, 67536.0], [40.8, 67536.0], [40.9, 67536.0], [41.0, 67537.0], [41.1, 67537.0], [41.2, 67537.0], [41.3, 67537.0], [41.4, 67537.0], [41.5, 67537.0], [41.6, 67537.0], [41.7, 67537.0], [41.8, 67537.0], [41.9, 67537.0], [42.0, 67537.0], [42.1, 67537.0], [42.2, 67537.0], [42.3, 67537.0], [42.4, 67537.0], [42.5, 67537.0], [42.6, 67537.0], [42.7, 67537.0], [42.8, 67537.0], [42.9, 67537.0], [43.0, 67538.0], [43.1, 67538.0], [43.2, 67538.0], [43.3, 67538.0], [43.4, 67538.0], [43.5, 67538.0], [43.6, 67538.0], [43.7, 67538.0], [43.8, 67538.0], [43.9, 67538.0], [44.0, 67539.0], [44.1, 67539.0], [44.2, 67539.0], [44.3, 67539.0], [44.4, 67539.0], [44.5, 68378.0], [44.6, 68378.0], [44.7, 68378.0], [44.8, 68378.0], [44.9, 68378.0], [45.0, 68380.0], [45.1, 68380.0], [45.2, 68380.0], [45.3, 68380.0], [45.4, 68380.0], [45.5, 68381.0], [45.6, 68381.0], [45.7, 68381.0], [45.8, 68381.0], [45.9, 68381.0], [46.0, 68382.0], [46.1, 68382.0], [46.2, 68382.0], [46.3, 68382.0], [46.4, 68382.0], [46.5, 68386.0], [46.6, 68386.0], [46.7, 68386.0], [46.8, 68386.0], [46.9, 68386.0], [47.0, 68387.0], [47.1, 68387.0], [47.2, 68387.0], [47.3, 68387.0], [47.4, 68387.0], [47.5, 69356.0], [47.6, 69356.0], [47.7, 69356.0], [47.8, 69356.0], [47.9, 69356.0], [48.0, 69368.0], [48.1, 69368.0], [48.2, 69368.0], [48.3, 69368.0], [48.4, 69368.0], [48.5, 69368.0], [48.6, 69368.0], [48.7, 69368.0], [48.8, 69368.0], [48.9, 69368.0], [49.0, 69369.0], [49.1, 69369.0], [49.2, 69369.0], [49.3, 69369.0], [49.4, 69369.0], [49.5, 69369.0], [49.6, 69369.0], [49.7, 69369.0], [49.8, 69369.0], [49.9, 69369.0], [50.0, 69370.0], [50.1, 69370.0], [50.2, 69370.0], [50.3, 69370.0], [50.4, 69370.0], [50.5, 69378.0], [50.6, 69378.0], [50.7, 69378.0], [50.8, 69378.0], [50.9, 69378.0], [51.0, 71387.0], [51.1, 71387.0], [51.2, 71387.0], [51.3, 71387.0], [51.4, 71387.0], [51.5, 71389.0], [51.6, 71389.0], [51.7, 71389.0], [51.8, 71389.0], [51.9, 71389.0], [52.0, 71389.0], [52.1, 71389.0], [52.2, 71389.0], [52.3, 71389.0], [52.4, 71389.0], [52.5, 71389.0], [52.6, 71389.0], [52.7, 71389.0], [52.8, 71389.0], [52.9, 71389.0], [53.0, 71390.0], [53.1, 71390.0], [53.2, 71390.0], [53.3, 71390.0], [53.4, 71390.0], [53.5, 71392.0], [53.6, 71392.0], [53.7, 71392.0], [53.8, 71392.0], [53.9, 71392.0], [54.0, 71395.0], [54.1, 71395.0], [54.2, 71395.0], [54.3, 71395.0], [54.4, 71395.0], [54.5, 72418.0], [54.6, 72418.0], [54.7, 72418.0], [54.8, 72418.0], [54.9, 72418.0], [55.0, 73431.0], [55.1, 73431.0], [55.2, 73431.0], [55.3, 73431.0], [55.4, 73431.0], [55.5, 73431.0], [55.6, 73431.0], [55.7, 73431.0], [55.8, 73431.0], [55.9, 73431.0], [56.0, 73431.0], [56.1, 73431.0], [56.2, 73431.0], [56.3, 73431.0], [56.4, 73431.0], [56.5, 73432.0], [56.6, 73432.0], [56.7, 73432.0], [56.8, 73432.0], [56.9, 73432.0], [57.0, 73442.0], [57.1, 73442.0], [57.2, 73442.0], [57.3, 73442.0], [57.4, 73442.0], [57.5, 75443.0], [57.6, 75443.0], [57.7, 75443.0], [57.8, 75443.0], [57.9, 75443.0], [58.0, 75443.0], [58.1, 75443.0], [58.2, 75443.0], [58.3, 75443.0], [58.4, 75443.0], [58.5, 75465.0], [58.6, 75465.0], [58.7, 75465.0], [58.8, 75465.0], [58.9, 75465.0], [59.0, 75465.0], [59.1, 75465.0], [59.2, 75465.0], [59.3, 75465.0], [59.4, 75465.0], [59.5, 75465.0], [59.6, 75465.0], [59.7, 75465.0], [59.8, 75465.0], [59.9, 75465.0], [60.0, 75466.0], [60.1, 75466.0], [60.2, 75466.0], [60.3, 75466.0], [60.4, 75466.0], [60.5, 75466.0], [60.6, 75466.0], [60.7, 75466.0], [60.8, 75466.0], [60.9, 75466.0], [61.0, 75467.0], [61.1, 75467.0], [61.2, 75467.0], [61.3, 75467.0], [61.4, 75467.0], [61.5, 76350.0], [61.6, 76350.0], [61.7, 76350.0], [61.8, 76350.0], [61.9, 76350.0], [62.0, 76353.0], [62.1, 76353.0], [62.2, 76353.0], [62.3, 76353.0], [62.4, 76353.0], [62.5, 76361.0], [62.6, 76361.0], [62.7, 76361.0], [62.8, 76361.0], [62.9, 76361.0], [63.0, 76364.0], [63.1, 76364.0], [63.2, 76364.0], [63.3, 76364.0], [63.4, 76364.0], [63.5, 76364.0], [63.6, 76364.0], [63.7, 76364.0], [63.8, 76364.0], [63.9, 76364.0], [64.0, 76365.0], [64.1, 76365.0], [64.2, 76365.0], [64.3, 76365.0], [64.4, 76365.0], [64.5, 76365.0], [64.6, 76365.0], [64.7, 76365.0], [64.8, 76365.0], [64.9, 76365.0], [65.0, 77363.0], [65.1, 77363.0], [65.2, 77363.0], [65.3, 77363.0], [65.4, 77363.0], [65.5, 77376.0], [65.6, 77376.0], [65.7, 77376.0], [65.8, 77376.0], [65.9, 77376.0], [66.0, 78531.0], [66.1, 78531.0], [66.2, 78531.0], [66.3, 78531.0], [66.4, 78531.0], [66.5, 78532.0], [66.6, 78532.0], [66.7, 78532.0], [66.8, 78532.0], [66.9, 78532.0], [67.0, 79354.0], [67.1, 79354.0], [67.2, 79354.0], [67.3, 79354.0], [67.4, 79354.0], [67.5, 79354.0], [67.6, 79354.0], [67.7, 79354.0], [67.8, 79354.0], [67.9, 79354.0], [68.0, 79354.0], [68.1, 79354.0], [68.2, 79354.0], [68.3, 79354.0], [68.4, 79354.0], [68.5, 79356.0], [68.6, 79356.0], [68.7, 79356.0], [68.8, 79356.0], [68.9, 79356.0], [69.0, 79357.0], [69.1, 79357.0], [69.2, 79357.0], [69.3, 79357.0], [69.4, 79357.0], [69.5, 79357.0], [69.6, 79357.0], [69.7, 79357.0], [69.8, 79357.0], [69.9, 79357.0], [70.0, 79357.0], [70.1, 79357.0], [70.2, 79357.0], [70.3, 79357.0], [70.4, 79357.0], [70.5, 79444.0], [70.6, 79444.0], [70.7, 79444.0], [70.8, 79444.0], [70.9, 79444.0], [71.0, 79470.0], [71.1, 79470.0], [71.2, 79470.0], [71.3, 79470.0], [71.4, 79470.0], [71.5, 79471.0], [71.6, 79471.0], [71.7, 79471.0], [71.8, 79471.0], [71.9, 79471.0], [72.0, 79476.0], [72.1, 79476.0], [72.2, 79476.0], [72.3, 79476.0], [72.4, 79476.0], [72.5, 79478.0], [72.6, 79478.0], [72.7, 79478.0], [72.8, 79478.0], [72.9, 79478.0], [73.0, 79478.0], [73.1, 79478.0], [73.2, 79478.0], [73.3, 79478.0], [73.4, 79478.0], [73.5, 79480.0], [73.6, 79480.0], [73.7, 79480.0], [73.8, 79480.0], [73.9, 79480.0], [74.0, 79490.0], [74.1, 79490.0], [74.2, 79490.0], [74.3, 79490.0], [74.4, 79490.0], [74.5, 79492.0], [74.6, 79492.0], [74.7, 79492.0], [74.8, 79492.0], [74.9, 79492.0], [75.0, 79492.0], [75.1, 79492.0], [75.2, 79492.0], [75.3, 79492.0], [75.4, 79492.0], [75.5, 79493.0], [75.6, 79493.0], [75.7, 79493.0], [75.8, 79493.0], [75.9, 79493.0], [76.0, 79493.0], [76.1, 79493.0], [76.2, 79493.0], [76.3, 79493.0], [76.4, 79493.0], [76.5, 79494.0], [76.6, 79494.0], [76.7, 79494.0], [76.8, 79494.0], [76.9, 79494.0], [77.0, 79494.0], [77.1, 79494.0], [77.2, 79494.0], [77.3, 79494.0], [77.4, 79494.0], [77.5, 79495.0], [77.6, 79495.0], [77.7, 79495.0], [77.8, 79495.0], [77.9, 79495.0], [78.0, 79496.0], [78.1, 79496.0], [78.2, 79496.0], [78.3, 79496.0], [78.4, 79496.0], [78.5, 79496.0], [78.6, 79496.0], [78.7, 79496.0], [78.8, 79496.0], [78.9, 79496.0], [79.0, 79497.0], [79.1, 79497.0], [79.2, 79497.0], [79.3, 79497.0], [79.4, 79497.0], [79.5, 79498.0], [79.6, 79498.0], [79.7, 79498.0], [79.8, 79498.0], [79.9, 79498.0], [80.0, 79498.0], [80.1, 79498.0], [80.2, 79498.0], [80.3, 79498.0], [80.4, 79498.0], [80.5, 79500.0], [80.6, 79500.0], [80.7, 79500.0], [80.8, 79500.0], [80.9, 79500.0], [81.0, 79511.0], [81.1, 79511.0], [81.2, 79511.0], [81.3, 79511.0], [81.4, 79511.0], [81.5, 79512.0], [81.6, 79512.0], [81.7, 79512.0], [81.8, 79512.0], [81.9, 79512.0], [82.0, 79513.0], [82.1, 79513.0], [82.2, 79513.0], [82.3, 79513.0], [82.4, 79513.0], [82.5, 79514.0], [82.6, 79514.0], [82.7, 79514.0], [82.8, 79514.0], [82.9, 79514.0], [83.0, 79514.0], [83.1, 79514.0], [83.2, 79514.0], [83.3, 79514.0], [83.4, 79514.0], [83.5, 79515.0], [83.6, 79515.0], [83.7, 79515.0], [83.8, 79515.0], [83.9, 79515.0], [84.0, 79515.0], [84.1, 79515.0], [84.2, 79515.0], [84.3, 79515.0], [84.4, 79515.0], [84.5, 79516.0], [84.6, 79516.0], [84.7, 79516.0], [84.8, 79516.0], [84.9, 79516.0], [85.0, 79516.0], [85.1, 79516.0], [85.2, 79516.0], [85.3, 79516.0], [85.4, 79516.0], [85.5, 79516.0], [85.6, 79516.0], [85.7, 79516.0], [85.8, 79516.0], [85.9, 79516.0], [86.0, 79517.0], [86.1, 79517.0], [86.2, 79517.0], [86.3, 79517.0], [86.4, 79517.0], [86.5, 79517.0], [86.6, 79517.0], [86.7, 79517.0], [86.8, 79517.0], [86.9, 79517.0], [87.0, 79517.0], [87.1, 79517.0], [87.2, 79517.0], [87.3, 79517.0], [87.4, 79517.0], [87.5, 79518.0], [87.6, 79518.0], [87.7, 79518.0], [87.8, 79518.0], [87.9, 79518.0], [88.0, 79518.0], [88.1, 79518.0], [88.2, 79518.0], [88.3, 79518.0], [88.4, 79518.0], [88.5, 79530.0], [88.6, 79530.0], [88.7, 79530.0], [88.8, 79530.0], [88.9, 79530.0], [89.0, 79531.0], [89.1, 79531.0], [89.2, 79531.0], [89.3, 79531.0], [89.4, 79531.0], [89.5, 79531.0], [89.6, 79531.0], [89.7, 79531.0], [89.8, 79531.0], [89.9, 79531.0], [90.0, 79532.0], [90.1, 79532.0], [90.2, 79532.0], [90.3, 79532.0], [90.4, 79532.0], [90.5, 79532.0], [90.6, 79532.0], [90.7, 79532.0], [90.8, 79532.0], [90.9, 79532.0], [91.0, 79532.0], [91.1, 79532.0], [91.2, 79532.0], [91.3, 79532.0], [91.4, 79532.0], [91.5, 79533.0], [91.6, 79533.0], [91.7, 79533.0], [91.8, 79533.0], [91.9, 79533.0], [92.0, 79534.0], [92.1, 79534.0], [92.2, 79534.0], [92.3, 79534.0], [92.4, 79534.0], [92.5, 79534.0], [92.6, 79534.0], [92.7, 79534.0], [92.8, 79534.0], [92.9, 79534.0], [93.0, 79535.0], [93.1, 79535.0], [93.2, 79535.0], [93.3, 79535.0], [93.4, 79535.0], [93.5, 79535.0], [93.6, 79535.0], [93.7, 79535.0], [93.8, 79535.0], [93.9, 79535.0], [94.0, 79536.0], [94.1, 79536.0], [94.2, 79536.0], [94.3, 79536.0], [94.4, 79536.0], [94.5, 79536.0], [94.6, 79536.0], [94.7, 79536.0], [94.8, 79536.0], [94.9, 79536.0], [95.0, 79536.0], [95.1, 79536.0], [95.2, 79536.0], [95.3, 79536.0], [95.4, 79536.0], [95.5, 79536.0], [95.6, 79536.0], [95.7, 79536.0], [95.8, 79536.0], [95.9, 79536.0], [96.0, 79537.0], [96.1, 79537.0], [96.2, 79537.0], [96.3, 79537.0], [96.4, 79537.0], [96.5, 79537.0], [96.6, 79537.0], [96.7, 79537.0], [96.8, 79537.0], [96.9, 79537.0], [97.0, 79537.0], [97.1, 79537.0], [97.2, 79537.0], [97.3, 79537.0], [97.4, 79537.0], [97.5, 79538.0], [97.6, 79538.0], [97.7, 79538.0], [97.8, 79538.0], [97.9, 79538.0], [98.0, 79538.0], [98.1, 79538.0], [98.2, 79538.0], [98.3, 79538.0], [98.4, 79538.0], [98.5, 79539.0], [98.6, 79539.0], [98.7, 79539.0], [98.8, 79539.0], [98.9, 79539.0], [99.0, 79549.0], [99.1, 79549.0], [99.2, 79549.0], [99.3, 79549.0], [99.4, 79549.0], [99.5, 79552.0], [99.6, 79552.0], [99.7, 79552.0], [99.8, 79552.0], [99.9, 79552.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[0.0, 103.0], [0.1, 103.0], [0.2, 103.0], [0.3, 103.0], [0.4, 103.0], [0.5, 105.0], [0.6, 105.0], [0.7, 105.0], [0.8, 105.0], [0.9, 105.0], [1.0, 107.0], [1.1, 107.0], [1.2, 107.0], [1.3, 107.0], [1.4, 107.0], [1.5, 107.0], [1.6, 107.0], [1.7, 107.0], [1.8, 107.0], [1.9, 107.0], [2.0, 107.0], [2.1, 107.0], [2.2, 107.0], [2.3, 107.0], [2.4, 107.0], [2.5, 108.0], [2.6, 108.0], [2.7, 108.0], [2.8, 108.0], [2.9, 108.0], [3.0, 110.0], [3.1, 110.0], [3.2, 110.0], [3.3, 110.0], [3.4, 110.0], [3.5, 110.0], [3.6, 110.0], [3.7, 110.0], [3.8, 110.0], [3.9, 110.0], [4.0, 114.0], [4.1, 114.0], [4.2, 114.0], [4.3, 114.0], [4.4, 114.0], [4.5, 114.0], [4.6, 114.0], [4.7, 114.0], [4.8, 114.0], [4.9, 114.0], [5.0, 117.0], [5.1, 117.0], [5.2, 117.0], [5.3, 117.0], [5.4, 117.0], [5.5, 117.0], [5.6, 117.0], [5.7, 117.0], [5.8, 117.0], [5.9, 117.0], [6.0, 120.0], [6.1, 120.0], [6.2, 120.0], [6.3, 120.0], [6.4, 120.0], [6.5, 120.0], [6.6, 120.0], [6.7, 120.0], [6.8, 120.0], [6.9, 120.0], [7.0, 137.0], [7.1, 137.0], [7.2, 137.0], [7.3, 137.0], [7.4, 137.0], [7.5, 140.0], [7.6, 140.0], [7.7, 140.0], [7.8, 140.0], [7.9, 140.0], [8.0, 143.0], [8.1, 143.0], [8.2, 143.0], [8.3, 143.0], [8.4, 143.0], [8.5, 143.0], [8.6, 143.0], [8.7, 143.0], [8.8, 143.0], [8.9, 143.0], [9.0, 144.0], [9.1, 144.0], [9.2, 144.0], [9.3, 144.0], [9.4, 144.0], [9.5, 166.0], [9.6, 166.0], [9.7, 166.0], [9.8, 166.0], [9.9, 166.0], [10.0, 195.0], [10.1, 195.0], [10.2, 195.0], [10.3, 195.0], [10.4, 195.0], [10.5, 197.0], [10.6, 197.0], [10.7, 197.0], [10.8, 197.0], [10.9, 197.0], [11.0, 199.0], [11.1, 199.0], [11.2, 199.0], [11.3, 199.0], [11.4, 199.0], [11.5, 201.0], [11.6, 201.0], [11.7, 201.0], [11.8, 201.0], [11.9, 201.0], [12.0, 201.0], [12.1, 201.0], [12.2, 201.0], [12.3, 201.0], [12.4, 201.0], [12.5, 201.0], [12.6, 201.0], [12.7, 201.0], [12.8, 201.0], [12.9, 201.0], [13.0, 201.0], [13.1, 201.0], [13.2, 201.0], [13.3, 201.0], [13.4, 201.0], [13.5, 202.0], [13.6, 202.0], [13.7, 202.0], [13.8, 202.0], [13.9, 202.0], [14.0, 204.0], [14.1, 204.0], [14.2, 204.0], [14.3, 204.0], [14.4, 204.0], [14.5, 205.0], [14.6, 205.0], [14.7, 205.0], [14.8, 205.0], [14.9, 205.0], [15.0, 208.0], [15.1, 208.0], [15.2, 208.0], [15.3, 208.0], [15.4, 208.0], [15.5, 209.0], [15.6, 209.0], [15.7, 209.0], [15.8, 209.0], [15.9, 209.0], [16.0, 210.0], [16.1, 210.0], [16.2, 210.0], [16.3, 210.0], [16.4, 210.0], [16.5, 213.0], [16.6, 213.0], [16.7, 213.0], [16.8, 213.0], [16.9, 213.0], [17.0, 224.0], [17.1, 224.0], [17.2, 224.0], [17.3, 224.0], [17.4, 224.0], [17.5, 224.0], [17.6, 224.0], [17.7, 224.0], [17.8, 224.0], [17.9, 224.0], [18.0, 226.0], [18.1, 226.0], [18.2, 226.0], [18.3, 226.0], [18.4, 226.0], [18.5, 233.0], [18.6, 233.0], [18.7, 233.0], [18.8, 233.0], [18.9, 233.0], [19.0, 234.0], [19.1, 234.0], [19.2, 234.0], [19.3, 234.0], [19.4, 234.0], [19.5, 237.0], [19.6, 237.0], [19.7, 237.0], [19.8, 237.0], [19.9, 237.0], [20.0, 238.0], [20.1, 238.0], [20.2, 238.0], [20.3, 238.0], [20.4, 238.0], [20.5, 241.0], [20.6, 241.0], [20.7, 241.0], [20.8, 241.0], [20.9, 241.0], [21.0, 245.0], [21.1, 245.0], [21.2, 245.0], [21.3, 245.0], [21.4, 245.0], [21.5, 253.0], [21.6, 253.0], [21.7, 253.0], [21.8, 253.0], [21.9, 253.0], [22.0, 255.0], [22.1, 255.0], [22.2, 255.0], [22.3, 255.0], [22.4, 255.0], [22.5, 257.0], [22.6, 257.0], [22.7, 257.0], [22.8, 257.0], [22.9, 257.0], [23.0, 262.0], [23.1, 262.0], [23.2, 262.0], [23.3, 262.0], [23.4, 262.0], [23.5, 263.0], [23.6, 263.0], [23.7, 263.0], [23.8, 263.0], [23.9, 263.0], [24.0, 266.0], [24.1, 266.0], [24.2, 266.0], [24.3, 266.0], [24.4, 266.0], [24.5, 266.0], [24.6, 266.0], [24.7, 266.0], [24.8, 266.0], [24.9, 266.0], [25.0, 266.0], [25.1, 266.0], [25.2, 266.0], [25.3, 266.0], [25.4, 266.0], [25.5, 266.0], [25.6, 266.0], [25.7, 266.0], [25.8, 266.0], [25.9, 266.0], [26.0, 284.0], [26.1, 284.0], [26.2, 284.0], [26.3, 284.0], [26.4, 284.0], [26.5, 293.0], [26.6, 293.0], [26.7, 293.0], [26.8, 293.0], [26.9, 293.0], [27.0, 296.0], [27.1, 296.0], [27.2, 296.0], [27.3, 296.0], [27.4, 296.0], [27.5, 299.0], [27.6, 299.0], [27.7, 299.0], [27.8, 299.0], [27.9, 299.0], [28.0, 311.0], [28.1, 311.0], [28.2, 311.0], [28.3, 311.0], [28.4, 311.0], [28.5, 312.0], [28.6, 312.0], [28.7, 312.0], [28.8, 312.0], [28.9, 312.0], [29.0, 318.0], [29.1, 318.0], [29.2, 318.0], [29.3, 318.0], [29.4, 318.0], [29.5, 320.0], [29.6, 320.0], [29.7, 320.0], [29.8, 320.0], [29.9, 320.0], [30.0, 324.0], [30.1, 324.0], [30.2, 324.0], [30.3, 324.0], [30.4, 324.0], [30.5, 328.0], [30.6, 328.0], [30.7, 328.0], [30.8, 328.0], [30.9, 328.0], [31.0, 329.0], [31.1, 329.0], [31.2, 329.0], [31.3, 329.0], [31.4, 329.0], [31.5, 335.0], [31.6, 335.0], [31.7, 335.0], [31.8, 335.0], [31.9, 335.0], [32.0, 337.0], [32.1, 337.0], [32.2, 337.0], [32.3, 337.0], [32.4, 337.0], [32.5, 339.0], [32.6, 339.0], [32.7, 339.0], [32.8, 339.0], [32.9, 339.0], [33.0, 341.0], [33.1, 341.0], [33.2, 341.0], [33.3, 341.0], [33.4, 341.0], [33.5, 347.0], [33.6, 347.0], [33.7, 347.0], [33.8, 347.0], [33.9, 347.0], [34.0, 350.0], [34.1, 350.0], [34.2, 350.0], [34.3, 350.0], [34.4, 350.0], [34.5, 352.0], [34.6, 352.0], [34.7, 352.0], [34.8, 352.0], [34.9, 352.0], [35.0, 353.0], [35.1, 353.0], [35.2, 353.0], [35.3, 353.0], [35.4, 353.0], [35.5, 355.0], [35.6, 355.0], [35.7, 355.0], [35.8, 355.0], [35.9, 355.0], [36.0, 356.0], [36.1, 356.0], [36.2, 356.0], [36.3, 356.0], [36.4, 356.0], [36.5, 357.0], [36.6, 357.0], [36.7, 357.0], [36.8, 357.0], [36.9, 357.0], [37.0, 358.0], [37.1, 358.0], [37.2, 358.0], [37.3, 358.0], [37.4, 358.0], [37.5, 359.0], [37.6, 359.0], [37.7, 359.0], [37.8, 359.0], [37.9, 359.0], [38.0, 360.0], [38.1, 360.0], [38.2, 360.0], [38.3, 360.0], [38.4, 360.0], [38.5, 360.0], [38.6, 360.0], [38.7, 360.0], [38.8, 360.0], [38.9, 360.0], [39.0, 361.0], [39.1, 361.0], [39.2, 361.0], [39.3, 361.0], [39.4, 361.0], [39.5, 361.0], [39.6, 361.0], [39.7, 361.0], [39.8, 361.0], [39.9, 361.0], [40.0, 363.0], [40.1, 363.0], [40.2, 363.0], [40.3, 363.0], [40.4, 363.0], [40.5, 363.0], [40.6, 363.0], [40.7, 363.0], [40.8, 363.0], [40.9, 363.0], [41.0, 368.0], [41.1, 368.0], [41.2, 368.0], [41.3, 368.0], [41.4, 368.0], [41.5, 368.0], [41.6, 368.0], [41.7, 368.0], [41.8, 368.0], [41.9, 368.0], [42.0, 371.0], [42.1, 371.0], [42.2, 371.0], [42.3, 371.0], [42.4, 371.0], [42.5, 373.0], [42.6, 373.0], [42.7, 373.0], [42.8, 373.0], [42.9, 373.0], [43.0, 373.0], [43.1, 373.0], [43.2, 373.0], [43.3, 373.0], [43.4, 373.0], [43.5, 375.0], [43.6, 375.0], [43.7, 375.0], [43.8, 375.0], [43.9, 375.0], [44.0, 376.0], [44.1, 376.0], [44.2, 376.0], [44.3, 376.0], [44.4, 376.0], [44.5, 376.0], [44.6, 376.0], [44.7, 376.0], [44.8, 376.0], [44.9, 376.0], [45.0, 378.0], [45.1, 378.0], [45.2, 378.0], [45.3, 378.0], [45.4, 378.0], [45.5, 384.0], [45.6, 384.0], [45.7, 384.0], [45.8, 384.0], [45.9, 384.0], [46.0, 385.0], [46.1, 385.0], [46.2, 385.0], [46.3, 385.0], [46.4, 385.0], [46.5, 386.0], [46.6, 386.0], [46.7, 386.0], [46.8, 386.0], [46.9, 386.0], [47.0, 387.0], [47.1, 387.0], [47.2, 387.0], [47.3, 387.0], [47.4, 387.0], [47.5, 388.0], [47.6, 388.0], [47.7, 388.0], [47.8, 388.0], [47.9, 388.0], [48.0, 394.0], [48.1, 394.0], [48.2, 394.0], [48.3, 394.0], [48.4, 394.0], [48.5, 394.0], [48.6, 394.0], [48.7, 394.0], [48.8, 394.0], [48.9, 394.0], [49.0, 396.0], [49.1, 396.0], [49.2, 396.0], [49.3, 396.0], [49.4, 396.0], [49.5, 396.0], [49.6, 396.0], [49.7, 396.0], [49.8, 396.0], [49.9, 396.0], [50.0, 399.0], [50.1, 399.0], [50.2, 399.0], [50.3, 399.0], [50.4, 399.0], [50.5, 403.0], [50.6, 403.0], [50.7, 403.0], [50.8, 403.0], [50.9, 403.0], [51.0, 404.0], [51.1, 404.0], [51.2, 404.0], [51.3, 404.0], [51.4, 404.0], [51.5, 424.0], [51.6, 424.0], [51.7, 424.0], [51.8, 424.0], [51.9, 424.0], [52.0, 443.0], [52.1, 443.0], [52.2, 443.0], [52.3, 443.0], [52.4, 443.0], [52.5, 443.0], [52.6, 443.0], [52.7, 443.0], [52.8, 443.0], [52.9, 443.0], [53.0, 476.0], [53.1, 476.0], [53.2, 476.0], [53.3, 476.0], [53.4, 476.0], [53.5, 1297.0], [53.6, 1297.0], [53.7, 1297.0], [53.8, 1297.0], [53.9, 1297.0], [54.0, 1299.0], [54.1, 1299.0], [54.2, 1299.0], [54.3, 1299.0], [54.4, 1299.0], [54.5, 1305.0], [54.6, 1305.0], [54.7, 1305.0], [54.8, 1305.0], [54.9, 1305.0], [55.0, 1309.0], [55.1, 1309.0], [55.2, 1309.0], [55.3, 1309.0], [55.4, 1309.0], [55.5, 1314.0], [55.6, 1314.0], [55.7, 1314.0], [55.8, 1314.0], [55.9, 1314.0], [56.0, 1317.0], [56.1, 1317.0], [56.2, 1317.0], [56.3, 1317.0], [56.4, 1317.0], [56.5, 1325.0], [56.6, 1325.0], [56.7, 1325.0], [56.8, 1325.0], [56.9, 1325.0], [57.0, 1327.0], [57.1, 1327.0], [57.2, 1327.0], [57.3, 1327.0], [57.4, 1327.0], [57.5, 2293.0], [57.6, 2293.0], [57.7, 2293.0], [57.8, 2293.0], [57.9, 2293.0], [58.0, 2299.0], [58.1, 2299.0], [58.2, 2299.0], [58.3, 2299.0], [58.4, 2299.0], [58.5, 2302.0], [58.6, 2302.0], [58.7, 2302.0], [58.8, 2302.0], [58.9, 2302.0], [59.0, 2308.0], [59.1, 2308.0], [59.2, 2308.0], [59.3, 2308.0], [59.4, 2308.0], [59.5, 2313.0], [59.6, 2313.0], [59.7, 2313.0], [59.8, 2313.0], [59.9, 2313.0], [60.0, 3313.0], [60.1, 3313.0], [60.2, 3313.0], [60.3, 3313.0], [60.4, 3313.0], [60.5, 5235.0], [60.6, 5235.0], [60.7, 5235.0], [60.8, 5235.0], [60.9, 5235.0], [61.0, 5239.0], [61.1, 5239.0], [61.2, 5239.0], [61.3, 5239.0], [61.4, 5239.0], [61.5, 5244.0], [61.6, 5244.0], [61.7, 5244.0], [61.8, 5244.0], [61.9, 5244.0], [62.0, 5250.0], [62.1, 5250.0], [62.2, 5250.0], [62.3, 5250.0], [62.4, 5250.0], [62.5, 5255.0], [62.6, 5255.0], [62.7, 5255.0], [62.8, 5255.0], [62.9, 5255.0], [63.0, 5261.0], [63.1, 5261.0], [63.2, 5261.0], [63.3, 5261.0], [63.4, 5261.0], [63.5, 5265.0], [63.6, 5265.0], [63.7, 5265.0], [63.8, 5265.0], [63.9, 5265.0], [64.0, 6207.0], [64.1, 6207.0], [64.2, 6207.0], [64.3, 6207.0], [64.4, 6207.0], [64.5, 6209.0], [64.6, 6209.0], [64.7, 6209.0], [64.8, 6209.0], [64.9, 6209.0], [65.0, 6223.0], [65.1, 6223.0], [65.2, 6223.0], [65.3, 6223.0], [65.4, 6223.0], [65.5, 6224.0], [65.6, 6224.0], [65.7, 6224.0], [65.8, 6224.0], [65.9, 6224.0], [66.0, 6235.0], [66.1, 6235.0], [66.2, 6235.0], [66.3, 6235.0], [66.4, 6235.0], [66.5, 6235.0], [66.6, 6235.0], [66.7, 6235.0], [66.8, 6235.0], [66.9, 6235.0], [67.0, 6241.0], [67.1, 6241.0], [67.2, 6241.0], [67.3, 6241.0], [67.4, 6241.0], [67.5, 7206.0], [67.6, 7206.0], [67.7, 7206.0], [67.8, 7206.0], [67.9, 7206.0], [68.0, 7211.0], [68.1, 7211.0], [68.2, 7211.0], [68.3, 7211.0], [68.4, 7211.0], [68.5, 7214.0], [68.6, 7214.0], [68.7, 7214.0], [68.8, 7214.0], [68.9, 7214.0], [69.0, 7219.0], [69.1, 7219.0], [69.2, 7219.0], [69.3, 7219.0], [69.4, 7219.0], [69.5, 7223.0], [69.6, 7223.0], [69.7, 7223.0], [69.8, 7223.0], [69.9, 7223.0], [70.0, 7232.0], [70.1, 7232.0], [70.2, 7232.0], [70.3, 7232.0], [70.4, 7232.0], [70.5, 8878.0], [70.6, 8878.0], [70.7, 8878.0], [70.8, 8878.0], [70.9, 8878.0], [71.0, 8881.0], [71.1, 8881.0], [71.2, 8881.0], [71.3, 8881.0], [71.4, 8881.0], [71.5, 8886.0], [71.6, 8886.0], [71.7, 8886.0], [71.8, 8886.0], [71.9, 8886.0], [72.0, 8894.0], [72.1, 8894.0], [72.2, 8894.0], [72.3, 8894.0], [72.4, 8894.0], [72.5, 8895.0], [72.6, 8895.0], [72.7, 8895.0], [72.8, 8895.0], [72.9, 8895.0], [73.0, 8901.0], [73.1, 8901.0], [73.2, 8901.0], [73.3, 8901.0], [73.4, 8901.0], [73.5, 8907.0], [73.6, 8907.0], [73.7, 8907.0], [73.8, 8907.0], [73.9, 8907.0], [74.0, 8910.0], [74.1, 8910.0], [74.2, 8910.0], [74.3, 8910.0], [74.4, 8910.0], [74.5, 8916.0], [74.6, 8916.0], [74.7, 8916.0], [74.8, 8916.0], [74.9, 8916.0], [75.0, 8920.0], [75.1, 8920.0], [75.2, 8920.0], [75.3, 8920.0], [75.4, 8920.0], [75.5, 8927.0], [75.6, 8927.0], [75.7, 8927.0], [75.8, 8927.0], [75.9, 8927.0], [76.0, 8933.0], [76.1, 8933.0], [76.2, 8933.0], [76.3, 8933.0], [76.4, 8933.0], [76.5, 8935.0], [76.6, 8935.0], [76.7, 8935.0], [76.8, 8935.0], [76.9, 8935.0], [77.0, 8935.0], [77.1, 8935.0], [77.2, 8935.0], [77.3, 8935.0], [77.4, 8935.0], [77.5, 8940.0], [77.6, 8940.0], [77.7, 8940.0], [77.8, 8940.0], [77.9, 8940.0], [78.0, 8944.0], [78.1, 8944.0], [78.2, 8944.0], [78.3, 8944.0], [78.4, 8944.0], [78.5, 8953.0], [78.6, 8953.0], [78.7, 8953.0], [78.8, 8953.0], [78.9, 8953.0], [79.0, 8953.0], [79.1, 8953.0], [79.2, 8953.0], [79.3, 8953.0], [79.4, 8953.0], [79.5, 8964.0], [79.6, 8964.0], [79.7, 8964.0], [79.8, 8964.0], [79.9, 8964.0], [80.0, 8965.0], [80.1, 8965.0], [80.2, 8965.0], [80.3, 8965.0], [80.4, 8965.0], [80.5, 8970.0], [80.6, 8970.0], [80.7, 8970.0], [80.8, 8970.0], [80.9, 8970.0], [81.0, 8970.0], [81.1, 8970.0], [81.2, 8970.0], [81.3, 8970.0], [81.4, 8970.0], [81.5, 8976.0], [81.6, 8976.0], [81.7, 8976.0], [81.8, 8976.0], [81.9, 8976.0], [82.0, 8983.0], [82.1, 8983.0], [82.2, 8983.0], [82.3, 8983.0], [82.4, 8983.0], [82.5, 8988.0], [82.6, 8988.0], [82.7, 8988.0], [82.8, 8988.0], [82.9, 8988.0], [83.0, 8993.0], [83.1, 8993.0], [83.2, 8993.0], [83.3, 8993.0], [83.4, 8993.0], [83.5, 8996.0], [83.6, 8996.0], [83.7, 8996.0], [83.8, 8996.0], [83.9, 8996.0], [84.0, 9004.0], [84.1, 9004.0], [84.2, 9004.0], [84.3, 9004.0], [84.4, 9004.0], [84.5, 9006.0], [84.6, 9006.0], [84.7, 9006.0], [84.8, 9006.0], [84.9, 9006.0], [85.0, 9009.0], [85.1, 9009.0], [85.2, 9009.0], [85.3, 9009.0], [85.4, 9009.0], [85.5, 9014.0], [85.6, 9014.0], [85.7, 9014.0], [85.8, 9014.0], [85.9, 9014.0], [86.0, 9022.0], [86.1, 9022.0], [86.2, 9022.0], [86.3, 9022.0], [86.4, 9022.0], [86.5, 9027.0], [86.6, 9027.0], [86.7, 9027.0], [86.8, 9027.0], [86.9, 9027.0], [87.0, 9029.0], [87.1, 9029.0], [87.2, 9029.0], [87.3, 9029.0], [87.4, 9029.0], [87.5, 9035.0], [87.6, 9035.0], [87.7, 9035.0], [87.8, 9035.0], [87.9, 9035.0], [88.0, 9038.0], [88.1, 9038.0], [88.2, 9038.0], [88.3, 9038.0], [88.4, 9038.0], [88.5, 9040.0], [88.6, 9040.0], [88.7, 9040.0], [88.8, 9040.0], [88.9, 9040.0], [89.0, 9049.0], [89.1, 9049.0], [89.2, 9049.0], [89.3, 9049.0], [89.4, 9049.0], [89.5, 9049.0], [89.6, 9049.0], [89.7, 9049.0], [89.8, 9049.0], [89.9, 9049.0], [90.0, 9058.0], [90.1, 9058.0], [90.2, 9058.0], [90.3, 9058.0], [90.4, 9058.0], [90.5, 9060.0], [90.6, 9060.0], [90.7, 9060.0], [90.8, 9060.0], [90.9, 9060.0], [91.0, 9063.0], [91.1, 9063.0], [91.2, 9063.0], [91.3, 9063.0], [91.4, 9063.0], [91.5, 9068.0], [91.6, 9068.0], [91.7, 9068.0], [91.8, 9068.0], [91.9, 9068.0], [92.0, 9075.0], [92.1, 9075.0], [92.2, 9075.0], [92.3, 9075.0], [92.4, 9075.0], [92.5, 9079.0], [92.6, 9079.0], [92.7, 9079.0], [92.8, 9079.0], [92.9, 9079.0], [93.0, 9084.0], [93.1, 9084.0], [93.2, 9084.0], [93.3, 9084.0], [93.4, 9084.0], [93.5, 9088.0], [93.6, 9088.0], [93.7, 9088.0], [93.8, 9088.0], [93.9, 9088.0], [94.0, 9090.0], [94.1, 9090.0], [94.2, 9090.0], [94.3, 9090.0], [94.4, 9090.0], [94.5, 9099.0], [94.6, 9099.0], [94.7, 9099.0], [94.8, 9099.0], [94.9, 9099.0], [95.0, 9100.0], [95.1, 9100.0], [95.2, 9100.0], [95.3, 9100.0], [95.4, 9100.0], [95.5, 9106.0], [95.6, 9106.0], [95.7, 9106.0], [95.8, 9106.0], [95.9, 9106.0], [96.0, 9107.0], [96.1, 9107.0], [96.2, 9107.0], [96.3, 9107.0], [96.4, 9107.0], [96.5, 9114.0], [96.6, 9114.0], [96.7, 9114.0], [96.8, 9114.0], [96.9, 9114.0], [97.0, 9118.0], [97.1, 9118.0], [97.2, 9118.0], [97.3, 9118.0], [97.4, 9118.0], [97.5, 9122.0], [97.6, 9122.0], [97.7, 9122.0], [97.8, 9122.0], [97.9, 9122.0], [98.0, 9128.0], [98.1, 9128.0], [98.2, 9128.0], [98.3, 9128.0], [98.4, 9128.0], [98.5, 9138.0], [98.6, 9138.0], [98.7, 9138.0], [98.8, 9138.0], [98.9, 9138.0], [99.0, 9148.0], [99.1, 9148.0], [99.2, 9148.0], [99.3, 9148.0], [99.4, 9148.0], [99.5, 9155.0], [99.6, 9155.0], [99.7, 9155.0], [99.8, 9155.0], [99.9, 9155.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 66.0, "series": [{"data": [[0.0, 53.0], [2100.0, 2.0], [2900.0, 8.0], [3000.0, 66.0], [3100.0, 7.0], [100.0, 45.0], [3900.0, 6.0], [4000.0, 13.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[39300.0, 3.0], [40000.0, 7.0], [47200.0, 3.0], [47900.0, 7.0], [52300.0, 4.0], [53500.0, 3.0], [54200.0, 3.0], [69300.0, 7.0], [68300.0, 6.0], [67400.0, 38.0], [67500.0, 21.0], [73400.0, 5.0], [71300.0, 7.0], [72400.0, 1.0], [77300.0, 2.0], [76300.0, 7.0], [75400.0, 8.0], [78500.0, 2.0], [79300.0, 7.0], [79400.0, 20.0], [79500.0, 39.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[2300.0, 3.0], [2200.0, 2.0], [9100.0, 10.0], [9000.0, 22.0], [8900.0, 22.0], [8800.0, 5.0], [200.0, 33.0], [3300.0, 1.0], [300.0, 45.0], [1200.0, 2.0], [1300.0, 6.0], [5200.0, 7.0], [6200.0, 7.0], [100.0, 23.0], [400.0, 6.0], [7200.0, 6.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 79500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 387.0, "series": [{"data": [[0.0, 205.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 387.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 83.31677018633536, "minX": 1.608742582E12, "maxY": 200.0, "series": [{"data": [[1.608742593E12, 200.0], [1.608742636E12, 174.5], [1.608742594E12, 200.0], [1.608742661E12, 168.44444444444446], [1.608742662E12, 83.31677018633536], [1.608742621E12, 200.0], [1.608742622E12, 196.57142857142858], [1.608742582E12, 122.19024390243901], [1.608742583E12, 200.0], [1.608742584E12, 200.0], [1.608742585E12, 200.0], [1.608742586E12, 200.0], [1.608742629E12, 190.0], [1.608742587E12, 200.0], [1.60874263E12, 187.0], [1.608742588E12, 200.0], [1.608742589E12, 200.0], [1.60874259E12, 200.0], [1.608742591E12, 200.0], [1.608742634E12, 180.0], [1.608742592E12, 200.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608742662E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 57.44444444444444, "minX": 8.0, "maxY": 79540.375, "series": [{"data": [[128.0, 100.22222222222223], [129.0, 98.39999999999999], [130.0, 98.0], [133.0, 106.70833333333333], [134.0, 102.0], [137.0, 102.6], [138.0, 97.0], [143.0, 96.14285714285714], [155.0, 126.0], [157.0, 133.0], [161.0, 113.0], [200.0, 3234.000000000001], [118.0, 57.44444444444444], [119.0, 59.25], [122.0, 75.6], [123.0, 76.88888888888889]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[165.78500000000005, 1695.1099999999994]], "isOverall": false, "label": "GET /login-Aggregated", "isController": false}, {"data": [[8.0, 67539.0], [9.0, 67537.0], [11.0, 67536.77777777778], [17.0, 67518.0], [21.0, 67508.75], [25.0, 67495.75], [30.0, 67490.0], [31.0, 67487.0], [32.0, 67478.0], [37.0, 67475.0], [41.0, 67475.28571428571], [40.0, 67476.0], [45.0, 67464.0], [44.0, 67464.0], [49.0, 67462.0], [51.0, 67459.16666666667], [58.0, 67447.71428571429], [61.0, 67908.5], [60.0, 68387.0], [67.0, 69370.0], [66.0, 68378.0], [65.0, 68630.25], [71.0, 69368.33333333333], [68.0, 69369.0], [74.0, 70374.0], [72.0, 71395.0], [79.0, 72418.0], [81.0, 71731.0], [86.0, 73431.0], [84.0, 73431.0], [91.0, 75465.66666666667], [88.0, 73432.0], [98.0, 76361.0], [97.0, 76057.33333333333], [101.0, 76350.0], [100.0, 76864.5], [105.0, 79476.0], [104.0, 78759.33333333333], [111.0, 79519.2], [109.0, 79530.0], [115.0, 79517.0], [116.0, 79516.0], [121.0, 79540.375], [135.0, 79515.0], [131.0, 79534.0], [129.0, 79535.75], [128.0, 79536.0], [142.0, 79516.0], [140.0, 79515.16666666667], [137.0, 79517.5], [151.0, 79498.66666666667], [148.0, 79500.0], [147.0, 79496.0], [146.0, 79514.0], [145.0, 79514.0], [144.0, 79496.0], [159.0, 79480.0], [158.0, 79492.4], [155.0, 79494.5], [161.0, 79478.0], [173.0, 54280.0], [170.0, 78531.5], [168.0, 79355.57142857142], [180.0, 52355.5], [176.0, 53571.333333333336], [190.0, 47250.666666666664], [187.0, 47953.71428571429], [197.0, 40083.33333333333], [194.0, 40088.0], [200.0, 39323.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[102.75500000000004, 69614.13000000003]], "isOverall": false, "label": "POST /graphql - Login-Aggregated", "isController": false}, {"data": [[129.0, 423.5], [130.0, 166.0], [139.0, 208.0], [144.0, 225.0], [154.0, 266.0], [157.0, 266.0], [158.0, 261.5], [200.0, 7318.107526881719], [106.0, 271.88235294117646], [105.0, 224.66666666666666], [104.0, 352.5], [107.0, 267.55], [108.0, 331.0], [109.0, 255.72727272727278], [111.0, 344.8], [112.0, 211.25], [114.0, 311.4285714285714], [115.0, 326.6], [116.0, 274.0], [119.0, 320.3333333333333], [123.0, 349.0], [124.0, 143.5]], "isOverall": false, "label": "GET /", "isController": false}, {"data": [[154.46000000000012, 3551.4949999999994]], "isOverall": false, "label": "GET /-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 732.0, "minX": 1.608742582E12, "maxY": 511538.0, "series": [{"data": [[1.608742593E12, 12360.0], [1.608742636E12, 8670.0], [1.608742594E12, 121540.0], [1.608742661E12, 13005.0], [1.608742662E12, 232645.0], [1.608742621E12, 4335.0], [1.608742622E12, 10115.0], [1.608742582E12, 511538.0], [1.608742583E12, 23152.0], [1.608742584E12, 18590.0], [1.608742585E12, 17314.0], [1.608742586E12, 16480.0], [1.608742629E12, 4335.0], [1.608742587E12, 20258.0], [1.60874263E12, 10115.0], [1.608742588E12, 30558.0], [1.608742589E12, 19424.0], [1.60874259E12, 14420.0], [1.608742591E12, 170746.0], [1.608742634E12, 5780.0], [1.608742592E12, 14420.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.608742593E12, 732.0], [1.608742636E12, 4242.0], [1.608742594E12, 7198.0], [1.608742661E12, 6363.0], [1.608742662E12, 113827.0], [1.608742621E12, 2121.0], [1.608742622E12, 4949.0], [1.608742582E12, 24475.0], [1.608742583E12, 936.0], [1.608742584E12, 829.0], [1.608742585E12, 971.0], [1.608742586E12, 976.0], [1.608742629E12, 2121.0], [1.608742587E12, 819.0], [1.60874263E12, 4949.0], [1.608742588E12, 1429.0], [1.608742589E12, 824.0], [1.60874259E12, 854.0], [1.608742591E12, 6903.0], [1.608742634E12, 2828.0], [1.608742592E12, 854.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608742662E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 93.40816326530613, "minX": 1.608742582E12, "maxY": 79172.44444444444, "series": [{"data": [[1.608742582E12, 93.40816326530613], [1.608742593E12, 4064.8333333333335], [1.608742594E12, 3075.830508474576], [1.608742584E12, 2169.5], [1.608742585E12, 3129.857142857143], [1.608742586E12, 2969.375], [1.608742588E12, 3990.8], [1.608742589E12, 3990.0], [1.60874259E12, 3061.5714285714284], [1.608742592E12, 4089.571428571429]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.608742636E12, 53925.666666666664], [1.608742629E12, 47250.666666666664], [1.608742661E12, 79172.44444444444], [1.60874263E12, 47953.71428571429], [1.608742662E12, 73300.08074534159], [1.608742621E12, 39323.0], [1.608742622E12, 40083.99999999999], [1.608742634E12, 52355.5]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.608742582E12, 277.7102803738317], [1.608742583E12, 1311.625], [1.608742584E12, 2303.0], [1.608742585E12, 3313.0], [1.608742587E12, 5249.857142857143], [1.608742588E12, 6224.857142857143], [1.608742589E12, 7217.5], [1.608742591E12, 9010.762711864409]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608742662E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 93.40816326530613, "minX": 1.608742582E12, "maxY": 79172.44444444444, "series": [{"data": [[1.608742582E12, 93.40816326530613], [1.608742593E12, 4064.6666666666665], [1.608742594E12, 3075.830508474576], [1.608742584E12, 2169.5], [1.608742585E12, 3129.857142857143], [1.608742586E12, 2968.625], [1.608742588E12, 3990.8], [1.608742589E12, 3990.0], [1.60874259E12, 3061.5714285714284], [1.608742592E12, 4089.428571428571]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.608742636E12, 53925.666666666664], [1.608742629E12, 47250.666666666664], [1.608742661E12, 79172.44444444444], [1.60874263E12, 47953.42857142857], [1.608742662E12, 73300.02484472048], [1.608742621E12, 39322.333333333336], [1.608742622E12, 40083.99999999999], [1.608742634E12, 52354.75]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.608742582E12, 275.8785046728973], [1.608742583E12, 1311.1250000000002], [1.608742584E12, 2303.0], [1.608742585E12, 3313.0], [1.608742587E12, 5249.857142857143], [1.608742588E12, 6224.857142857143], [1.608742589E12, 7217.333333333333], [1.608742591E12, 9010.627118644066]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608742662E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.608742582E12, "maxY": 58.009345794392544, "series": [{"data": [[1.608742582E12, 0.0], [1.608742593E12, 0.0], [1.608742594E12, 0.0], [1.608742584E12, 0.0], [1.608742585E12, 0.0], [1.608742586E12, 0.0], [1.608742588E12, 0.0], [1.608742589E12, 0.0], [1.60874259E12, 0.0], [1.608742592E12, 0.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.608742636E12, 0.0], [1.608742629E12, 0.0], [1.608742661E12, 0.0], [1.60874263E12, 0.0], [1.608742662E12, 0.0], [1.608742621E12, 0.0], [1.608742622E12, 0.0], [1.608742634E12, 0.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.608742582E12, 58.009345794392544], [1.608742583E12, 40.25], [1.608742584E12, 39.6], [1.608742585E12, 41.0], [1.608742587E12, 43.57142857142857], [1.608742588E12, 43.57142857142858], [1.608742589E12, 42.0], [1.608742591E12, 41.81355932203391]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608742662E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 56.0, "minX": 1.608742582E12, "maxY": 79552.0, "series": [{"data": [[1.608742593E12, 4065.0], [1.608742636E12, 54298.0], [1.608742594E12, 3090.0], [1.608742661E12, 79357.0], [1.608742662E12, 79552.0], [1.608742621E12, 39324.0], [1.608742622E12, 40088.0], [1.608742582E12, 476.0], [1.608742583E12, 1327.0], [1.608742584E12, 2313.0], [1.608742585E12, 3313.0], [1.608742586E12, 2970.0], [1.608742629E12, 47253.0], [1.608742587E12, 5265.0], [1.60874263E12, 47956.0], [1.608742588E12, 6241.0], [1.608742589E12, 7232.0], [1.60874259E12, 3062.0], [1.608742591E12, 9155.0], [1.608742634E12, 52357.0], [1.608742592E12, 4092.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.608742593E12, 4065.0], [1.608742636E12, 54298.0], [1.608742594E12, 3083.0], [1.608742661E12, 79357.0], [1.608742662E12, 79533.8], [1.608742621E12, 39324.0], [1.608742622E12, 40088.0], [1.608742582E12, 373.8], [1.608742583E12, 1327.0], [1.608742584E12, 2313.0], [1.608742585E12, 3313.0], [1.608742586E12, 2970.0], [1.608742629E12, 47253.0], [1.608742587E12, 5265.0], [1.60874263E12, 47956.0], [1.608742588E12, 6239.2], [1.608742589E12, 7232.0], [1.60874259E12, 3062.0], [1.608742591E12, 9118.0], [1.608742634E12, 52357.0], [1.608742592E12, 4092.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.608742593E12, 4065.0], [1.608742636E12, 54298.0], [1.608742594E12, 3090.0], [1.608742661E12, 79357.0], [1.608742662E12, 79550.14], [1.608742621E12, 39324.0], [1.608742622E12, 40088.0], [1.608742582E12, 443.0], [1.608742583E12, 1327.0], [1.608742584E12, 2313.0], [1.608742585E12, 3313.0], [1.608742586E12, 2970.0], [1.608742629E12, 47253.0], [1.608742587E12, 5265.0], [1.60874263E12, 47956.0], [1.608742588E12, 6241.0], [1.608742589E12, 7232.0], [1.60874259E12, 3062.0], [1.608742591E12, 9155.0], [1.608742634E12, 52357.0], [1.608742592E12, 4092.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.608742593E12, 4065.0], [1.608742636E12, 54298.0], [1.608742594E12, 3087.0], [1.608742661E12, 79357.0], [1.608742662E12, 79536.9], [1.608742621E12, 39324.0], [1.608742622E12, 40088.0], [1.608742582E12, 394.0], [1.608742583E12, 1327.0], [1.608742584E12, 2313.0], [1.608742585E12, 3313.0], [1.608742586E12, 2970.0], [1.608742629E12, 47253.0], [1.608742587E12, 5265.0], [1.60874263E12, 47956.0], [1.608742588E12, 6241.0], [1.608742589E12, 7232.0], [1.60874259E12, 3062.0], [1.608742591E12, 9138.0], [1.608742634E12, 52357.0], [1.608742592E12, 4092.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.608742593E12, 4064.0], [1.608742636E12, 53555.0], [1.608742594E12, 3068.0], [1.608742661E12, 78531.0], [1.608742662E12, 67431.0], [1.608742621E12, 39321.0], [1.608742622E12, 40081.0], [1.608742582E12, 56.0], [1.608742583E12, 1297.0], [1.608742584E12, 2168.0], [1.608742585E12, 3123.0], [1.608742586E12, 2968.0], [1.608742629E12, 47249.0], [1.608742587E12, 5235.0], [1.60874263E12, 47952.0], [1.608742588E12, 3990.0], [1.608742589E12, 3990.0], [1.60874259E12, 3061.0], [1.608742591E12, 8878.0], [1.608742634E12, 52354.0], [1.608742592E12, 4087.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.608742593E12, 4065.0], [1.608742636E12, 53925.5], [1.608742594E12, 3075.0], [1.608742661E12, 79354.0], [1.608742662E12, 73431.0], [1.608742621E12, 39324.0], [1.608742622E12, 40085.0], [1.608742582E12, 113.0], [1.608742583E12, 1311.5], [1.608742584E12, 2299.0], [1.608742585E12, 3128.5], [1.608742586E12, 2970.0], [1.608742629E12, 47250.0], [1.608742587E12, 5250.0], [1.60874263E12, 47954.0], [1.608742588E12, 6208.0], [1.608742589E12, 7214.0], [1.60874259E12, 3062.0], [1.608742591E12, 9009.0], [1.608742634E12, 52355.5], [1.608742592E12, 4089.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608742662E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 113.0, "minX": 3.0, "maxY": 79354.0, "series": [{"data": [[8.0, 2970.0], [4.0, 52355.5], [9.0, 79354.0], [161.0, 73431.0], [12.0, 6208.0], [6.0, 28810.0], [3.0, 43286.5], [205.0, 113.0], [7.0, 5244.0], [59.0, 5984.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 205.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 113.0, "minX": 3.0, "maxY": 79354.0, "series": [{"data": [[8.0, 2968.5], [4.0, 52354.5], [9.0, 79354.0], [161.0, 73431.0], [12.0, 6208.0], [6.0, 28810.0], [3.0, 43286.0], [205.0, 113.0], [7.0, 5244.0], [59.0, 5984.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 205.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.608742582E12, "maxY": 405.0, "series": [{"data": [[1.608742593E12, 6.0], [1.608742594E12, 59.0], [1.608742582E12, 405.0], [1.608742583E12, 8.0], [1.608742584E12, 7.0], [1.608742585E12, 8.0], [1.608742586E12, 8.0], [1.608742587E12, 7.0], [1.608742588E12, 12.0], [1.608742589E12, 7.0], [1.60874259E12, 7.0], [1.608742591E12, 59.0], [1.608742592E12, 7.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608742594E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.608742582E12, "maxY": 205.0, "series": [{"data": [[1.608742593E12, 6.0], [1.608742636E12, 6.0], [1.608742594E12, 59.0], [1.608742661E12, 9.0], [1.608742662E12, 161.0], [1.608742621E12, 3.0], [1.608742622E12, 7.0], [1.608742582E12, 205.0], [1.608742583E12, 8.0], [1.608742584E12, 7.0], [1.608742585E12, 8.0], [1.608742586E12, 8.0], [1.608742629E12, 3.0], [1.608742587E12, 7.0], [1.60874263E12, 7.0], [1.608742588E12, 12.0], [1.608742589E12, 7.0], [1.60874259E12, 7.0], [1.608742591E12, 59.0], [1.608742634E12, 4.0], [1.608742592E12, 7.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608742662E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.608742582E12, "maxY": 161.0, "series": [{"data": [[1.608742582E12, 107.0], [1.608742583E12, 8.0], [1.608742584E12, 5.0], [1.608742585E12, 1.0], [1.608742587E12, 7.0], [1.608742588E12, 7.0], [1.608742589E12, 6.0], [1.608742591E12, 59.0]], "isOverall": false, "label": "GET /-success", "isController": false}, {"data": [[1.608742636E12, 6.0], [1.608742629E12, 3.0], [1.608742661E12, 9.0], [1.60874263E12, 7.0], [1.608742662E12, 161.0], [1.608742621E12, 3.0], [1.608742622E12, 7.0], [1.608742634E12, 4.0]], "isOverall": false, "label": "POST /graphql - Login-success", "isController": false}, {"data": [[1.608742582E12, 98.0], [1.608742593E12, 6.0], [1.608742594E12, 59.0], [1.608742584E12, 2.0], [1.608742585E12, 7.0], [1.608742586E12, 8.0], [1.608742588E12, 5.0], [1.608742589E12, 1.0], [1.60874259E12, 7.0], [1.608742592E12, 7.0]], "isOverall": false, "label": "GET /login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608742662E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.608742582E12, "maxY": 205.0, "series": [{"data": [[1.608742593E12, 6.0], [1.608742636E12, 6.0], [1.608742594E12, 59.0], [1.608742661E12, 9.0], [1.608742662E12, 161.0], [1.608742621E12, 3.0], [1.608742622E12, 7.0], [1.608742582E12, 205.0], [1.608742583E12, 8.0], [1.608742584E12, 7.0], [1.608742585E12, 8.0], [1.608742586E12, 8.0], [1.608742629E12, 3.0], [1.608742587E12, 7.0], [1.60874263E12, 7.0], [1.608742588E12, 12.0], [1.608742589E12, 7.0], [1.60874259E12, 7.0], [1.608742591E12, 59.0], [1.608742634E12, 4.0], [1.608742592E12, 7.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608742662E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

