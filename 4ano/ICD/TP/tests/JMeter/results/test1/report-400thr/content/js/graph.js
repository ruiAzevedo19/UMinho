/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 42.0, "minX": 0.0, "maxY": 120164.0, "series": [{"data": [[0.0, 42.0], [0.1, 42.0], [0.2, 42.0], [0.3, 42.0], [0.4, 42.0], [0.5, 43.0], [0.6, 43.0], [0.7, 43.0], [0.8, 45.0], [0.9, 45.0], [1.0, 45.0], [1.1, 45.0], [1.2, 45.0], [1.3, 45.0], [1.4, 45.0], [1.5, 46.0], [1.6, 46.0], [1.7, 46.0], [1.8, 46.0], [1.9, 46.0], [2.0, 47.0], [2.1, 47.0], [2.2, 47.0], [2.3, 47.0], [2.4, 47.0], [2.5, 48.0], [2.6, 48.0], [2.7, 48.0], [2.8, 48.0], [2.9, 48.0], [3.0, 50.0], [3.1, 50.0], [3.2, 50.0], [3.3, 50.0], [3.4, 50.0], [3.5, 51.0], [3.6, 51.0], [3.7, 51.0], [3.8, 51.0], [3.9, 51.0], [4.0, 51.0], [4.1, 51.0], [4.2, 51.0], [4.3, 51.0], [4.4, 51.0], [4.5, 51.0], [4.6, 51.0], [4.7, 51.0], [4.8, 51.0], [4.9, 51.0], [5.0, 51.0], [5.1, 51.0], [5.2, 51.0], [5.3, 51.0], [5.4, 51.0], [5.5, 52.0], [5.6, 52.0], [5.7, 52.0], [5.8, 52.0], [5.9, 52.0], [6.0, 52.0], [6.1, 52.0], [6.2, 52.0], [6.3, 52.0], [6.4, 52.0], [6.5, 52.0], [6.6, 52.0], [6.7, 52.0], [6.8, 53.0], [6.9, 53.0], [7.0, 53.0], [7.1, 53.0], [7.2, 53.0], [7.3, 53.0], [7.4, 53.0], [7.5, 53.0], [7.6, 53.0], [7.7, 53.0], [7.8, 54.0], [7.9, 54.0], [8.0, 54.0], [8.1, 54.0], [8.2, 54.0], [8.3, 54.0], [8.4, 54.0], [8.5, 55.0], [8.6, 55.0], [8.7, 55.0], [8.8, 55.0], [8.9, 55.0], [9.0, 55.0], [9.1, 55.0], [9.2, 55.0], [9.3, 55.0], [9.4, 55.0], [9.5, 56.0], [9.6, 56.0], [9.7, 56.0], [9.8, 57.0], [9.9, 57.0], [10.0, 59.0], [10.1, 59.0], [10.2, 59.0], [10.3, 59.0], [10.4, 59.0], [10.5, 59.0], [10.6, 59.0], [10.7, 59.0], [10.8, 59.0], [10.9, 59.0], [11.0, 59.0], [11.1, 59.0], [11.2, 59.0], [11.3, 60.0], [11.4, 60.0], [11.5, 60.0], [11.6, 60.0], [11.7, 60.0], [11.8, 60.0], [11.9, 60.0], [12.0, 60.0], [12.1, 60.0], [12.2, 60.0], [12.3, 61.0], [12.4, 61.0], [12.5, 61.0], [12.6, 61.0], [12.7, 61.0], [12.8, 61.0], [12.9, 61.0], [13.0, 61.0], [13.1, 61.0], [13.2, 61.0], [13.3, 61.0], [13.4, 61.0], [13.5, 61.0], [13.6, 61.0], [13.7, 61.0], [13.8, 61.0], [13.9, 61.0], [14.0, 61.0], [14.1, 61.0], [14.2, 61.0], [14.3, 61.0], [14.4, 61.0], [14.5, 61.0], [14.6, 61.0], [14.7, 61.0], [14.8, 61.0], [14.9, 61.0], [15.0, 61.0], [15.1, 61.0], [15.2, 61.0], [15.3, 61.0], [15.4, 61.0], [15.5, 61.0], [15.6, 61.0], [15.7, 61.0], [15.8, 62.0], [15.9, 62.0], [16.0, 62.0], [16.1, 62.0], [16.2, 62.0], [16.3, 62.0], [16.4, 62.0], [16.5, 62.0], [16.6, 62.0], [16.7, 62.0], [16.8, 62.0], [16.9, 62.0], [17.0, 62.0], [17.1, 62.0], [17.2, 62.0], [17.3, 62.0], [17.4, 62.0], [17.5, 62.0], [17.6, 62.0], [17.7, 62.0], [17.8, 62.0], [17.9, 62.0], [18.0, 62.0], [18.1, 62.0], [18.2, 62.0], [18.3, 62.0], [18.4, 62.0], [18.5, 62.0], [18.6, 62.0], [18.7, 62.0], [18.8, 62.0], [18.9, 62.0], [19.0, 63.0], [19.1, 63.0], [19.2, 63.0], [19.3, 63.0], [19.4, 63.0], [19.5, 63.0], [19.6, 63.0], [19.7, 63.0], [19.8, 63.0], [19.9, 63.0], [20.0, 64.0], [20.1, 64.0], [20.2, 64.0], [20.3, 64.0], [20.4, 64.0], [20.5, 64.0], [20.6, 64.0], [20.7, 64.0], [20.8, 64.0], [20.9, 64.0], [21.0, 64.0], [21.1, 64.0], [21.2, 64.0], [21.3, 64.0], [21.4, 64.0], [21.5, 64.0], [21.6, 64.0], [21.7, 64.0], [21.8, 64.0], [21.9, 64.0], [22.0, 65.0], [22.1, 65.0], [22.2, 65.0], [22.3, 65.0], [22.4, 65.0], [22.5, 65.0], [22.6, 65.0], [22.7, 65.0], [22.8, 65.0], [22.9, 65.0], [23.0, 66.0], [23.1, 66.0], [23.2, 66.0], [23.3, 67.0], [23.4, 67.0], [23.5, 67.0], [23.6, 67.0], [23.7, 67.0], [23.8, 67.0], [23.9, 67.0], [24.0, 67.0], [24.1, 67.0], [24.2, 67.0], [24.3, 68.0], [24.4, 68.0], [24.5, 69.0], [24.6, 69.0], [24.7, 69.0], [24.8, 69.0], [24.9, 69.0], [25.0, 69.0], [25.1, 69.0], [25.2, 69.0], [25.3, 69.0], [25.4, 69.0], [25.5, 69.0], [25.6, 69.0], [25.7, 69.0], [25.8, 70.0], [25.9, 70.0], [26.0, 71.0], [26.1, 71.0], [26.2, 71.0], [26.3, 71.0], [26.4, 71.0], [26.5, 71.0], [26.6, 71.0], [26.7, 71.0], [26.8, 72.0], [26.9, 72.0], [27.0, 72.0], [27.1, 72.0], [27.2, 72.0], [27.3, 72.0], [27.4, 72.0], [27.5, 72.0], [27.6, 72.0], [27.7, 72.0], [27.8, 72.0], [27.9, 72.0], [28.0, 72.0], [28.1, 72.0], [28.2, 72.0], [28.3, 73.0], [28.4, 73.0], [28.5, 73.0], [28.6, 73.0], [28.7, 73.0], [28.8, 73.0], [28.9, 73.0], [29.0, 73.0], [29.1, 73.0], [29.2, 73.0], [29.3, 73.0], [29.4, 73.0], [29.5, 73.0], [29.6, 73.0], [29.7, 73.0], [29.8, 73.0], [29.9, 73.0], [30.0, 73.0], [30.1, 73.0], [30.2, 73.0], [30.3, 74.0], [30.4, 74.0], [30.5, 74.0], [30.6, 74.0], [30.7, 74.0], [30.8, 74.0], [30.9, 74.0], [31.0, 74.0], [31.1, 74.0], [31.2, 74.0], [31.3, 74.0], [31.4, 74.0], [31.5, 74.0], [31.6, 74.0], [31.7, 74.0], [31.8, 74.0], [31.9, 74.0], [32.0, 74.0], [32.1, 74.0], [32.2, 74.0], [32.3, 74.0], [32.4, 74.0], [32.5, 75.0], [32.6, 75.0], [32.7, 75.0], [32.8, 75.0], [32.9, 75.0], [33.0, 75.0], [33.1, 75.0], [33.2, 75.0], [33.3, 75.0], [33.4, 75.0], [33.5, 75.0], [33.6, 75.0], [33.7, 75.0], [33.8, 75.0], [33.9, 75.0], [34.0, 75.0], [34.1, 75.0], [34.2, 75.0], [34.3, 75.0], [34.4, 75.0], [34.5, 75.0], [34.6, 75.0], [34.7, 75.0], [34.8, 75.0], [34.9, 75.0], [35.0, 75.0], [35.1, 75.0], [35.2, 75.0], [35.3, 75.0], [35.4, 75.0], [35.5, 75.0], [35.6, 75.0], [35.7, 75.0], [35.8, 76.0], [35.9, 76.0], [36.0, 76.0], [36.1, 76.0], [36.2, 76.0], [36.3, 76.0], [36.4, 76.0], [36.5, 76.0], [36.6, 76.0], [36.7, 76.0], [36.8, 76.0], [36.9, 76.0], [37.0, 76.0], [37.1, 76.0], [37.2, 76.0], [37.3, 76.0], [37.4, 76.0], [37.5, 76.0], [37.6, 76.0], [37.7, 76.0], [37.8, 77.0], [37.9, 77.0], [38.0, 77.0], [38.1, 77.0], [38.2, 77.0], [38.3, 77.0], [38.4, 77.0], [38.5, 77.0], [38.6, 77.0], [38.7, 77.0], [38.8, 77.0], [38.9, 77.0], [39.0, 77.0], [39.1, 77.0], [39.2, 77.0], [39.3, 77.0], [39.4, 77.0], [39.5, 77.0], [39.6, 77.0], [39.7, 77.0], [39.8, 78.0], [39.9, 78.0], [40.0, 78.0], [40.1, 78.0], [40.2, 78.0], [40.3, 78.0], [40.4, 78.0], [40.5, 78.0], [40.6, 78.0], [40.7, 78.0], [40.8, 78.0], [40.9, 78.0], [41.0, 79.0], [41.1, 79.0], [41.2, 79.0], [41.3, 79.0], [41.4, 79.0], [41.5, 79.0], [41.6, 79.0], [41.7, 79.0], [41.8, 79.0], [41.9, 79.0], [42.0, 79.0], [42.1, 79.0], [42.2, 79.0], [42.3, 79.0], [42.4, 79.0], [42.5, 79.0], [42.6, 79.0], [42.7, 79.0], [42.8, 79.0], [42.9, 79.0], [43.0, 79.0], [43.1, 79.0], [43.2, 79.0], [43.3, 79.0], [43.4, 79.0], [43.5, 80.0], [43.6, 80.0], [43.7, 80.0], [43.8, 80.0], [43.9, 80.0], [44.0, 80.0], [44.1, 80.0], [44.2, 80.0], [44.3, 80.0], [44.4, 80.0], [44.5, 80.0], [44.6, 80.0], [44.7, 80.0], [44.8, 80.0], [44.9, 80.0], [45.0, 81.0], [45.1, 81.0], [45.2, 81.0], [45.3, 81.0], [45.4, 81.0], [45.5, 81.0], [45.6, 81.0], [45.7, 81.0], [45.8, 81.0], [45.9, 81.0], [46.0, 81.0], [46.1, 81.0], [46.2, 81.0], [46.3, 81.0], [46.4, 81.0], [46.5, 81.0], [46.6, 81.0], [46.7, 81.0], [46.8, 81.0], [46.9, 81.0], [47.0, 81.0], [47.1, 81.0], [47.2, 81.0], [47.3, 81.0], [47.4, 81.0], [47.5, 81.0], [47.6, 81.0], [47.7, 81.0], [47.8, 82.0], [47.9, 82.0], [48.0, 82.0], [48.1, 82.0], [48.2, 82.0], [48.3, 82.0], [48.4, 82.0], [48.5, 82.0], [48.6, 82.0], [48.7, 82.0], [48.8, 82.0], [48.9, 82.0], [49.0, 82.0], [49.1, 82.0], [49.2, 82.0], [49.3, 82.0], [49.4, 82.0], [49.5, 82.0], [49.6, 82.0], [49.7, 82.0], [49.8, 82.0], [49.9, 82.0], [50.0, 83.0], [50.1, 83.0], [50.2, 83.0], [50.3, 83.0], [50.4, 83.0], [50.5, 83.0], [50.6, 83.0], [50.7, 83.0], [50.8, 84.0], [50.9, 84.0], [51.0, 85.0], [51.1, 85.0], [51.2, 85.0], [51.3, 85.0], [51.4, 85.0], [51.5, 87.0], [51.6, 87.0], [51.7, 87.0], [51.8, 88.0], [51.9, 88.0], [52.0, 88.0], [52.1, 88.0], [52.2, 88.0], [52.3, 89.0], [52.4, 89.0], [52.5, 89.0], [52.6, 89.0], [52.7, 89.0], [52.8, 89.0], [52.9, 89.0], [53.0, 89.0], [53.1, 89.0], [53.2, 89.0], [53.3, 89.0], [53.4, 89.0], [53.5, 90.0], [53.6, 90.0], [53.7, 90.0], [53.8, 90.0], [53.9, 90.0], [54.0, 90.0], [54.1, 90.0], [54.2, 90.0], [54.3, 90.0], [54.4, 90.0], [54.5, 90.0], [54.6, 90.0], [54.7, 90.0], [54.8, 90.0], [54.9, 90.0], [55.0, 90.0], [55.1, 90.0], [55.2, 90.0], [55.3, 90.0], [55.4, 90.0], [55.5, 90.0], [55.6, 90.0], [55.7, 90.0], [55.8, 90.0], [55.9, 90.0], [56.0, 90.0], [56.1, 90.0], [56.2, 90.0], [56.3, 90.0], [56.4, 90.0], [56.5, 91.0], [56.6, 91.0], [56.7, 91.0], [56.8, 91.0], [56.9, 91.0], [57.0, 91.0], [57.1, 91.0], [57.2, 91.0], [57.3, 91.0], [57.4, 91.0], [57.5, 91.0], [57.6, 91.0], [57.7, 91.0], [57.8, 91.0], [57.9, 91.0], [58.0, 91.0], [58.1, 91.0], [58.2, 91.0], [58.3, 91.0], [58.4, 91.0], [58.5, 91.0], [58.6, 91.0], [58.7, 91.0], [58.8, 91.0], [58.9, 91.0], [59.0, 91.0], [59.1, 91.0], [59.2, 91.0], [59.3, 91.0], [59.4, 91.0], [59.5, 91.0], [59.6, 91.0], [59.7, 91.0], [59.8, 92.0], [59.9, 92.0], [60.0, 92.0], [60.1, 92.0], [60.2, 92.0], [60.3, 92.0], [60.4, 92.0], [60.5, 92.0], [60.6, 92.0], [60.7, 92.0], [60.8, 92.0], [60.9, 92.0], [61.0, 92.0], [61.1, 92.0], [61.2, 92.0], [61.3, 92.0], [61.4, 92.0], [61.5, 93.0], [61.6, 93.0], [61.7, 93.0], [61.8, 93.0], [61.9, 93.0], [62.0, 93.0], [62.1, 93.0], [62.2, 93.0], [62.3, 93.0], [62.4, 93.0], [62.5, 93.0], [62.6, 93.0], [62.7, 93.0], [62.8, 93.0], [62.9, 93.0], [63.0, 93.0], [63.1, 93.0], [63.2, 93.0], [63.3, 93.0], [63.4, 93.0], [63.5, 93.0], [63.6, 93.0], [63.7, 93.0], [63.8, 94.0], [63.9, 94.0], [64.0, 94.0], [64.1, 94.0], [64.2, 94.0], [64.3, 94.0], [64.4, 94.0], [64.5, 94.0], [64.6, 94.0], [64.7, 94.0], [64.8, 94.0], [64.9, 94.0], [65.0, 94.0], [65.1, 94.0], [65.2, 94.0], [65.3, 94.0], [65.4, 94.0], [65.5, 95.0], [65.6, 95.0], [65.7, 95.0], [65.8, 95.0], [65.9, 95.0], [66.0, 95.0], [66.1, 95.0], [66.2, 95.0], [66.3, 95.0], [66.4, 95.0], [66.5, 95.0], [66.6, 95.0], [66.7, 95.0], [66.8, 95.0], [66.9, 95.0], [67.0, 95.0], [67.1, 95.0], [67.2, 95.0], [67.3, 96.0], [67.4, 96.0], [67.5, 96.0], [67.6, 96.0], [67.7, 96.0], [67.8, 96.0], [67.9, 96.0], [68.0, 96.0], [68.1, 96.0], [68.2, 96.0], [68.3, 96.0], [68.4, 96.0], [68.5, 97.0], [68.6, 97.0], [68.7, 97.0], [68.8, 97.0], [68.9, 97.0], [69.0, 97.0], [69.1, 97.0], [69.2, 97.0], [69.3, 98.0], [69.4, 98.0], [69.5, 98.0], [69.6, 98.0], [69.7, 98.0], [69.8, 99.0], [69.9, 99.0], [70.0, 99.0], [70.1, 99.0], [70.2, 99.0], [70.3, 100.0], [70.4, 100.0], [70.5, 100.0], [70.6, 100.0], [70.7, 100.0], [70.8, 101.0], [70.9, 101.0], [71.0, 101.0], [71.1, 101.0], [71.2, 101.0], [71.3, 101.0], [71.4, 101.0], [71.5, 101.0], [71.6, 101.0], [71.7, 101.0], [71.8, 102.0], [71.9, 102.0], [72.0, 102.0], [72.1, 102.0], [72.2, 102.0], [72.3, 102.0], [72.4, 102.0], [72.5, 102.0], [72.6, 102.0], [72.7, 102.0], [72.8, 102.0], [72.9, 102.0], [73.0, 102.0], [73.1, 102.0], [73.2, 102.0], [73.3, 103.0], [73.4, 103.0], [73.5, 103.0], [73.6, 103.0], [73.7, 103.0], [73.8, 103.0], [73.9, 103.0], [74.0, 103.0], [74.1, 103.0], [74.2, 103.0], [74.3, 103.0], [74.4, 103.0], [74.5, 103.0], [74.6, 103.0], [74.7, 103.0], [74.8, 103.0], [74.9, 103.0], [75.0, 104.0], [75.1, 104.0], [75.2, 104.0], [75.3, 104.0], [75.4, 104.0], [75.5, 104.0], [75.6, 104.0], [75.7, 104.0], [75.8, 104.0], [75.9, 104.0], [76.0, 104.0], [76.1, 104.0], [76.2, 104.0], [76.3, 104.0], [76.4, 104.0], [76.5, 105.0], [76.6, 105.0], [76.7, 105.0], [76.8, 105.0], [76.9, 105.0], [77.0, 105.0], [77.1, 105.0], [77.2, 105.0], [77.3, 105.0], [77.4, 105.0], [77.5, 105.0], [77.6, 105.0], [77.7, 105.0], [77.8, 105.0], [77.9, 105.0], [78.0, 105.0], [78.1, 105.0], [78.2, 105.0], [78.3, 105.0], [78.4, 105.0], [78.5, 106.0], [78.6, 106.0], [78.7, 106.0], [78.8, 106.0], [78.9, 106.0], [79.0, 106.0], [79.1, 106.0], [79.2, 106.0], [79.3, 106.0], [79.4, 106.0], [79.5, 106.0], [79.6, 106.0], [79.7, 106.0], [79.8, 106.0], [79.9, 106.0], [80.0, 106.0], [80.1, 106.0], [80.2, 106.0], [80.3, 106.0], [80.4, 106.0], [80.5, 106.0], [80.6, 106.0], [80.7, 106.0], [80.8, 106.0], [80.9, 106.0], [81.0, 107.0], [81.1, 107.0], [81.2, 107.0], [81.3, 107.0], [81.4, 107.0], [81.5, 107.0], [81.6, 107.0], [81.7, 107.0], [81.8, 107.0], [81.9, 107.0], [82.0, 107.0], [82.1, 107.0], [82.2, 107.0], [82.3, 107.0], [82.4, 107.0], [82.5, 107.0], [82.6, 107.0], [82.7, 107.0], [82.8, 107.0], [82.9, 107.0], [83.0, 108.0], [83.1, 108.0], [83.2, 108.0], [83.3, 108.0], [83.4, 108.0], [83.5, 108.0], [83.6, 108.0], [83.7, 108.0], [83.8, 108.0], [83.9, 108.0], [84.0, 108.0], [84.1, 108.0], [84.2, 108.0], [84.3, 109.0], [84.4, 109.0], [84.5, 109.0], [84.6, 109.0], [84.7, 109.0], [84.8, 109.0], [84.9, 109.0], [85.0, 111.0], [85.1, 111.0], [85.2, 111.0], [85.3, 112.0], [85.4, 112.0], [85.5, 112.0], [85.6, 112.0], [85.7, 112.0], [85.8, 113.0], [85.9, 113.0], [86.0, 113.0], [86.1, 113.0], [86.2, 113.0], [86.3, 120.0], [86.4, 120.0], [86.5, 121.0], [86.6, 121.0], [86.7, 121.0], [86.8, 121.0], [86.9, 121.0], [87.0, 122.0], [87.1, 122.0], [87.2, 122.0], [87.3, 122.0], [87.4, 122.0], [87.5, 122.0], [87.6, 122.0], [87.7, 122.0], [87.8, 122.0], [87.9, 122.0], [88.0, 122.0], [88.1, 122.0], [88.2, 122.0], [88.3, 122.0], [88.4, 122.0], [88.5, 122.0], [88.6, 122.0], [88.7, 122.0], [88.8, 122.0], [88.9, 122.0], [89.0, 123.0], [89.1, 123.0], [89.2, 123.0], [89.3, 125.0], [89.4, 125.0], [89.5, 125.0], [89.6, 125.0], [89.7, 125.0], [89.8, 125.0], [89.9, 125.0], [90.0, 128.0], [90.1, 128.0], [90.2, 128.0], [90.3, 131.0], [90.4, 131.0], [90.5, 134.0], [90.6, 134.0], [90.7, 134.0], [90.8, 135.0], [90.9, 135.0], [91.0, 135.0], [91.1, 135.0], [91.2, 135.0], [91.3, 135.0], [91.4, 135.0], [91.5, 135.0], [91.6, 135.0], [91.7, 135.0], [91.8, 135.0], [91.9, 135.0], [92.0, 135.0], [92.1, 135.0], [92.2, 135.0], [92.3, 136.0], [92.4, 136.0], [92.5, 136.0], [92.6, 136.0], [92.7, 136.0], [92.8, 1069.0], [92.9, 1069.0], [93.0, 1069.0], [93.1, 1069.0], [93.2, 1069.0], [93.3, 1070.0], [93.4, 1070.0], [93.5, 1070.0], [93.6, 1070.0], [93.7, 1070.0], [93.8, 1070.0], [93.9, 1070.0], [94.0, 1071.0], [94.1, 1071.0], [94.2, 1071.0], [94.3, 1074.0], [94.4, 1074.0], [94.5, 1075.0], [94.6, 1075.0], [94.7, 1075.0], [94.8, 1075.0], [94.9, 1075.0], [95.0, 1076.0], [95.1, 1076.0], [95.2, 1076.0], [95.3, 1077.0], [95.4, 1077.0], [95.5, 1077.0], [95.6, 1077.0], [95.7, 1077.0], [95.8, 1077.0], [95.9, 1077.0], [96.0, 1078.0], [96.1, 1078.0], [96.2, 1078.0], [96.3, 1078.0], [96.4, 1078.0], [96.5, 1079.0], [96.6, 1079.0], [96.7, 1079.0], [96.8, 1079.0], [96.9, 1079.0], [97.0, 1079.0], [97.1, 1079.0], [97.2, 1079.0], [97.3, 1080.0], [97.4, 1080.0], [97.5, 1080.0], [97.6, 1080.0], [97.7, 1080.0], [97.8, 1080.0], [97.9, 1080.0], [98.0, 1080.0], [98.1, 1080.0], [98.2, 1080.0], [98.3, 1080.0], [98.4, 1080.0], [98.5, 1081.0], [98.6, 1081.0], [98.7, 1081.0], [98.8, 1082.0], [98.9, 1082.0], [99.0, 1092.0], [99.1, 1092.0], [99.2, 1092.0], [99.3, 1093.0], [99.4, 1093.0], [99.5, 1094.0], [99.6, 1094.0], [99.7, 1094.0], [99.8, 2155.0], [99.9, 2155.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[0.0, 62338.0], [0.1, 62338.0], [0.2, 62338.0], [0.3, 62340.0], [0.4, 62340.0], [0.5, 62341.0], [0.6, 62341.0], [0.7, 62341.0], [0.8, 62341.0], [0.9, 62341.0], [1.0, 62341.0], [1.1, 62341.0], [1.2, 62341.0], [1.3, 62343.0], [1.4, 62343.0], [1.5, 62343.0], [1.6, 62343.0], [1.7, 62343.0], [1.8, 62355.0], [1.9, 62355.0], [2.0, 62355.0], [2.1, 62355.0], [2.2, 62355.0], [2.3, 62355.0], [2.4, 62355.0], [2.5, 62360.0], [2.6, 62360.0], [2.7, 62360.0], [2.8, 62360.0], [2.9, 62360.0], [3.0, 62361.0], [3.1, 62361.0], [3.2, 62361.0], [3.3, 62361.0], [3.4, 62361.0], [3.5, 62362.0], [3.6, 62362.0], [3.7, 62362.0], [3.8, 62362.0], [3.9, 62362.0], [4.0, 62362.0], [4.1, 62362.0], [4.2, 62362.0], [4.3, 62362.0], [4.4, 62362.0], [4.5, 62362.0], [4.6, 62362.0], [4.7, 62362.0], [4.8, 62363.0], [4.9, 62363.0], [5.0, 62366.0], [5.1, 62366.0], [5.2, 62366.0], [5.3, 62366.0], [5.4, 62366.0], [5.5, 62366.0], [5.6, 62366.0], [5.7, 62366.0], [5.8, 62366.0], [5.9, 62366.0], [6.0, 62367.0], [6.1, 62367.0], [6.2, 62367.0], [6.3, 62367.0], [6.4, 62367.0], [6.5, 62367.0], [6.6, 62367.0], [6.7, 62367.0], [6.8, 62367.0], [6.9, 62367.0], [7.0, 62368.0], [7.1, 62368.0], [7.2, 62368.0], [7.3, 62368.0], [7.4, 62368.0], [7.5, 62368.0], [7.6, 62368.0], [7.7, 62368.0], [7.8, 62369.0], [7.9, 62369.0], [8.0, 62369.0], [8.1, 62369.0], [8.2, 62369.0], [8.3, 62370.0], [8.4, 62370.0], [8.5, 62370.0], [8.6, 62370.0], [8.7, 62370.0], [8.8, 62370.0], [8.9, 62370.0], [9.0, 62371.0], [9.1, 62371.0], [9.2, 62371.0], [9.3, 62371.0], [9.4, 62371.0], [9.5, 62371.0], [9.6, 62371.0], [9.7, 62371.0], [9.8, 62372.0], [9.9, 62372.0], [10.0, 62373.0], [10.1, 62373.0], [10.2, 62373.0], [10.3, 62373.0], [10.4, 62373.0], [10.5, 62373.0], [10.6, 62373.0], [10.7, 62373.0], [10.8, 62373.0], [10.9, 62373.0], [11.0, 62373.0], [11.1, 62373.0], [11.2, 62373.0], [11.3, 62373.0], [11.4, 62373.0], [11.5, 62373.0], [11.6, 62373.0], [11.7, 62373.0], [11.8, 62417.0], [11.9, 62417.0], [12.0, 62417.0], [12.1, 62417.0], [12.2, 62417.0], [12.3, 62417.0], [12.4, 62417.0], [12.5, 62418.0], [12.6, 62418.0], [12.7, 62418.0], [12.8, 62418.0], [12.9, 62418.0], [13.0, 62418.0], [13.1, 62418.0], [13.2, 62418.0], [13.3, 62418.0], [13.4, 62418.0], [13.5, 62419.0], [13.6, 62419.0], [13.7, 62419.0], [13.8, 62421.0], [13.9, 62421.0], [14.0, 62427.0], [14.1, 62427.0], [14.2, 62427.0], [14.3, 62452.0], [14.4, 62452.0], [14.5, 62453.0], [14.6, 62453.0], [14.7, 62453.0], [14.8, 62453.0], [14.9, 62453.0], [15.0, 62454.0], [15.1, 62454.0], [15.2, 62454.0], [15.3, 62454.0], [15.4, 62454.0], [15.5, 62454.0], [15.6, 62454.0], [15.7, 62454.0], [15.8, 62455.0], [15.9, 62455.0], [16.0, 62455.0], [16.1, 62455.0], [16.2, 62455.0], [16.3, 62455.0], [16.4, 62455.0], [16.5, 62455.0], [16.6, 62455.0], [16.7, 62455.0], [16.8, 62458.0], [16.9, 62458.0], [17.0, 62458.0], [17.1, 62458.0], [17.2, 62458.0], [17.3, 62458.0], [17.4, 62458.0], [17.5, 62458.0], [17.6, 62458.0], [17.7, 62458.0], [17.8, 62459.0], [17.9, 62459.0], [18.0, 62459.0], [18.1, 62459.0], [18.2, 62459.0], [18.3, 62459.0], [18.4, 62459.0], [18.5, 62459.0], [18.6, 62459.0], [18.7, 62459.0], [18.8, 62459.0], [18.9, 62459.0], [19.0, 62463.0], [19.1, 62463.0], [19.2, 62463.0], [19.3, 62467.0], [19.4, 62467.0], [19.5, 62469.0], [19.6, 62469.0], [19.7, 62469.0], [19.8, 62477.0], [19.9, 62477.0], [20.0, 62477.0], [20.1, 62477.0], [20.2, 62477.0], [20.3, 62478.0], [20.4, 62478.0], [20.5, 62478.0], [20.6, 62478.0], [20.7, 62478.0], [20.8, 62479.0], [20.9, 62479.0], [21.0, 62480.0], [21.1, 62480.0], [21.2, 62480.0], [21.3, 62480.0], [21.4, 62480.0], [21.5, 62480.0], [21.6, 62480.0], [21.7, 62480.0], [21.8, 62480.0], [21.9, 62480.0], [22.0, 62480.0], [22.1, 62480.0], [22.2, 62480.0], [22.3, 62480.0], [22.4, 62480.0], [22.5, 62482.0], [22.6, 62482.0], [22.7, 62482.0], [22.8, 62482.0], [22.9, 62482.0], [23.0, 62483.0], [23.1, 62483.0], [23.2, 62483.0], [23.3, 62483.0], [23.4, 62483.0], [23.5, 62483.0], [23.6, 62483.0], [23.7, 62483.0], [23.8, 62483.0], [23.9, 62483.0], [24.0, 62483.0], [24.1, 62483.0], [24.2, 62483.0], [24.3, 62511.0], [24.4, 62511.0], [24.5, 62514.0], [24.6, 62514.0], [24.7, 62514.0], [24.8, 62515.0], [24.9, 62515.0], [25.0, 62516.0], [25.1, 62516.0], [25.2, 62516.0], [25.3, 62516.0], [25.4, 62516.0], [25.5, 62520.0], [25.6, 62520.0], [25.7, 62520.0], [25.8, 62522.0], [25.9, 62522.0], [26.0, 62522.0], [26.1, 62522.0], [26.2, 62522.0], [26.3, 62523.0], [26.4, 62523.0], [26.5, 62530.0], [26.6, 62530.0], [26.7, 62530.0], [26.8, 62549.0], [26.9, 62549.0], [27.0, 62551.0], [27.1, 62551.0], [27.2, 62551.0], [27.3, 62551.0], [27.4, 62551.0], [27.5, 62551.0], [27.6, 62551.0], [27.7, 62551.0], [27.8, 62552.0], [27.9, 62552.0], [28.0, 62552.0], [28.1, 62552.0], [28.2, 62552.0], [28.3, 62554.0], [28.4, 62554.0], [28.5, 62554.0], [28.6, 62554.0], [28.7, 62554.0], [28.8, 62555.0], [28.9, 62555.0], [29.0, 62555.0], [29.1, 62555.0], [29.2, 62555.0], [29.3, 62559.0], [29.4, 62559.0], [29.5, 62559.0], [29.6, 62559.0], [29.7, 62559.0], [29.8, 62560.0], [29.9, 62560.0], [30.0, 62560.0], [30.1, 62560.0], [30.2, 62560.0], [30.3, 62561.0], [30.4, 62561.0], [30.5, 62566.0], [30.6, 62566.0], [30.7, 62566.0], [30.8, 62568.0], [30.9, 62568.0], [31.0, 62568.0], [31.1, 62568.0], [31.2, 62568.0], [31.3, 62570.0], [31.4, 62570.0], [31.5, 62570.0], [31.6, 62570.0], [31.7, 62570.0], [31.8, 62571.0], [31.9, 62571.0], [32.0, 62571.0], [32.1, 62571.0], [32.2, 62571.0], [32.3, 62572.0], [32.4, 62572.0], [32.5, 62573.0], [32.6, 62573.0], [32.7, 62573.0], [32.8, 62573.0], [32.9, 62573.0], [33.0, 62573.0], [33.1, 62573.0], [33.2, 62573.0], [33.3, 62573.0], [33.4, 62573.0], [33.5, 62597.0], [33.6, 62597.0], [33.7, 62597.0], [33.8, 62598.0], [33.9, 62598.0], [34.0, 62598.0], [34.1, 62598.0], [34.2, 62598.0], [34.3, 62598.0], [34.4, 62598.0], [34.5, 62599.0], [34.6, 62599.0], [34.7, 62599.0], [34.8, 62599.0], [34.9, 62599.0], [35.0, 62600.0], [35.1, 62600.0], [35.2, 62600.0], [35.3, 62600.0], [35.4, 62600.0], [35.5, 62600.0], [35.6, 62600.0], [35.7, 62600.0], [35.8, 62600.0], [35.9, 62600.0], [36.0, 62600.0], [36.1, 62600.0], [36.2, 62600.0], [36.3, 62601.0], [36.4, 62601.0], [36.5, 62601.0], [36.6, 62601.0], [36.7, 62601.0], [36.8, 62601.0], [36.9, 62601.0], [37.0, 62602.0], [37.1, 62602.0], [37.2, 62602.0], [37.3, 62602.0], [37.4, 62602.0], [37.5, 62602.0], [37.6, 62602.0], [37.7, 62602.0], [37.8, 62602.0], [37.9, 62602.0], [38.0, 62603.0], [38.1, 62603.0], [38.2, 62603.0], [38.3, 62603.0], [38.4, 62603.0], [38.5, 62605.0], [38.6, 62605.0], [38.7, 62605.0], [38.8, 62621.0], [38.9, 62621.0], [39.0, 62621.0], [39.1, 62621.0], [39.2, 62621.0], [39.3, 62622.0], [39.4, 62622.0], [39.5, 62622.0], [39.6, 62622.0], [39.7, 62622.0], [39.8, 62624.0], [39.9, 62624.0], [40.0, 62624.0], [40.1, 62624.0], [40.2, 62624.0], [40.3, 62625.0], [40.4, 62625.0], [40.5, 62625.0], [40.6, 62625.0], [40.7, 62625.0], [40.8, 62625.0], [40.9, 62625.0], [41.0, 62637.0], [41.1, 62637.0], [41.2, 62637.0], [41.3, 62638.0], [41.4, 62638.0], [41.5, 62638.0], [41.6, 62638.0], [41.7, 62638.0], [41.8, 62638.0], [41.9, 62638.0], [42.0, 62638.0], [42.1, 62638.0], [42.2, 62638.0], [42.3, 62639.0], [42.4, 62639.0], [42.5, 62639.0], [42.6, 62639.0], [42.7, 62639.0], [42.8, 62639.0], [42.9, 62639.0], [43.0, 62639.0], [43.1, 62639.0], [43.2, 62639.0], [43.3, 62639.0], [43.4, 62639.0], [43.5, 62640.0], [43.6, 62640.0], [43.7, 62640.0], [43.8, 62647.0], [43.9, 62647.0], [44.0, 62648.0], [44.1, 62648.0], [44.2, 62648.0], [44.3, 62648.0], [44.4, 62648.0], [44.5, 62649.0], [44.6, 62649.0], [44.7, 62649.0], [44.8, 62649.0], [44.9, 62649.0], [45.0, 62651.0], [45.1, 62651.0], [45.2, 62651.0], [45.3, 62659.0], [45.4, 62659.0], [45.5, 62660.0], [45.6, 62660.0], [45.7, 62660.0], [45.8, 62660.0], [45.9, 62660.0], [46.0, 62660.0], [46.1, 62660.0], [46.2, 62660.0], [46.3, 62660.0], [46.4, 62660.0], [46.5, 62660.0], [46.6, 62660.0], [46.7, 62660.0], [46.8, 62661.0], [46.9, 62661.0], [47.0, 62661.0], [47.1, 62661.0], [47.2, 62661.0], [47.3, 62661.0], [47.4, 62661.0], [47.5, 62661.0], [47.6, 62661.0], [47.7, 62661.0], [47.8, 62661.0], [47.9, 62661.0], [48.0, 62662.0], [48.1, 62662.0], [48.2, 62662.0], [48.3, 62683.0], [48.4, 62683.0], [48.5, 62683.0], [48.6, 62683.0], [48.7, 62683.0], [48.8, 62683.0], [48.9, 62683.0], [49.0, 62683.0], [49.1, 62683.0], [49.2, 62683.0], [49.3, 62694.0], [49.4, 62694.0], [49.5, 63884.0], [49.6, 63884.0], [49.7, 63884.0], [49.8, 63885.0], [49.9, 63885.0], [50.0, 63885.0], [50.1, 63885.0], [50.2, 63885.0], [50.3, 63886.0], [50.4, 63886.0], [50.5, 63887.0], [50.6, 63887.0], [50.7, 63887.0], [50.8, 63887.0], [50.9, 63887.0], [51.0, 63887.0], [51.1, 63887.0], [51.2, 63887.0], [51.3, 63888.0], [51.4, 63888.0], [51.5, 63888.0], [51.6, 63888.0], [51.7, 63888.0], [51.8, 63888.0], [51.9, 63888.0], [52.0, 63889.0], [52.1, 63889.0], [52.2, 63889.0], [52.3, 63889.0], [52.4, 63889.0], [52.5, 63890.0], [52.6, 63890.0], [52.7, 63890.0], [52.8, 63891.0], [52.9, 63891.0], [53.0, 63892.0], [53.1, 63892.0], [53.2, 63892.0], [53.3, 63892.0], [53.4, 63892.0], [53.5, 63893.0], [53.6, 63893.0], [53.7, 63893.0], [53.8, 63896.0], [53.9, 63896.0], [54.0, 63928.0], [54.1, 63928.0], [54.2, 63928.0], [54.3, 72040.0], [54.4, 72040.0], [54.5, 72040.0], [54.6, 72040.0], [54.7, 72040.0], [54.8, 72041.0], [54.9, 72041.0], [55.0, 72042.0], [55.1, 72042.0], [55.2, 72042.0], [55.3, 72042.0], [55.4, 72042.0], [55.5, 72042.0], [55.6, 72042.0], [55.7, 72042.0], [55.8, 72043.0], [55.9, 72043.0], [56.0, 72043.0], [56.1, 72043.0], [56.2, 72043.0], [56.3, 72043.0], [56.4, 72043.0], [56.5, 72047.0], [56.6, 72047.0], [56.7, 72047.0], [56.8, 73053.0], [56.9, 73053.0], [57.0, 73054.0], [57.1, 73054.0], [57.2, 73054.0], [57.3, 73055.0], [57.4, 73055.0], [57.5, 73055.0], [57.6, 73055.0], [57.7, 73055.0], [57.8, 73056.0], [57.9, 73056.0], [58.0, 73060.0], [58.1, 73060.0], [58.2, 73060.0], [58.3, 73329.0], [58.4, 73329.0], [58.5, 73329.0], [58.6, 73329.0], [58.7, 73329.0], [58.8, 73330.0], [58.9, 73330.0], [59.0, 73330.0], [59.1, 73330.0], [59.2, 73330.0], [59.3, 73343.0], [59.4, 73343.0], [59.5, 73343.0], [59.6, 73343.0], [59.7, 73343.0], [59.8, 73343.0], [59.9, 73343.0], [60.0, 73343.0], [60.1, 73343.0], [60.2, 73343.0], [60.3, 73343.0], [60.4, 73343.0], [60.5, 73344.0], [60.6, 73344.0], [60.7, 73344.0], [60.8, 73345.0], [60.9, 73345.0], [61.0, 73346.0], [61.1, 73346.0], [61.2, 73346.0], [61.3, 73347.0], [61.4, 73347.0], [61.5, 73353.0], [61.6, 73353.0], [61.7, 73353.0], [61.8, 73356.0], [61.9, 73356.0], [62.0, 73358.0], [62.1, 73358.0], [62.2, 73358.0], [62.3, 73359.0], [62.4, 73359.0], [62.5, 73360.0], [62.6, 73360.0], [62.7, 73360.0], [62.8, 73360.0], [62.9, 73360.0], [63.0, 73360.0], [63.1, 73360.0], [63.2, 73360.0], [63.3, 73368.0], [63.4, 73368.0], [63.5, 73369.0], [63.6, 73369.0], [63.7, 73369.0], [63.8, 73369.0], [63.9, 73369.0], [64.0, 73372.0], [64.1, 73372.0], [64.2, 73372.0], [64.3, 73375.0], [64.4, 73375.0], [64.5, 73376.0], [64.6, 73376.0], [64.7, 73376.0], [64.8, 73378.0], [64.9, 73378.0], [65.0, 73378.0], [65.1, 73378.0], [65.2, 73378.0], [65.3, 73380.0], [65.4, 73380.0], [65.5, 73385.0], [65.6, 73385.0], [65.7, 73385.0], [65.8, 73394.0], [65.9, 73394.0], [66.0, 73395.0], [66.1, 73395.0], [66.2, 73395.0], [66.3, 73396.0], [66.4, 73396.0], [66.5, 73396.0], [66.6, 73396.0], [66.7, 73396.0], [66.8, 73397.0], [66.9, 73397.0], [67.0, 73404.0], [67.1, 73404.0], [67.2, 73404.0], [67.3, 73404.0], [67.4, 73404.0], [67.5, 73404.0], [67.6, 73404.0], [67.7, 73404.0], [67.8, 73404.0], [67.9, 73404.0], [68.0, 73405.0], [68.1, 73405.0], [68.2, 73405.0], [68.3, 73406.0], [68.4, 73406.0], [68.5, 73406.0], [68.6, 73406.0], [68.7, 73406.0], [68.8, 73408.0], [68.9, 73408.0], [69.0, 73409.0], [69.1, 73409.0], [69.2, 73409.0], [69.3, 73410.0], [69.4, 73410.0], [69.5, 73415.0], [69.6, 73415.0], [69.7, 73415.0], [69.8, 73415.0], [69.9, 73415.0], [70.0, 73416.0], [70.1, 73416.0], [70.2, 73416.0], [70.3, 73428.0], [70.4, 73428.0], [70.5, 73428.0], [70.6, 73428.0], [70.7, 73428.0], [70.8, 73429.0], [70.9, 73429.0], [71.0, 73429.0], [71.1, 73429.0], [71.2, 73429.0], [71.3, 73430.0], [71.4, 73430.0], [71.5, 73432.0], [71.6, 73432.0], [71.7, 73432.0], [71.8, 73433.0], [71.9, 73433.0], [72.0, 73433.0], [72.1, 73433.0], [72.2, 73433.0], [72.3, 73433.0], [72.4, 73433.0], [72.5, 73434.0], [72.6, 73434.0], [72.7, 73434.0], [72.8, 73434.0], [72.9, 73434.0], [73.0, 73434.0], [73.1, 73434.0], [73.2, 73434.0], [73.3, 73435.0], [73.4, 73435.0], [73.5, 73435.0], [73.6, 73435.0], [73.7, 73435.0], [73.8, 73435.0], [73.9, 73435.0], [74.0, 73435.0], [74.1, 73435.0], [74.2, 73435.0], [74.3, 73435.0], [74.4, 73435.0], [74.5, 73436.0], [74.6, 73436.0], [74.7, 73436.0], [74.8, 73436.0], [74.9, 73436.0], [75.0, 73436.0], [75.1, 73436.0], [75.2, 73436.0], [75.3, 73436.0], [75.4, 73436.0], [75.5, 73438.0], [75.6, 73438.0], [75.7, 73438.0], [75.8, 73438.0], [75.9, 73438.0], [76.0, 73440.0], [76.1, 73440.0], [76.2, 73440.0], [76.3, 73440.0], [76.4, 73440.0], [76.5, 73441.0], [76.6, 73441.0], [76.7, 73441.0], [76.8, 73441.0], [76.9, 73441.0], [77.0, 73441.0], [77.1, 73441.0], [77.2, 73441.0], [77.3, 73441.0], [77.4, 73441.0], [77.5, 73441.0], [77.6, 73441.0], [77.7, 73441.0], [77.8, 73441.0], [77.9, 73441.0], [78.0, 73441.0], [78.1, 73441.0], [78.2, 73441.0], [78.3, 73442.0], [78.4, 73442.0], [78.5, 73442.0], [78.6, 73442.0], [78.7, 73442.0], [78.8, 73442.0], [78.9, 73442.0], [79.0, 73443.0], [79.1, 73443.0], [79.2, 73443.0], [79.3, 73443.0], [79.4, 73443.0], [79.5, 73445.0], [79.6, 73445.0], [79.7, 73445.0], [79.8, 73445.0], [79.9, 73445.0], [80.0, 73446.0], [80.1, 73446.0], [80.2, 73446.0], [80.3, 73446.0], [80.4, 73446.0], [80.5, 73447.0], [80.6, 73447.0], [80.7, 73447.0], [80.8, 73447.0], [80.9, 73447.0], [81.0, 73447.0], [81.1, 73447.0], [81.2, 73447.0], [81.3, 73448.0], [81.4, 73448.0], [81.5, 73450.0], [81.6, 73450.0], [81.7, 73450.0], [81.8, 73450.0], [81.9, 73450.0], [82.0, 73450.0], [82.1, 73450.0], [82.2, 73450.0], [82.3, 73451.0], [82.4, 73451.0], [82.5, 73451.0], [82.6, 73451.0], [82.7, 73451.0], [82.8, 73452.0], [82.9, 73452.0], [83.0, 73453.0], [83.1, 73453.0], [83.2, 73453.0], [83.3, 73454.0], [83.4, 73454.0], [83.5, 73454.0], [83.6, 73454.0], [83.7, 73454.0], [83.8, 73454.0], [83.9, 73454.0], [84.0, 73454.0], [84.1, 73454.0], [84.2, 73454.0], [84.3, 73455.0], [84.4, 73455.0], [84.5, 73455.0], [84.6, 73455.0], [84.7, 73455.0], [84.8, 73459.0], [84.9, 73459.0], [85.0, 73459.0], [85.1, 73459.0], [85.2, 73459.0], [85.3, 73459.0], [85.4, 73459.0], [85.5, 73462.0], [85.6, 73462.0], [85.7, 73462.0], [85.8, 73463.0], [85.9, 73463.0], [86.0, 73463.0], [86.1, 73463.0], [86.2, 73463.0], [86.3, 73463.0], [86.4, 73463.0], [86.5, 73463.0], [86.6, 73463.0], [86.7, 73463.0], [86.8, 73464.0], [86.9, 73464.0], [87.0, 73465.0], [87.1, 73465.0], [87.2, 73465.0], [87.3, 73466.0], [87.4, 73466.0], [87.5, 73467.0], [87.6, 73467.0], [87.7, 73467.0], [87.8, 73468.0], [87.9, 73468.0], [88.0, 73469.0], [88.1, 73469.0], [88.2, 73469.0], [88.3, 73469.0], [88.4, 73469.0], [88.5, 73469.0], [88.6, 73469.0], [88.7, 73469.0], [88.8, 73470.0], [88.9, 73470.0], [89.0, 73479.0], [89.1, 73479.0], [89.2, 73479.0], [89.3, 73479.0], [89.4, 73479.0], [89.5, 73479.0], [89.6, 73479.0], [89.7, 73479.0], [89.8, 73479.0], [89.9, 73479.0], [90.0, 73481.0], [90.1, 73481.0], [90.2, 73481.0], [90.3, 73481.0], [90.4, 73481.0], [90.5, 73483.0], [90.6, 73483.0], [90.7, 73483.0], [90.8, 73483.0], [90.9, 73483.0], [91.0, 73486.0], [91.1, 73486.0], [91.2, 73486.0], [91.3, 73488.0], [91.4, 73488.0], [91.5, 73488.0], [91.6, 73488.0], [91.7, 73488.0], [91.8, 73489.0], [91.9, 73489.0], [92.0, 73492.0], [92.1, 73492.0], [92.2, 73492.0], [92.3, 73493.0], [92.4, 73493.0], [92.5, 73494.0], [92.6, 73494.0], [92.7, 73494.0], [92.8, 73494.0], [92.9, 73494.0], [93.0, 73494.0], [93.1, 73494.0], [93.2, 73494.0], [93.3, 73501.0], [93.4, 73501.0], [93.5, 73502.0], [93.6, 73502.0], [93.7, 73502.0], [93.8, 73502.0], [93.9, 73502.0], [94.0, 73502.0], [94.1, 73502.0], [94.2, 73502.0], [94.3, 73503.0], [94.4, 73503.0], [94.5, 73503.0], [94.6, 73503.0], [94.7, 73503.0], [94.8, 73503.0], [94.9, 73503.0], [95.0, 73504.0], [95.1, 73504.0], [95.2, 73504.0], [95.3, 73504.0], [95.4, 73504.0], [95.5, 73505.0], [95.6, 73505.0], [95.7, 73505.0], [95.8, 73505.0], [95.9, 73505.0], [96.0, 73505.0], [96.1, 73505.0], [96.2, 73505.0], [96.3, 73505.0], [96.4, 73505.0], [96.5, 73506.0], [96.6, 73506.0], [96.7, 73506.0], [96.8, 73506.0], [96.9, 73506.0], [97.0, 73508.0], [97.1, 73508.0], [97.2, 73508.0], [97.3, 73508.0], [97.4, 73508.0], [97.5, 73522.0], [97.6, 73522.0], [97.7, 73522.0], [97.8, 73523.0], [97.9, 73523.0], [98.0, 73524.0], [98.1, 73524.0], [98.2, 73524.0], [98.3, 73524.0], [98.4, 73524.0], [98.5, 73533.0], [98.6, 73533.0], [98.7, 73533.0], [98.8, 73533.0], [98.9, 73533.0], [99.0, 73534.0], [99.1, 73534.0], [99.2, 73534.0], [99.3, 120160.0], [99.4, 120160.0], [99.5, 120164.0], [99.6, 120164.0], [99.7, 120164.0], [99.8, 120164.0], [99.9, 120164.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[0.0, 94.0], [0.1, 94.0], [0.2, 94.0], [0.3, 94.0], [0.4, 94.0], [0.5, 97.0], [0.6, 97.0], [0.7, 97.0], [0.8, 97.0], [0.9, 97.0], [1.0, 99.0], [1.1, 99.0], [1.2, 99.0], [1.3, 100.0], [1.4, 100.0], [1.5, 102.0], [1.6, 102.0], [1.7, 102.0], [1.8, 102.0], [1.9, 102.0], [2.0, 103.0], [2.1, 103.0], [2.2, 103.0], [2.3, 106.0], [2.4, 106.0], [2.5, 108.0], [2.6, 108.0], [2.7, 108.0], [2.8, 108.0], [2.9, 108.0], [3.0, 112.0], [3.1, 112.0], [3.2, 112.0], [3.3, 112.0], [3.4, 112.0], [3.5, 114.0], [3.6, 114.0], [3.7, 114.0], [3.8, 114.0], [3.9, 114.0], [4.0, 117.0], [4.1, 117.0], [4.2, 117.0], [4.3, 121.0], [4.4, 121.0], [4.5, 122.0], [4.6, 122.0], [4.7, 122.0], [4.8, 126.0], [4.9, 126.0], [5.0, 126.0], [5.1, 126.0], [5.2, 126.0], [5.3, 129.0], [5.4, 129.0], [5.5, 134.0], [5.6, 134.0], [5.7, 134.0], [5.8, 137.0], [5.9, 137.0], [6.0, 140.0], [6.1, 140.0], [6.2, 140.0], [6.3, 140.0], [6.4, 140.0], [6.5, 144.0], [6.6, 144.0], [6.7, 144.0], [6.8, 144.0], [6.9, 144.0], [7.0, 221.0], [7.1, 221.0], [7.2, 221.0], [7.3, 222.0], [7.4, 222.0], [7.5, 227.0], [7.6, 227.0], [7.7, 227.0], [7.8, 228.0], [7.9, 228.0], [8.0, 229.0], [8.1, 229.0], [8.2, 229.0], [8.3, 230.0], [8.4, 230.0], [8.5, 230.0], [8.6, 230.0], [8.7, 230.0], [8.8, 236.0], [8.9, 236.0], [9.0, 244.0], [9.1, 244.0], [9.2, 244.0], [9.3, 244.0], [9.4, 244.0], [9.5, 245.0], [9.6, 245.0], [9.7, 245.0], [9.8, 247.0], [9.9, 247.0], [10.0, 250.0], [10.1, 250.0], [10.2, 250.0], [10.3, 252.0], [10.4, 252.0], [10.5, 253.0], [10.6, 253.0], [10.7, 253.0], [10.8, 253.0], [10.9, 253.0], [11.0, 254.0], [11.1, 254.0], [11.2, 254.0], [11.3, 255.0], [11.4, 255.0], [11.5, 256.0], [11.6, 256.0], [11.7, 256.0], [11.8, 257.0], [11.9, 257.0], [12.0, 257.0], [12.1, 257.0], [12.2, 257.0], [12.3, 257.0], [12.4, 257.0], [12.5, 258.0], [12.6, 258.0], [12.7, 258.0], [12.8, 258.0], [12.9, 258.0], [13.0, 259.0], [13.1, 259.0], [13.2, 259.0], [13.3, 259.0], [13.4, 259.0], [13.5, 259.0], [13.6, 259.0], [13.7, 259.0], [13.8, 259.0], [13.9, 259.0], [14.0, 260.0], [14.1, 260.0], [14.2, 260.0], [14.3, 260.0], [14.4, 260.0], [14.5, 260.0], [14.6, 260.0], [14.7, 260.0], [14.8, 260.0], [14.9, 260.0], [15.0, 261.0], [15.1, 261.0], [15.2, 261.0], [15.3, 261.0], [15.4, 261.0], [15.5, 263.0], [15.6, 263.0], [15.7, 263.0], [15.8, 263.0], [15.9, 263.0], [16.0, 263.0], [16.1, 263.0], [16.2, 263.0], [16.3, 263.0], [16.4, 263.0], [16.5, 264.0], [16.6, 264.0], [16.7, 264.0], [16.8, 264.0], [16.9, 264.0], [17.0, 265.0], [17.1, 265.0], [17.2, 265.0], [17.3, 266.0], [17.4, 266.0], [17.5, 266.0], [17.6, 266.0], [17.7, 266.0], [17.8, 266.0], [17.9, 266.0], [18.0, 266.0], [18.1, 266.0], [18.2, 266.0], [18.3, 266.0], [18.4, 266.0], [18.5, 267.0], [18.6, 267.0], [18.7, 267.0], [18.8, 267.0], [18.9, 267.0], [19.0, 267.0], [19.1, 267.0], [19.2, 267.0], [19.3, 267.0], [19.4, 267.0], [19.5, 267.0], [19.6, 267.0], [19.7, 267.0], [19.8, 268.0], [19.9, 268.0], [20.0, 268.0], [20.1, 268.0], [20.2, 268.0], [20.3, 268.0], [20.4, 268.0], [20.5, 269.0], [20.6, 269.0], [20.7, 269.0], [20.8, 269.0], [20.9, 269.0], [21.0, 269.0], [21.1, 269.0], [21.2, 269.0], [21.3, 269.0], [21.4, 269.0], [21.5, 269.0], [21.6, 269.0], [21.7, 269.0], [21.8, 270.0], [21.9, 270.0], [22.0, 270.0], [22.1, 270.0], [22.2, 270.0], [22.3, 272.0], [22.4, 272.0], [22.5, 272.0], [22.6, 272.0], [22.7, 272.0], [22.8, 273.0], [22.9, 273.0], [23.0, 273.0], [23.1, 273.0], [23.2, 273.0], [23.3, 274.0], [23.4, 274.0], [23.5, 274.0], [23.6, 274.0], [23.7, 274.0], [23.8, 275.0], [23.9, 275.0], [24.0, 275.0], [24.1, 275.0], [24.2, 275.0], [24.3, 275.0], [24.4, 275.0], [24.5, 276.0], [24.6, 276.0], [24.7, 276.0], [24.8, 277.0], [24.9, 277.0], [25.0, 277.0], [25.1, 277.0], [25.2, 277.0], [25.3, 278.0], [25.4, 278.0], [25.5, 278.0], [25.6, 278.0], [25.7, 278.0], [25.8, 278.0], [25.9, 278.0], [26.0, 278.0], [26.1, 278.0], [26.2, 278.0], [26.3, 279.0], [26.4, 279.0], [26.5, 279.0], [26.6, 279.0], [26.7, 279.0], [26.8, 280.0], [26.9, 280.0], [27.0, 281.0], [27.1, 281.0], [27.2, 281.0], [27.3, 281.0], [27.4, 281.0], [27.5, 282.0], [27.6, 282.0], [27.7, 282.0], [27.8, 282.0], [27.9, 282.0], [28.0, 282.0], [28.1, 282.0], [28.2, 282.0], [28.3, 282.0], [28.4, 282.0], [28.5, 283.0], [28.6, 283.0], [28.7, 283.0], [28.8, 284.0], [28.9, 284.0], [29.0, 285.0], [29.1, 285.0], [29.2, 285.0], [29.3, 285.0], [29.4, 285.0], [29.5, 287.0], [29.6, 287.0], [29.7, 287.0], [29.8, 288.0], [29.9, 288.0], [30.0, 289.0], [30.1, 289.0], [30.2, 289.0], [30.3, 290.0], [30.4, 290.0], [30.5, 290.0], [30.6, 290.0], [30.7, 290.0], [30.8, 291.0], [30.9, 291.0], [31.0, 293.0], [31.1, 293.0], [31.2, 293.0], [31.3, 294.0], [31.4, 294.0], [31.5, 361.0], [31.6, 361.0], [31.7, 361.0], [31.8, 363.0], [31.9, 363.0], [32.0, 364.0], [32.1, 364.0], [32.2, 364.0], [32.3, 365.0], [32.4, 365.0], [32.5, 366.0], [32.6, 366.0], [32.7, 366.0], [32.8, 366.0], [32.9, 366.0], [33.0, 366.0], [33.1, 366.0], [33.2, 366.0], [33.3, 366.0], [33.4, 366.0], [33.5, 366.0], [33.6, 366.0], [33.7, 366.0], [33.8, 367.0], [33.9, 367.0], [34.0, 367.0], [34.1, 367.0], [34.2, 367.0], [34.3, 368.0], [34.4, 368.0], [34.5, 368.0], [34.6, 368.0], [34.7, 368.0], [34.8, 369.0], [34.9, 369.0], [35.0, 369.0], [35.1, 369.0], [35.2, 369.0], [35.3, 371.0], [35.4, 371.0], [35.5, 375.0], [35.6, 375.0], [35.7, 375.0], [35.8, 375.0], [35.9, 375.0], [36.0, 376.0], [36.1, 376.0], [36.2, 376.0], [36.3, 377.0], [36.4, 377.0], [36.5, 378.0], [36.6, 378.0], [36.7, 378.0], [36.8, 379.0], [36.9, 379.0], [37.0, 380.0], [37.1, 380.0], [37.2, 380.0], [37.3, 380.0], [37.4, 380.0], [37.5, 380.0], [37.6, 380.0], [37.7, 380.0], [37.8, 381.0], [37.9, 381.0], [38.0, 381.0], [38.1, 381.0], [38.2, 381.0], [38.3, 386.0], [38.4, 386.0], [38.5, 389.0], [38.6, 389.0], [38.7, 389.0], [38.8, 391.0], [38.9, 391.0], [39.0, 392.0], [39.1, 392.0], [39.2, 392.0], [39.3, 393.0], [39.4, 393.0], [39.5, 397.0], [39.6, 397.0], [39.7, 397.0], [39.8, 399.0], [39.9, 399.0], [40.0, 400.0], [40.1, 400.0], [40.2, 400.0], [40.3, 401.0], [40.4, 401.0], [40.5, 409.0], [40.6, 409.0], [40.7, 409.0], [40.8, 419.0], [40.9, 419.0], [41.0, 454.0], [41.1, 454.0], [41.2, 454.0], [41.3, 458.0], [41.4, 458.0], [41.5, 460.0], [41.6, 460.0], [41.7, 460.0], [41.8, 462.0], [41.9, 462.0], [42.0, 519.0], [42.1, 519.0], [42.2, 519.0], [42.3, 523.0], [42.4, 523.0], [42.5, 529.0], [42.6, 529.0], [42.7, 529.0], [42.8, 604.0], [42.9, 604.0], [43.0, 606.0], [43.1, 606.0], [43.2, 606.0], [43.3, 611.0], [43.4, 611.0], [43.5, 612.0], [43.6, 612.0], [43.7, 612.0], [43.8, 612.0], [43.9, 612.0], [44.0, 613.0], [44.1, 613.0], [44.2, 613.0], [44.3, 615.0], [44.4, 615.0], [44.5, 615.0], [44.6, 615.0], [44.7, 615.0], [44.8, 616.0], [44.9, 616.0], [45.0, 616.0], [45.1, 616.0], [45.2, 616.0], [45.3, 619.0], [45.4, 619.0], [45.5, 621.0], [45.6, 621.0], [45.7, 621.0], [45.8, 623.0], [45.9, 623.0], [46.0, 623.0], [46.1, 623.0], [46.2, 623.0], [46.3, 626.0], [46.4, 626.0], [46.5, 626.0], [46.6, 626.0], [46.7, 626.0], [46.8, 629.0], [46.9, 629.0], [47.0, 629.0], [47.1, 629.0], [47.2, 629.0], [47.3, 633.0], [47.4, 633.0], [47.5, 634.0], [47.6, 634.0], [47.7, 634.0], [47.8, 634.0], [47.9, 634.0], [48.0, 635.0], [48.1, 635.0], [48.2, 635.0], [48.3, 638.0], [48.4, 638.0], [48.5, 638.0], [48.6, 638.0], [48.7, 638.0], [48.8, 640.0], [48.9, 640.0], [49.0, 640.0], [49.1, 640.0], [49.2, 640.0], [49.3, 641.0], [49.4, 641.0], [49.5, 642.0], [49.6, 642.0], [49.7, 642.0], [49.8, 643.0], [49.9, 643.0], [50.0, 643.0], [50.1, 643.0], [50.2, 643.0], [50.3, 645.0], [50.4, 645.0], [50.5, 647.0], [50.6, 647.0], [50.7, 647.0], [50.8, 647.0], [50.9, 647.0], [51.0, 649.0], [51.1, 649.0], [51.2, 649.0], [51.3, 653.0], [51.4, 653.0], [51.5, 658.0], [51.6, 658.0], [51.7, 658.0], [51.8, 661.0], [51.9, 661.0], [52.0, 696.0], [52.1, 696.0], [52.2, 696.0], [52.3, 699.0], [52.4, 699.0], [52.5, 699.0], [52.6, 699.0], [52.7, 699.0], [52.8, 699.0], [52.9, 699.0], [53.0, 702.0], [53.1, 702.0], [53.2, 702.0], [53.3, 711.0], [53.4, 711.0], [53.5, 716.0], [53.6, 716.0], [53.7, 716.0], [53.8, 717.0], [53.9, 717.0], [54.0, 724.0], [54.1, 724.0], [54.2, 724.0], [54.3, 740.0], [54.4, 740.0], [54.5, 754.0], [54.6, 754.0], [54.7, 754.0], [54.8, 758.0], [54.9, 758.0], [55.0, 760.0], [55.1, 760.0], [55.2, 760.0], [55.3, 760.0], [55.4, 760.0], [55.5, 770.0], [55.6, 770.0], [55.7, 770.0], [55.8, 772.0], [55.9, 772.0], [56.0, 773.0], [56.1, 773.0], [56.2, 773.0], [56.3, 774.0], [56.4, 774.0], [56.5, 780.0], [56.6, 780.0], [56.7, 780.0], [56.8, 783.0], [56.9, 783.0], [57.0, 785.0], [57.1, 785.0], [57.2, 785.0], [57.3, 801.0], [57.4, 801.0], [57.5, 806.0], [57.6, 806.0], [57.7, 806.0], [57.8, 808.0], [57.9, 808.0], [58.0, 808.0], [58.1, 808.0], [58.2, 808.0], [58.3, 809.0], [58.4, 809.0], [58.5, 812.0], [58.6, 812.0], [58.7, 812.0], [58.8, 813.0], [58.9, 813.0], [59.0, 813.0], [59.1, 813.0], [59.2, 813.0], [59.3, 814.0], [59.4, 814.0], [59.5, 814.0], [59.6, 814.0], [59.7, 814.0], [59.8, 815.0], [59.9, 815.0], [60.0, 815.0], [60.1, 815.0], [60.2, 815.0], [60.3, 816.0], [60.4, 816.0], [60.5, 820.0], [60.6, 820.0], [60.7, 820.0], [60.8, 820.0], [60.9, 820.0], [61.0, 820.0], [61.1, 820.0], [61.2, 820.0], [61.3, 821.0], [61.4, 821.0], [61.5, 821.0], [61.6, 821.0], [61.7, 821.0], [61.8, 824.0], [61.9, 824.0], [62.0, 824.0], [62.1, 824.0], [62.2, 824.0], [62.3, 824.0], [62.4, 824.0], [62.5, 825.0], [62.6, 825.0], [62.7, 825.0], [62.8, 825.0], [62.9, 825.0], [63.0, 825.0], [63.1, 825.0], [63.2, 825.0], [63.3, 856.0], [63.4, 856.0], [63.5, 856.0], [63.6, 856.0], [63.7, 856.0], [63.8, 859.0], [63.9, 859.0], [64.0, 860.0], [64.1, 860.0], [64.2, 860.0], [64.3, 861.0], [64.4, 861.0], [64.5, 862.0], [64.6, 862.0], [64.7, 862.0], [64.8, 864.0], [64.9, 864.0], [65.0, 864.0], [65.1, 864.0], [65.2, 864.0], [65.3, 866.0], [65.4, 866.0], [65.5, 867.0], [65.6, 867.0], [65.7, 867.0], [65.8, 869.0], [65.9, 869.0], [66.0, 871.0], [66.1, 871.0], [66.2, 871.0], [66.3, 872.0], [66.4, 872.0], [66.5, 875.0], [66.6, 875.0], [66.7, 875.0], [66.8, 877.0], [66.9, 877.0], [67.0, 884.0], [67.1, 884.0], [67.2, 884.0], [67.3, 910.0], [67.4, 910.0], [67.5, 912.0], [67.6, 912.0], [67.7, 912.0], [67.8, 924.0], [67.9, 924.0], [68.0, 924.0], [68.1, 924.0], [68.2, 924.0], [68.3, 925.0], [68.4, 925.0], [68.5, 925.0], [68.6, 925.0], [68.7, 925.0], [68.8, 929.0], [68.9, 929.0], [69.0, 939.0], [69.1, 939.0], [69.2, 939.0], [69.3, 941.0], [69.4, 941.0], [69.5, 943.0], [69.6, 943.0], [69.7, 943.0], [69.8, 944.0], [69.9, 944.0], [70.0, 947.0], [70.1, 947.0], [70.2, 947.0], [70.3, 951.0], [70.4, 951.0], [70.5, 998.0], [70.6, 998.0], [70.7, 998.0], [70.8, 1014.0], [70.9, 1014.0], [71.0, 1015.0], [71.1, 1015.0], [71.2, 1015.0], [71.3, 1015.0], [71.4, 1015.0], [71.5, 1053.0], [71.6, 1053.0], [71.7, 1053.0], [71.8, 1061.0], [71.9, 1061.0], [72.0, 1063.0], [72.1, 1063.0], [72.2, 1063.0], [72.3, 1063.0], [72.4, 1063.0], [72.5, 1063.0], [72.6, 1063.0], [72.7, 1063.0], [72.8, 1064.0], [72.9, 1064.0], [73.0, 1065.0], [73.1, 1065.0], [73.2, 1065.0], [73.3, 1067.0], [73.4, 1067.0], [73.5, 1090.0], [73.6, 1090.0], [73.7, 1090.0], [73.8, 1094.0], [73.9, 1094.0], [74.0, 1097.0], [74.1, 1097.0], [74.2, 1097.0], [74.3, 1110.0], [74.4, 1110.0], [74.5, 1113.0], [74.6, 1113.0], [74.7, 1113.0], [74.8, 1114.0], [74.9, 1114.0], [75.0, 1114.0], [75.1, 1114.0], [75.2, 1114.0], [75.3, 1115.0], [75.4, 1115.0], [75.5, 1115.0], [75.6, 1115.0], [75.7, 1115.0], [75.8, 1117.0], [75.9, 1117.0], [76.0, 1117.0], [76.1, 1117.0], [76.2, 1117.0], [76.3, 1118.0], [76.4, 1118.0], [76.5, 1119.0], [76.6, 1119.0], [76.7, 1119.0], [76.8, 1121.0], [76.9, 1121.0], [77.0, 1122.0], [77.1, 1122.0], [77.2, 1122.0], [77.3, 1124.0], [77.4, 1124.0], [77.5, 1124.0], [77.6, 1124.0], [77.7, 1124.0], [77.8, 1129.0], [77.9, 1129.0], [78.0, 1131.0], [78.1, 1131.0], [78.2, 1131.0], [78.3, 1131.0], [78.4, 1131.0], [78.5, 1132.0], [78.6, 1132.0], [78.7, 1132.0], [78.8, 1169.0], [78.9, 1169.0], [79.0, 1170.0], [79.1, 1170.0], [79.2, 1170.0], [79.3, 1175.0], [79.4, 1175.0], [79.5, 1193.0], [79.6, 1193.0], [79.7, 1193.0], [79.8, 1194.0], [79.9, 1194.0], [80.0, 1202.0], [80.1, 1202.0], [80.2, 1202.0], [80.3, 1203.0], [80.4, 1203.0], [80.5, 1206.0], [80.6, 1206.0], [80.7, 1206.0], [80.8, 1209.0], [80.9, 1209.0], [81.0, 1215.0], [81.1, 1215.0], [81.2, 1215.0], [81.3, 1218.0], [81.4, 1218.0], [81.5, 1264.0], [81.6, 1264.0], [81.7, 1264.0], [81.8, 1268.0], [81.9, 1268.0], [82.0, 1271.0], [82.1, 1271.0], [82.2, 1271.0], [82.3, 1271.0], [82.4, 1271.0], [82.5, 1272.0], [82.6, 1272.0], [82.7, 1272.0], [82.8, 1300.0], [82.9, 1300.0], [83.0, 1306.0], [83.1, 1306.0], [83.2, 1306.0], [83.3, 1311.0], [83.4, 1311.0], [83.5, 1318.0], [83.6, 1318.0], [83.7, 1318.0], [83.8, 1319.0], [83.9, 1319.0], [84.0, 1321.0], [84.1, 1321.0], [84.2, 1321.0], [84.3, 1322.0], [84.4, 1322.0], [84.5, 1323.0], [84.6, 1323.0], [84.7, 1323.0], [84.8, 1325.0], [84.9, 1325.0], [85.0, 1326.0], [85.1, 1326.0], [85.2, 1326.0], [85.3, 1329.0], [85.4, 1329.0], [85.5, 1340.0], [85.6, 1340.0], [85.7, 1340.0], [85.8, 1341.0], [85.9, 1341.0], [86.0, 1346.0], [86.1, 1346.0], [86.2, 1346.0], [86.3, 1353.0], [86.4, 1353.0], [86.5, 1355.0], [86.6, 1355.0], [86.7, 1355.0], [86.8, 1359.0], [86.9, 1359.0], [87.0, 1365.0], [87.1, 1365.0], [87.2, 1365.0], [87.3, 1366.0], [87.4, 1366.0], [87.5, 1367.0], [87.6, 1367.0], [87.7, 1367.0], [87.8, 1367.0], [87.9, 1367.0], [88.0, 1370.0], [88.1, 1370.0], [88.2, 1370.0], [88.3, 1371.0], [88.4, 1371.0], [88.5, 1371.0], [88.6, 1371.0], [88.7, 1371.0], [88.8, 1372.0], [88.9, 1372.0], [89.0, 1375.0], [89.1, 1375.0], [89.2, 1375.0], [89.3, 1387.0], [89.4, 1387.0], [89.5, 1412.0], [89.6, 1412.0], [89.7, 1412.0], [89.8, 1423.0], [89.9, 1423.0], [90.0, 1427.0], [90.1, 1427.0], [90.2, 1427.0], [90.3, 1427.0], [90.4, 1427.0], [90.5, 1436.0], [90.6, 1436.0], [90.7, 1436.0], [90.8, 1442.0], [90.9, 1442.0], [91.0, 1442.0], [91.1, 1442.0], [91.2, 1442.0], [91.3, 1445.0], [91.4, 1445.0], [91.5, 1445.0], [91.6, 1445.0], [91.7, 1445.0], [91.8, 1446.0], [91.9, 1446.0], [92.0, 1447.0], [92.1, 1447.0], [92.2, 1447.0], [92.3, 1447.0], [92.4, 1447.0], [92.5, 1448.0], [92.6, 1448.0], [92.7, 1448.0], [92.8, 1449.0], [92.9, 1449.0], [93.0, 1450.0], [93.1, 1450.0], [93.2, 1450.0], [93.3, 1451.0], [93.4, 1451.0], [93.5, 1453.0], [93.6, 1453.0], [93.7, 1453.0], [93.8, 1453.0], [93.9, 1453.0], [94.0, 1453.0], [94.1, 1453.0], [94.2, 1453.0], [94.3, 1454.0], [94.4, 1454.0], [94.5, 1454.0], [94.6, 1454.0], [94.7, 1454.0], [94.8, 1455.0], [94.9, 1455.0], [95.0, 1456.0], [95.1, 1456.0], [95.2, 1456.0], [95.3, 1457.0], [95.4, 1457.0], [95.5, 1472.0], [95.6, 1472.0], [95.7, 1472.0], [95.8, 1474.0], [95.9, 1474.0], [96.0, 1475.0], [96.1, 1475.0], [96.2, 1475.0], [96.3, 1475.0], [96.4, 1475.0], [96.5, 1477.0], [96.6, 1477.0], [96.7, 1477.0], [96.8, 1478.0], [96.9, 1478.0], [97.0, 1479.0], [97.1, 1479.0], [97.2, 1479.0], [97.3, 1510.0], [97.4, 1510.0], [97.5, 1512.0], [97.6, 1512.0], [97.7, 1512.0], [97.8, 1512.0], [97.9, 1512.0], [98.0, 1512.0], [98.1, 1512.0], [98.2, 1512.0], [98.3, 1519.0], [98.4, 1519.0], [98.5, 1543.0], [98.6, 1543.0], [98.7, 1543.0], [98.8, 1549.0], [98.9, 1549.0], [99.0, 1552.0], [99.1, 1552.0], [99.2, 1552.0], [99.3, 1558.0], [99.4, 1558.0], [99.5, 1561.0], [99.6, 1561.0], [99.7, 1561.0], [99.8, 1756.0], [99.9, 1756.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 281.0, "series": [{"data": [[0.0, 281.0], [2100.0, 1.0], [100.0, 90.0], [1000.0, 28.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[73000.0, 6.0], [73300.0, 35.0], [73400.0, 105.0], [73500.0, 24.0], [72000.0, 10.0], [120100.0, 3.0], [62300.0, 47.0], [62400.0, 50.0], [62600.0, 58.0], [62500.0, 43.0], [63800.0, 18.0], [63900.0, 1.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[0.0, 5.0], [600.0, 41.0], [700.0, 17.0], [800.0, 40.0], [200.0, 98.0], [900.0, 14.0], [1000.0, 14.0], [1100.0, 23.0], [300.0, 34.0], [1200.0, 11.0], [1300.0, 27.0], [1400.0, 31.0], [1500.0, 10.0], [400.0, 8.0], [100.0, 23.0], [1700.0, 1.0], [500.0, 3.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 120100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 539.0, "series": [{"data": [[0.0, 539.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 249.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 409.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.60874293E12, "maxY": 400.0, "series": [{"data": [[1.608742934E12, 400.0], [1.608742998E12, 184.0], [1.608743051E12, 3.0], [1.608743004E12, 95.89444444444442], [1.60874293E12, 324.4237288135593], [1.608742994E12, 400.0], [1.608742931E12, 387.898734177215], [1.608742932E12, 400.0], [1.608742996E12, 200.00000000000003]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608743051E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 51.0, "minX": 3.0, "maxY": 120162.66666666667, "series": [{"data": [[340.0, 51.0], [341.0, 53.5], [344.0, 61.94117647058823], [349.0, 73.42857142857143], [350.0, 74.45454545454545], [351.0, 74.0], [358.0, 92.8], [359.0, 92.77777777777779], [360.0, 91.0714285714286], [361.0, 90.0], [364.0, 99.0], [365.0, 98.0], [366.0, 96.88888888888887], [367.0, 91.83333333333334], [374.0, 106.77777777777777], [376.0, 113.0], [384.0, 94.39999999999999], [400.0, 187.806338028169]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[388.34750000000014, 158.1925]], "isOverall": false, "label": "GET /login-Aggregated", "isController": false}, {"data": [[3.0, 120162.66666666667], [5.0, 72044.5], [7.0, 72041.5], [13.0, 72043.0], [14.0, 72278.66666666666], [15.0, 73463.0], [23.0, 73455.0], [24.0, 73455.85714285714], [29.0, 73449.0], [32.0, 73453.0], [34.0, 73451.0], [38.0, 73435.0], [40.0, 73433.4], [43.0, 73415.33333333333], [45.0, 73450.0], [47.0, 73427.0], [49.0, 73440.5], [53.0, 73444.25], [63.0, 73449.4], [73.0, 73469.40000000001], [79.0, 73505.0], [77.0, 73511.5], [83.0, 73495.75], [91.0, 73493.66666666667], [93.0, 73508.57142857143], [98.0, 73503.0], [103.0, 73487.5], [101.0, 73503.66666666667], [108.0, 73481.0], [113.0, 73469.0], [118.0, 73459.0], [116.0, 73453.66666666667], [123.0, 73451.33333333333], [122.0, 73454.5], [133.0, 73430.83333333333], [130.0, 73430.5], [129.0, 73434.0], [128.0, 73435.0], [143.0, 73385.0], [142.0, 73405.28571428571], [137.0, 73409.5], [150.0, 73387.2], [148.0, 73396.5], [159.0, 73358.0], [157.0, 73369.5], [153.0, 73378.66666666667], [167.0, 73345.75], [163.0, 73358.75], [160.0, 73360.0], [173.0, 73344.5], [183.0, 73055.5], [177.0, 73329.5], [184.0, 63928.0], [198.0, 63889.666666666664], [197.0, 63887.0], [202.0, 63887.42857142857], [201.0, 63893.0], [200.0, 63889.0], [400.0, 62509.08585858587]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[250.63249999999996, 67884.88249999998]], "isOverall": false, "label": "POST /graphql - Login-Aggregated", "isController": false}, {"data": [[322.0, 388.5], [323.0, 426.80645161290323], [324.0, 131.0], [325.0, 414.1666666666667], [326.0, 410.77777777777777], [327.0, 201.33333333333334], [328.0, 633.3333333333334], [329.0, 371.6666666666667], [330.0, 252.71428571428572], [331.0, 450.66666666666663], [332.0, 503.2727272727273], [335.0, 611.0], [336.0, 524.2222222222222], [337.0, 333.66666666666663], [338.0, 626.8571428571428], [339.0, 102.0], [340.0, 364.5], [351.0, 644.888888888889], [353.0, 645.0], [374.0, 510.0], [375.0, 714.3333333333334], [376.0, 699.0], [377.0, 711.0], [388.0, 227.0], [389.0, 226.66666666666666], [390.0, 236.0], [397.0, 247.0], [399.0, 250.0], [398.0, 249.75], [400.0, 862.2846153846156]], "isOverall": false, "label": "GET /", "isController": false}, {"data": [[378.99499999999966, 713.6425000000004]], "isOverall": false, "label": "GET /-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.60874293E12, "maxY": 1748220.0, "series": [{"data": [[1.608742934E12, 2060.0], [1.608742998E12, 808.0], [1.608743051E12, 6216.0], [1.608743004E12, 260100.0], [1.60874293E12, 170746.0], [1.608742994E12, 159984.0], [1.608742931E12, 1748220.0], [1.608742932E12, 60574.0], [1.608742996E12, 14544.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.608742934E12, 122.0], [1.608742998E12, 707.0], [1.608743051E12, 0.0], [1.608743004E12, 127260.0], [1.60874293E12, 6903.0], [1.608742994E12, 139986.0], [1.608742931E12, 85042.0], [1.608742932E12, 3533.0], [1.608742996E12, 12726.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608743051E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 83.38814016172509, "minX": 1.60874293E12, "maxY": 120162.66666666667, "series": [{"data": [[1.608742934E12, 2155.0], [1.608742931E12, 83.38814016172509], [1.608742932E12, 1078.0357142857144]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.608742998E12, 63928.0], [1.608743051E12, 120162.66666666667], [1.608743004E12, 73348.56111111109], [1.608742994E12, 62509.08585858587], [1.608742996E12, 63888.72222222222]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.60874293E12, 412.3389830508476], [1.608742931E12, 762.8617647058826], [1.608742932E12, 1756.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743051E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60874293E12, "maxY": 73348.42222222226, "series": [{"data": [[1.608742934E12, 2155.0], [1.608742931E12, 83.33962264150942], [1.608742932E12, 1077.9642857142856]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.608742998E12, 63928.0], [1.608743051E12, 0.0], [1.608743004E12, 73348.42222222226], [1.608742994E12, 62508.95959595961], [1.608742996E12, 63888.61111111112]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.60874293E12, 409.4576271186441], [1.608742931E12, 762.6735294117645], [1.608742932E12, 1756.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743051E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60874293E12, "maxY": 53.50882352941172, "series": [{"data": [[1.608742934E12, 0.0], [1.608742931E12, 0.0], [1.608742932E12, 0.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.608742998E12, 0.0], [1.608743051E12, 0.0], [1.608743004E12, 0.0], [1.608742994E12, 0.0], [1.608742996E12, 0.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.60874293E12, 47.94915254237287], [1.608742931E12, 53.50882352941172], [1.608742932E12, 39.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743051E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 42.0, "minX": 1.60874293E12, "maxY": 73534.0, "series": [{"data": [[1.608742934E12, 2155.0], [1.608742998E12, 63928.0], [1.608743004E12, 73534.0], [1.60874293E12, 780.0], [1.608742994E12, 62694.0], [1.608742931E12, 1561.0], [1.608742932E12, 1756.0], [1.608742996E12, 63896.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.608742934E12, 2155.0], [1.608742998E12, 63928.0], [1.608743004E12, 73503.0], [1.60874293E12, 661.0], [1.608742994E12, 62649.0], [1.608742931E12, 1270.4], [1.608742932E12, 1093.0], [1.608742996E12, 63893.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.608742934E12, 2155.0], [1.608742998E12, 63928.0], [1.608743004E12, 73533.19], [1.60874293E12, 780.0], [1.608742994E12, 62683.11], [1.608742931E12, 1512.0], [1.608742932E12, 1756.0], [1.608742996E12, 63896.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.608742934E12, 2155.0], [1.608742998E12, 63928.0], [1.608743004E12, 73507.9], [1.60874293E12, 772.0], [1.608742994E12, 62661.0], [1.608742931E12, 1442.0], [1.608742932E12, 1425.0], [1.608742996E12, 63896.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.608742934E12, 2155.0], [1.608742998E12, 63928.0], [1.608743004E12, 72040.0], [1.60874293E12, 106.0], [1.608742994E12, 62338.0], [1.608742931E12, 42.0], [1.608742932E12, 1069.0], [1.608742996E12, 63884.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.608742934E12, 2155.0], [1.608742998E12, 63928.0], [1.608743004E12, 73441.0], [1.60874293E12, 392.0], [1.608742994E12, 62514.5], [1.608742931E12, 120.0], [1.608742932E12, 1078.0], [1.608742996E12, 63888.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608743004E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 120164.0, "series": [{"data": [[1.0, 33041.5], [18.0, 63888.0], [711.0, 120.0], [180.0, 73441.0], [198.0, 62514.5], [59.0, 392.0], [29.0, 1078.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 120164.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 711.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 73441.0, "series": [{"data": [[1.0, 33041.5], [18.0, 63888.0], [711.0, 120.0], [180.0, 73441.0], [198.0, 62514.5], [59.0, 392.0], [29.0, 1078.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 711.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.60874293E12, "maxY": 785.0, "series": [{"data": [[1.608742934E12, 1.0], [1.60874293E12, 385.0], [1.608742931E12, 785.0], [1.608742932E12, 29.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608742934E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.60874293E12, "maxY": 711.0, "series": [{"data": [[1.608742934E12, 1.0], [1.608742998E12, 1.0], [1.608743004E12, 180.0], [1.60874293E12, 59.0], [1.608742994E12, 198.0], [1.608742931E12, 711.0], [1.608742932E12, 29.0], [1.608742996E12, 18.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.608743051E12, 3.0]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.608743051E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.60874293E12, "maxY": 371.0, "series": [{"data": [[1.60874293E12, 59.0], [1.608742931E12, 340.0], [1.608742932E12, 1.0]], "isOverall": false, "label": "GET /-success", "isController": false}, {"data": [[1.608742998E12, 1.0], [1.608743004E12, 180.0], [1.608742994E12, 198.0], [1.608742996E12, 18.0]], "isOverall": false, "label": "POST /graphql - Login-success", "isController": false}, {"data": [[1.608743051E12, 3.0]], "isOverall": false, "label": "POST /graphql - Login-failure", "isController": false}, {"data": [[1.608742934E12, 1.0], [1.608742931E12, 371.0], [1.608742932E12, 28.0]], "isOverall": false, "label": "GET /login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743051E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.60874293E12, "maxY": 711.0, "series": [{"data": [[1.608742934E12, 1.0], [1.608742998E12, 1.0], [1.608743004E12, 180.0], [1.60874293E12, 59.0], [1.608742994E12, 198.0], [1.608742931E12, 711.0], [1.608742932E12, 29.0], [1.608742996E12, 18.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.608743051E12, 3.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.608743051E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

