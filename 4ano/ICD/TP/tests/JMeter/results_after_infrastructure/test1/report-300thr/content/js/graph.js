/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 53.0, "minX": 0.0, "maxY": 47527.0, "series": [{"data": [[0.0, 53.0], [0.1, 53.0], [0.2, 53.0], [0.3, 53.0], [0.4, 55.0], [0.5, 55.0], [0.6, 55.0], [0.7, 60.0], [0.8, 60.0], [0.9, 60.0], [1.0, 60.0], [1.1, 60.0], [1.2, 60.0], [1.3, 60.0], [1.4, 61.0], [1.5, 61.0], [1.6, 61.0], [1.7, 61.0], [1.8, 61.0], [1.9, 61.0], [2.0, 61.0], [2.1, 61.0], [2.2, 61.0], [2.3, 61.0], [2.4, 61.0], [2.5, 61.0], [2.6, 61.0], [2.7, 61.0], [2.8, 61.0], [2.9, 61.0], [3.0, 61.0], [3.1, 61.0], [3.2, 61.0], [3.3, 61.0], [3.4, 61.0], [3.5, 61.0], [3.6, 61.0], [3.7, 62.0], [3.8, 62.0], [3.9, 62.0], [4.0, 62.0], [4.1, 62.0], [4.2, 62.0], [4.3, 62.0], [4.4, 62.0], [4.5, 62.0], [4.6, 62.0], [4.7, 62.0], [4.8, 62.0], [4.9, 62.0], [5.0, 62.0], [5.1, 62.0], [5.2, 62.0], [5.3, 62.0], [5.4, 62.0], [5.5, 62.0], [5.6, 62.0], [5.7, 63.0], [5.8, 63.0], [5.9, 63.0], [6.0, 63.0], [6.1, 63.0], [6.2, 63.0], [6.3, 63.0], [6.4, 63.0], [6.5, 63.0], [6.6, 63.0], [6.7, 63.0], [6.8, 63.0], [6.9, 63.0], [7.0, 64.0], [7.1, 64.0], [7.2, 64.0], [7.3, 64.0], [7.4, 64.0], [7.5, 64.0], [7.6, 64.0], [7.7, 64.0], [7.8, 64.0], [7.9, 64.0], [8.0, 64.0], [8.1, 64.0], [8.2, 64.0], [8.3, 64.0], [8.4, 64.0], [8.5, 64.0], [8.6, 64.0], [8.7, 64.0], [8.8, 64.0], [8.9, 64.0], [9.0, 64.0], [9.1, 64.0], [9.2, 64.0], [9.3, 64.0], [9.4, 65.0], [9.5, 65.0], [9.6, 65.0], [9.7, 65.0], [9.8, 65.0], [9.9, 65.0], [10.0, 65.0], [10.1, 65.0], [10.2, 65.0], [10.3, 65.0], [10.4, 65.0], [10.5, 65.0], [10.6, 65.0], [10.7, 65.0], [10.8, 65.0], [10.9, 65.0], [11.0, 65.0], [11.1, 65.0], [11.2, 65.0], [11.3, 65.0], [11.4, 66.0], [11.5, 66.0], [11.6, 66.0], [11.7, 66.0], [11.8, 66.0], [11.9, 66.0], [12.0, 66.0], [12.1, 66.0], [12.2, 66.0], [12.3, 66.0], [12.4, 66.0], [12.5, 66.0], [12.6, 66.0], [12.7, 67.0], [12.8, 67.0], [12.9, 67.0], [13.0, 67.0], [13.1, 67.0], [13.2, 67.0], [13.3, 67.0], [13.4, 67.0], [13.5, 67.0], [13.6, 67.0], [13.7, 67.0], [13.8, 67.0], [13.9, 67.0], [14.0, 67.0], [14.1, 68.0], [14.2, 68.0], [14.3, 68.0], [14.4, 68.0], [14.5, 68.0], [14.6, 68.0], [14.7, 68.0], [14.8, 68.0], [14.9, 68.0], [15.0, 68.0], [15.1, 69.0], [15.2, 69.0], [15.3, 69.0], [15.4, 69.0], [15.5, 69.0], [15.6, 69.0], [15.7, 69.0], [15.8, 69.0], [15.9, 69.0], [16.0, 69.0], [16.1, 69.0], [16.2, 69.0], [16.3, 69.0], [16.4, 69.0], [16.5, 69.0], [16.6, 69.0], [16.7, 69.0], [16.8, 69.0], [16.9, 69.0], [17.0, 69.0], [17.1, 69.0], [17.2, 69.0], [17.3, 69.0], [17.4, 69.0], [17.5, 69.0], [17.6, 69.0], [17.7, 70.0], [17.8, 70.0], [17.9, 70.0], [18.0, 70.0], [18.1, 70.0], [18.2, 70.0], [18.3, 70.0], [18.4, 70.0], [18.5, 70.0], [18.6, 70.0], [18.7, 70.0], [18.8, 70.0], [18.9, 70.0], [19.0, 71.0], [19.1, 71.0], [19.2, 71.0], [19.3, 71.0], [19.4, 71.0], [19.5, 71.0], [19.6, 71.0], [19.7, 71.0], [19.8, 71.0], [19.9, 71.0], [20.0, 71.0], [20.1, 71.0], [20.2, 71.0], [20.3, 71.0], [20.4, 71.0], [20.5, 71.0], [20.6, 71.0], [20.7, 71.0], [20.8, 71.0], [20.9, 71.0], [21.0, 72.0], [21.1, 72.0], [21.2, 72.0], [21.3, 72.0], [21.4, 72.0], [21.5, 72.0], [21.6, 72.0], [21.7, 72.0], [21.8, 72.0], [21.9, 72.0], [22.0, 73.0], [22.1, 73.0], [22.2, 73.0], [22.3, 73.0], [22.4, 73.0], [22.5, 73.0], [22.6, 73.0], [22.7, 74.0], [22.8, 74.0], [22.9, 74.0], [23.0, 74.0], [23.1, 74.0], [23.2, 74.0], [23.3, 74.0], [23.4, 74.0], [23.5, 74.0], [23.6, 74.0], [23.7, 74.0], [23.8, 74.0], [23.9, 74.0], [24.0, 74.0], [24.1, 74.0], [24.2, 74.0], [24.3, 74.0], [24.4, 74.0], [24.5, 74.0], [24.6, 74.0], [24.7, 74.0], [24.8, 74.0], [24.9, 74.0], [25.0, 75.0], [25.1, 75.0], [25.2, 75.0], [25.3, 75.0], [25.4, 75.0], [25.5, 75.0], [25.6, 75.0], [25.7, 75.0], [25.8, 75.0], [25.9, 75.0], [26.0, 77.0], [26.1, 77.0], [26.2, 77.0], [26.3, 77.0], [26.4, 78.0], [26.5, 78.0], [26.6, 78.0], [26.7, 79.0], [26.8, 79.0], [26.9, 79.0], [27.0, 79.0], [27.1, 79.0], [27.2, 79.0], [27.3, 79.0], [27.4, 79.0], [27.5, 79.0], [27.6, 79.0], [27.7, 79.0], [27.8, 79.0], [27.9, 79.0], [28.0, 80.0], [28.1, 80.0], [28.2, 80.0], [28.3, 80.0], [28.4, 80.0], [28.5, 80.0], [28.6, 80.0], [28.7, 80.0], [28.8, 80.0], [28.9, 80.0], [29.0, 80.0], [29.1, 80.0], [29.2, 80.0], [29.3, 80.0], [29.4, 80.0], [29.5, 80.0], [29.6, 80.0], [29.7, 84.0], [29.8, 84.0], [29.9, 84.0], [30.0, 88.0], [30.1, 88.0], [30.2, 88.0], [30.3, 88.0], [30.4, 88.0], [30.5, 88.0], [30.6, 88.0], [30.7, 89.0], [30.8, 89.0], [30.9, 89.0], [31.0, 89.0], [31.1, 89.0], [31.2, 89.0], [31.3, 89.0], [31.4, 131.0], [31.5, 131.0], [31.6, 131.0], [31.7, 131.0], [31.8, 131.0], [31.9, 131.0], [32.0, 131.0], [32.1, 131.0], [32.2, 131.0], [32.3, 131.0], [32.4, 132.0], [32.5, 132.0], [32.6, 132.0], [32.7, 133.0], [32.8, 133.0], [32.9, 133.0], [33.0, 137.0], [33.1, 137.0], [33.2, 137.0], [33.3, 137.0], [33.4, 138.0], [33.5, 138.0], [33.6, 138.0], [33.7, 240.0], [33.8, 240.0], [33.9, 240.0], [34.0, 240.0], [34.1, 244.0], [34.2, 244.0], [34.3, 244.0], [34.4, 337.0], [34.5, 337.0], [34.6, 337.0], [34.7, 402.0], [34.8, 402.0], [34.9, 402.0], [35.0, 402.0], [35.1, 403.0], [35.2, 403.0], [35.3, 403.0], [35.4, 403.0], [35.5, 403.0], [35.6, 403.0], [35.7, 408.0], [35.8, 408.0], [35.9, 408.0], [36.0, 408.0], [36.1, 464.0], [36.2, 464.0], [36.3, 464.0], [36.4, 520.0], [36.5, 520.0], [36.6, 520.0], [36.7, 525.0], [36.8, 525.0], [36.9, 525.0], [37.0, 525.0], [37.1, 527.0], [37.2, 527.0], [37.3, 527.0], [37.4, 534.0], [37.5, 534.0], [37.6, 534.0], [37.7, 539.0], [37.8, 539.0], [37.9, 539.0], [38.0, 539.0], [38.1, 566.0], [38.2, 566.0], [38.3, 566.0], [38.4, 571.0], [38.5, 571.0], [38.6, 571.0], [38.7, 607.0], [38.8, 607.0], [38.9, 607.0], [39.0, 607.0], [39.1, 607.0], [39.2, 607.0], [39.3, 607.0], [39.4, 611.0], [39.5, 611.0], [39.6, 611.0], [39.7, 611.0], [39.8, 611.0], [39.9, 611.0], [40.0, 611.0], [40.1, 756.0], [40.2, 756.0], [40.3, 756.0], [40.4, 761.0], [40.5, 761.0], [40.6, 761.0], [40.7, 761.0], [40.8, 761.0], [40.9, 761.0], [41.0, 761.0], [41.1, 761.0], [41.2, 761.0], [41.3, 761.0], [41.4, 762.0], [41.5, 762.0], [41.6, 762.0], [41.7, 763.0], [41.8, 763.0], [41.9, 763.0], [42.0, 763.0], [42.1, 763.0], [42.2, 763.0], [42.3, 763.0], [42.4, 763.0], [42.5, 763.0], [42.6, 763.0], [42.7, 768.0], [42.8, 768.0], [42.9, 768.0], [43.0, 768.0], [43.1, 775.0], [43.2, 775.0], [43.3, 775.0], [43.4, 775.0], [43.5, 775.0], [43.6, 775.0], [43.7, 776.0], [43.8, 776.0], [43.9, 776.0], [44.0, 776.0], [44.1, 776.0], [44.2, 776.0], [44.3, 776.0], [44.4, 777.0], [44.5, 777.0], [44.6, 777.0], [44.7, 778.0], [44.8, 778.0], [44.9, 778.0], [45.0, 778.0], [45.1, 780.0], [45.2, 780.0], [45.3, 780.0], [45.4, 781.0], [45.5, 781.0], [45.6, 781.0], [45.7, 801.0], [45.8, 801.0], [45.9, 801.0], [46.0, 801.0], [46.1, 804.0], [46.2, 804.0], [46.3, 804.0], [46.4, 809.0], [46.5, 809.0], [46.6, 809.0], [46.7, 851.0], [46.8, 851.0], [46.9, 851.0], [47.0, 851.0], [47.1, 889.0], [47.2, 889.0], [47.3, 889.0], [47.4, 889.0], [47.5, 889.0], [47.6, 889.0], [47.7, 912.0], [47.8, 912.0], [47.9, 912.0], [48.0, 912.0], [48.1, 971.0], [48.2, 971.0], [48.3, 971.0], [48.4, 971.0], [48.5, 971.0], [48.6, 971.0], [48.7, 973.0], [48.8, 973.0], [48.9, 973.0], [49.0, 973.0], [49.1, 973.0], [49.2, 973.0], [49.3, 973.0], [49.4, 973.0], [49.5, 973.0], [49.6, 973.0], [49.7, 974.0], [49.8, 974.0], [49.9, 974.0], [50.0, 974.0], [50.1, 974.0], [50.2, 974.0], [50.3, 974.0], [50.4, 1153.0], [50.5, 1153.0], [50.6, 1153.0], [50.7, 1226.0], [50.8, 1226.0], [50.9, 1226.0], [51.0, 1226.0], [51.1, 1227.0], [51.2, 1227.0], [51.3, 1227.0], [51.4, 1269.0], [51.5, 1269.0], [51.6, 1269.0], [51.7, 1335.0], [51.8, 1335.0], [51.9, 1335.0], [52.0, 1335.0], [52.1, 1922.0], [52.2, 1922.0], [52.3, 1922.0], [52.4, 2405.0], [52.5, 2405.0], [52.6, 2405.0], [52.7, 2412.0], [52.8, 2412.0], [52.9, 2412.0], [53.0, 2412.0], [53.1, 2449.0], [53.2, 2449.0], [53.3, 2449.0], [53.4, 2794.0], [53.5, 2794.0], [53.6, 2794.0], [53.7, 2874.0], [53.8, 2874.0], [53.9, 2874.0], [54.0, 2874.0], [54.1, 3019.0], [54.2, 3019.0], [54.3, 3019.0], [54.4, 3102.0], [54.5, 3102.0], [54.6, 3102.0], [54.7, 3168.0], [54.8, 3168.0], [54.9, 3168.0], [55.0, 3168.0], [55.1, 3192.0], [55.2, 3192.0], [55.3, 3192.0], [55.4, 3273.0], [55.5, 3273.0], [55.6, 3273.0], [55.7, 3273.0], [55.8, 3273.0], [55.9, 3273.0], [56.0, 3273.0], [56.1, 3325.0], [56.2, 3325.0], [56.3, 3325.0], [56.4, 3352.0], [56.5, 3352.0], [56.6, 3352.0], [56.7, 3559.0], [56.8, 3559.0], [56.9, 3559.0], [57.0, 3559.0], [57.1, 3565.0], [57.2, 3565.0], [57.3, 3565.0], [57.4, 3577.0], [57.5, 3577.0], [57.6, 3577.0], [57.7, 3601.0], [57.8, 3601.0], [57.9, 3601.0], [58.0, 3601.0], [58.1, 3602.0], [58.2, 3602.0], [58.3, 3602.0], [58.4, 3718.0], [58.5, 3718.0], [58.6, 3718.0], [58.7, 3739.0], [58.8, 3739.0], [58.9, 3739.0], [59.0, 3739.0], [59.1, 3742.0], [59.2, 3742.0], [59.3, 3742.0], [59.4, 3742.0], [59.5, 3742.0], [59.6, 3742.0], [59.7, 3742.0], [59.8, 3742.0], [59.9, 3742.0], [60.0, 3742.0], [60.1, 3749.0], [60.2, 3749.0], [60.3, 3749.0], [60.4, 3749.0], [60.5, 3749.0], [60.6, 3749.0], [60.7, 3753.0], [60.8, 3753.0], [60.9, 3753.0], [61.0, 3753.0], [61.1, 3755.0], [61.2, 3755.0], [61.3, 3755.0], [61.4, 3928.0], [61.5, 3928.0], [61.6, 3928.0], [61.7, 4015.0], [61.8, 4015.0], [61.9, 4015.0], [62.0, 4015.0], [62.1, 4129.0], [62.2, 4129.0], [62.3, 4129.0], [62.4, 4130.0], [62.5, 4130.0], [62.6, 4130.0], [62.7, 4131.0], [62.8, 4131.0], [62.9, 4131.0], [63.0, 4131.0], [63.1, 4249.0], [63.2, 4249.0], [63.3, 4249.0], [63.4, 4322.0], [63.5, 4322.0], [63.6, 4322.0], [63.7, 4355.0], [63.8, 4355.0], [63.9, 4355.0], [64.0, 4355.0], [64.1, 4356.0], [64.2, 4356.0], [64.3, 4356.0], [64.4, 4356.0], [64.5, 4356.0], [64.6, 4356.0], [64.7, 4362.0], [64.8, 4362.0], [64.9, 4362.0], [65.0, 4362.0], [65.1, 4663.0], [65.2, 4663.0], [65.3, 4663.0], [65.4, 4663.0], [65.5, 4663.0], [65.6, 4663.0], [65.7, 4668.0], [65.8, 4668.0], [65.9, 4668.0], [66.0, 4668.0], [66.1, 4740.0], [66.2, 4740.0], [66.3, 4740.0], [66.4, 4743.0], [66.5, 4743.0], [66.6, 4743.0], [66.7, 4817.0], [66.8, 4817.0], [66.9, 4817.0], [67.0, 4817.0], [67.1, 4819.0], [67.2, 4819.0], [67.3, 4819.0], [67.4, 4820.0], [67.5, 4820.0], [67.6, 4820.0], [67.7, 4906.0], [67.8, 4906.0], [67.9, 4906.0], [68.0, 4906.0], [68.1, 4913.0], [68.2, 4913.0], [68.3, 4913.0], [68.4, 4913.0], [68.5, 4913.0], [68.6, 4913.0], [68.7, 4913.0], [68.8, 4913.0], [68.9, 4913.0], [69.0, 4913.0], [69.1, 4932.0], [69.2, 4932.0], [69.3, 4932.0], [69.4, 4932.0], [69.5, 4932.0], [69.6, 4932.0], [69.7, 4933.0], [69.8, 4933.0], [69.9, 4933.0], [70.0, 4933.0], [70.1, 4989.0], [70.2, 4989.0], [70.3, 4989.0], [70.4, 4998.0], [70.5, 4998.0], [70.6, 4998.0], [70.7, 5001.0], [70.8, 5001.0], [70.9, 5001.0], [71.0, 5001.0], [71.1, 5176.0], [71.2, 5176.0], [71.3, 5176.0], [71.4, 5242.0], [71.5, 5242.0], [71.6, 5242.0], [71.7, 5398.0], [71.8, 5398.0], [71.9, 5398.0], [72.0, 5398.0], [72.1, 5406.0], [72.2, 5406.0], [72.3, 5406.0], [72.4, 5584.0], [72.5, 5584.0], [72.6, 5584.0], [72.7, 5584.0], [72.8, 5584.0], [72.9, 5584.0], [73.0, 5584.0], [73.1, 5585.0], [73.2, 5585.0], [73.3, 5585.0], [73.4, 5586.0], [73.5, 5586.0], [73.6, 5586.0], [73.7, 5586.0], [73.8, 5586.0], [73.9, 5586.0], [74.0, 5586.0], [74.1, 5586.0], [74.2, 5586.0], [74.3, 5586.0], [74.4, 5656.0], [74.5, 5656.0], [74.6, 5656.0], [74.7, 5656.0], [74.8, 5656.0], [74.9, 5656.0], [75.0, 5656.0], [75.1, 5667.0], [75.2, 5667.0], [75.3, 5667.0], [75.4, 6098.0], [75.5, 6098.0], [75.6, 6098.0], [75.7, 6103.0], [75.8, 6103.0], [75.9, 6103.0], [76.0, 6103.0], [76.1, 6269.0], [76.2, 6269.0], [76.3, 6269.0], [76.4, 8070.0], [76.5, 8070.0], [76.6, 8070.0], [76.7, 10111.0], [76.8, 10111.0], [76.9, 10111.0], [77.0, 10111.0], [77.1, 11223.0], [77.2, 11223.0], [77.3, 11223.0], [77.4, 11622.0], [77.5, 11622.0], [77.6, 11622.0], [77.7, 11622.0], [77.8, 11622.0], [77.9, 11622.0], [78.0, 11622.0], [78.1, 13113.0], [78.2, 13113.0], [78.3, 13113.0], [78.4, 13119.0], [78.5, 13119.0], [78.6, 13119.0], [78.7, 13119.0], [78.8, 13119.0], [78.9, 13119.0], [79.0, 13119.0], [79.1, 13190.0], [79.2, 13190.0], [79.3, 13190.0], [79.4, 13190.0], [79.5, 13190.0], [79.6, 13190.0], [79.7, 13190.0], [79.8, 13190.0], [79.9, 13190.0], [80.0, 13190.0], [80.1, 13191.0], [80.2, 13191.0], [80.3, 13191.0], [80.4, 13210.0], [80.5, 13210.0], [80.6, 13210.0], [80.7, 13225.0], [80.8, 13225.0], [80.9, 13225.0], [81.0, 13225.0], [81.1, 13246.0], [81.2, 13246.0], [81.3, 13246.0], [81.4, 13637.0], [81.5, 13637.0], [81.6, 13637.0], [81.7, 13666.0], [81.8, 13666.0], [81.9, 13666.0], [82.0, 13666.0], [82.1, 13666.0], [82.2, 13666.0], [82.3, 13666.0], [82.4, 13743.0], [82.5, 13743.0], [82.6, 13743.0], [82.7, 13743.0], [82.8, 13743.0], [82.9, 13743.0], [83.0, 13743.0], [83.1, 13743.0], [83.2, 13743.0], [83.3, 13743.0], [83.4, 13744.0], [83.5, 13744.0], [83.6, 13744.0], [83.7, 13744.0], [83.8, 13744.0], [83.9, 13744.0], [84.0, 13744.0], [84.1, 13744.0], [84.2, 13744.0], [84.3, 13744.0], [84.4, 14092.0], [84.5, 14092.0], [84.6, 14092.0], [84.7, 14116.0], [84.8, 14116.0], [84.9, 14116.0], [85.0, 14116.0], [85.1, 14116.0], [85.2, 14116.0], [85.3, 14116.0], [85.4, 14304.0], [85.5, 14304.0], [85.6, 14304.0], [85.7, 14305.0], [85.8, 14305.0], [85.9, 14305.0], [86.0, 14358.0], [86.1, 14358.0], [86.2, 14358.0], [86.3, 14358.0], [86.4, 14366.0], [86.5, 14366.0], [86.6, 14366.0], [86.7, 14421.0], [86.8, 14421.0], [86.9, 14421.0], [87.0, 14434.0], [87.1, 14434.0], [87.2, 14434.0], [87.3, 14434.0], [87.4, 14435.0], [87.5, 14435.0], [87.6, 14435.0], [87.7, 14438.0], [87.8, 14438.0], [87.9, 14438.0], [88.0, 14441.0], [88.1, 14441.0], [88.2, 14441.0], [88.3, 14441.0], [88.4, 14449.0], [88.5, 14449.0], [88.6, 14449.0], [88.7, 14502.0], [88.8, 14502.0], [88.9, 14502.0], [89.0, 14881.0], [89.1, 14881.0], [89.2, 14881.0], [89.3, 14881.0], [89.4, 15164.0], [89.5, 15164.0], [89.6, 15164.0], [89.7, 15189.0], [89.8, 15189.0], [89.9, 15189.0], [90.0, 15193.0], [90.1, 15193.0], [90.2, 15193.0], [90.3, 15193.0], [90.4, 15193.0], [90.5, 15193.0], [90.6, 15193.0], [90.7, 15268.0], [90.8, 15268.0], [90.9, 15268.0], [91.0, 15348.0], [91.1, 15348.0], [91.2, 15348.0], [91.3, 15348.0], [91.4, 15348.0], [91.5, 15348.0], [91.6, 15348.0], [91.7, 15494.0], [91.8, 15494.0], [91.9, 15494.0], [92.0, 15496.0], [92.1, 15496.0], [92.2, 15496.0], [92.3, 15496.0], [92.4, 15496.0], [92.5, 15496.0], [92.6, 15496.0], [92.7, 15497.0], [92.8, 15497.0], [92.9, 15497.0], [93.0, 15497.0], [93.1, 15497.0], [93.2, 15497.0], [93.3, 15497.0], [93.4, 15672.0], [93.5, 15672.0], [93.6, 15672.0], [93.7, 15673.0], [93.8, 15673.0], [93.9, 15673.0], [94.0, 15673.0], [94.1, 15673.0], [94.2, 15673.0], [94.3, 15673.0], [94.4, 15674.0], [94.5, 15674.0], [94.6, 15674.0], [94.7, 15751.0], [94.8, 15751.0], [94.9, 15751.0], [95.0, 16238.0], [95.1, 16238.0], [95.2, 16238.0], [95.3, 16238.0], [95.4, 16427.0], [95.5, 16427.0], [95.6, 16427.0], [95.7, 16427.0], [95.8, 16427.0], [95.9, 16427.0], [96.0, 16429.0], [96.1, 16429.0], [96.2, 16429.0], [96.3, 16429.0], [96.4, 16433.0], [96.5, 16433.0], [96.6, 16433.0], [96.7, 16440.0], [96.8, 16440.0], [96.9, 16440.0], [97.0, 16551.0], [97.1, 16551.0], [97.2, 16551.0], [97.3, 16551.0], [97.4, 16617.0], [97.5, 16617.0], [97.6, 16617.0], [97.7, 16698.0], [97.8, 16698.0], [97.9, 16698.0], [98.0, 16700.0], [98.1, 16700.0], [98.2, 16700.0], [98.3, 16700.0], [98.4, 16706.0], [98.5, 16706.0], [98.6, 16706.0], [98.7, 16848.0], [98.8, 16848.0], [98.9, 16848.0], [99.0, 17290.0], [99.1, 17290.0], [99.2, 17290.0], [99.3, 17290.0], [99.4, 17290.0], [99.5, 17290.0], [99.6, 17290.0], [99.7, 17294.0], [99.8, 17294.0], [99.9, 17294.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[0.0, 811.0], [0.1, 811.0], [0.2, 811.0], [0.3, 811.0], [0.4, 835.0], [0.5, 835.0], [0.6, 835.0], [0.7, 863.0], [0.8, 863.0], [0.9, 863.0], [1.0, 914.0], [1.1, 914.0], [1.2, 914.0], [1.3, 914.0], [1.4, 914.0], [1.5, 914.0], [1.6, 914.0], [1.7, 925.0], [1.8, 925.0], [1.9, 925.0], [2.0, 993.0], [2.1, 993.0], [2.2, 993.0], [2.3, 993.0], [2.4, 1022.0], [2.5, 1022.0], [2.6, 1022.0], [2.7, 1022.0], [2.8, 1022.0], [2.9, 1022.0], [3.0, 1041.0], [3.1, 1041.0], [3.2, 1041.0], [3.3, 1041.0], [3.4, 1046.0], [3.5, 1046.0], [3.6, 1046.0], [3.7, 1192.0], [3.8, 1192.0], [3.9, 1192.0], [4.0, 1194.0], [4.1, 1194.0], [4.2, 1194.0], [4.3, 1194.0], [4.4, 1194.0], [4.5, 1194.0], [4.6, 1194.0], [4.7, 1424.0], [4.8, 1424.0], [4.9, 1424.0], [5.0, 1640.0], [5.1, 1640.0], [5.2, 1640.0], [5.3, 1640.0], [5.4, 1647.0], [5.5, 1647.0], [5.6, 1647.0], [5.7, 1931.0], [5.8, 1931.0], [5.9, 1931.0], [6.0, 1950.0], [6.1, 1950.0], [6.2, 1950.0], [6.3, 1950.0], [6.4, 1953.0], [6.5, 1953.0], [6.6, 1953.0], [6.7, 2014.0], [6.8, 2014.0], [6.9, 2014.0], [7.0, 2038.0], [7.1, 2038.0], [7.2, 2038.0], [7.3, 2038.0], [7.4, 2141.0], [7.5, 2141.0], [7.6, 2141.0], [7.7, 2182.0], [7.8, 2182.0], [7.9, 2182.0], [8.0, 2375.0], [8.1, 2375.0], [8.2, 2375.0], [8.3, 2375.0], [8.4, 2377.0], [8.5, 2377.0], [8.6, 2377.0], [8.7, 2409.0], [8.8, 2409.0], [8.9, 2409.0], [9.0, 2517.0], [9.1, 2517.0], [9.2, 2517.0], [9.3, 2517.0], [9.4, 2518.0], [9.5, 2518.0], [9.6, 2518.0], [9.7, 2544.0], [9.8, 2544.0], [9.9, 2544.0], [10.0, 2613.0], [10.1, 2613.0], [10.2, 2613.0], [10.3, 2613.0], [10.4, 2726.0], [10.5, 2726.0], [10.6, 2726.0], [10.7, 2909.0], [10.8, 2909.0], [10.9, 2909.0], [11.0, 2909.0], [11.1, 3033.0], [11.2, 3033.0], [11.3, 3033.0], [11.4, 3322.0], [11.5, 3322.0], [11.6, 3322.0], [11.7, 3322.0], [11.8, 3322.0], [11.9, 3322.0], [12.0, 3322.0], [12.1, 3349.0], [12.2, 3349.0], [12.3, 3349.0], [12.4, 3542.0], [12.5, 3542.0], [12.6, 3542.0], [12.7, 3552.0], [12.8, 3552.0], [12.9, 3552.0], [13.0, 3552.0], [13.1, 3568.0], [13.2, 3568.0], [13.3, 3568.0], [13.4, 3809.0], [13.5, 3809.0], [13.6, 3809.0], [13.7, 3831.0], [13.8, 3831.0], [13.9, 3831.0], [14.0, 3831.0], [14.1, 3833.0], [14.2, 3833.0], [14.3, 3833.0], [14.4, 3834.0], [14.5, 3834.0], [14.6, 3834.0], [14.7, 3841.0], [14.8, 3841.0], [14.9, 3841.0], [15.0, 3841.0], [15.1, 3874.0], [15.2, 3874.0], [15.3, 3874.0], [15.4, 3925.0], [15.5, 3925.0], [15.6, 3925.0], [15.7, 3939.0], [15.8, 3939.0], [15.9, 3939.0], [16.0, 3939.0], [16.1, 3960.0], [16.2, 3960.0], [16.3, 3960.0], [16.4, 3960.0], [16.5, 3960.0], [16.6, 3960.0], [16.7, 3960.0], [16.8, 3960.0], [16.9, 3960.0], [17.0, 3960.0], [17.1, 4037.0], [17.2, 4037.0], [17.3, 4037.0], [17.4, 4038.0], [17.5, 4038.0], [17.6, 4038.0], [17.7, 4084.0], [17.8, 4084.0], [17.9, 4084.0], [18.0, 4084.0], [18.1, 4087.0], [18.2, 4087.0], [18.3, 4087.0], [18.4, 4102.0], [18.5, 4102.0], [18.6, 4102.0], [18.7, 4114.0], [18.8, 4114.0], [18.9, 4114.0], [19.0, 5097.0], [19.1, 5097.0], [19.2, 5097.0], [19.3, 5097.0], [19.4, 5176.0], [19.5, 5176.0], [19.6, 5176.0], [19.7, 5329.0], [19.8, 5329.0], [19.9, 5329.0], [20.0, 5456.0], [20.1, 5456.0], [20.2, 5456.0], [20.3, 5456.0], [20.4, 5533.0], [20.5, 5533.0], [20.6, 5533.0], [20.7, 5535.0], [20.8, 5535.0], [20.9, 5535.0], [21.0, 5782.0], [21.1, 5782.0], [21.2, 5782.0], [21.3, 5782.0], [21.4, 6090.0], [21.5, 6090.0], [21.6, 6090.0], [21.7, 6091.0], [21.8, 6091.0], [21.9, 6091.0], [22.0, 6093.0], [22.1, 6093.0], [22.2, 6093.0], [22.3, 6093.0], [22.4, 6093.0], [22.5, 6093.0], [22.6, 6093.0], [22.7, 6095.0], [22.8, 6095.0], [22.9, 6095.0], [23.0, 6361.0], [23.1, 6361.0], [23.2, 6361.0], [23.3, 6361.0], [23.4, 6531.0], [23.5, 6531.0], [23.6, 6531.0], [23.7, 6533.0], [23.8, 6533.0], [23.9, 6533.0], [24.0, 6581.0], [24.1, 6581.0], [24.2, 6581.0], [24.3, 6581.0], [24.4, 6599.0], [24.5, 6599.0], [24.6, 6599.0], [24.7, 6643.0], [24.8, 6643.0], [24.9, 6643.0], [25.0, 6644.0], [25.1, 6644.0], [25.2, 6644.0], [25.3, 6644.0], [25.4, 6661.0], [25.5, 6661.0], [25.6, 6661.0], [25.7, 6668.0], [25.8, 6668.0], [25.9, 6668.0], [26.0, 6702.0], [26.1, 6702.0], [26.2, 6702.0], [26.3, 6702.0], [26.4, 6716.0], [26.5, 6716.0], [26.6, 6716.0], [26.7, 6789.0], [26.8, 6789.0], [26.9, 6789.0], [27.0, 7004.0], [27.1, 7004.0], [27.2, 7004.0], [27.3, 7004.0], [27.4, 7007.0], [27.5, 7007.0], [27.6, 7007.0], [27.7, 7213.0], [27.8, 7213.0], [27.9, 7213.0], [28.0, 7346.0], [28.1, 7346.0], [28.2, 7346.0], [28.3, 7346.0], [28.4, 7599.0], [28.5, 7599.0], [28.6, 7599.0], [28.7, 7607.0], [28.8, 7607.0], [28.9, 7607.0], [29.0, 8111.0], [29.1, 8111.0], [29.2, 8111.0], [29.3, 8111.0], [29.4, 8111.0], [29.5, 8111.0], [29.6, 8111.0], [29.7, 8112.0], [29.8, 8112.0], [29.9, 8112.0], [30.0, 9113.0], [30.1, 9113.0], [30.2, 9113.0], [30.3, 9113.0], [30.4, 9145.0], [30.5, 9145.0], [30.6, 9145.0], [30.7, 9145.0], [30.8, 9145.0], [30.9, 9145.0], [31.0, 9317.0], [31.1, 9317.0], [31.2, 9317.0], [31.3, 9317.0], [31.4, 9706.0], [31.5, 9706.0], [31.6, 9706.0], [31.7, 10025.0], [31.8, 10025.0], [31.9, 10025.0], [32.0, 10026.0], [32.1, 10026.0], [32.2, 10026.0], [32.3, 10026.0], [32.4, 10026.0], [32.5, 10026.0], [32.6, 10026.0], [32.7, 10028.0], [32.8, 10028.0], [32.9, 10028.0], [33.0, 10340.0], [33.1, 10340.0], [33.2, 10340.0], [33.3, 10340.0], [33.4, 10516.0], [33.5, 10516.0], [33.6, 10516.0], [33.7, 10517.0], [33.8, 10517.0], [33.9, 10517.0], [34.0, 10523.0], [34.1, 10523.0], [34.2, 10523.0], [34.3, 10523.0], [34.4, 10525.0], [34.5, 10525.0], [34.6, 10525.0], [34.7, 10526.0], [34.8, 10526.0], [34.9, 10526.0], [35.0, 10536.0], [35.1, 10536.0], [35.2, 10536.0], [35.3, 10536.0], [35.4, 10720.0], [35.5, 10720.0], [35.6, 10720.0], [35.7, 10928.0], [35.8, 10928.0], [35.9, 10928.0], [36.0, 10956.0], [36.1, 10956.0], [36.2, 10956.0], [36.3, 10956.0], [36.4, 11022.0], [36.5, 11022.0], [36.6, 11022.0], [36.7, 11023.0], [36.8, 11023.0], [36.9, 11023.0], [37.0, 11024.0], [37.1, 11024.0], [37.2, 11024.0], [37.3, 11024.0], [37.4, 11025.0], [37.5, 11025.0], [37.6, 11025.0], [37.7, 11033.0], [37.8, 11033.0], [37.9, 11033.0], [38.0, 11033.0], [38.1, 11033.0], [38.2, 11033.0], [38.3, 11033.0], [38.4, 11369.0], [38.5, 11369.0], [38.6, 11369.0], [38.7, 12057.0], [38.8, 12057.0], [38.9, 12057.0], [39.0, 12279.0], [39.1, 12279.0], [39.2, 12279.0], [39.3, 12279.0], [39.4, 12288.0], [39.5, 12288.0], [39.6, 12288.0], [39.7, 12288.0], [39.8, 12288.0], [39.9, 12288.0], [40.0, 12685.0], [40.1, 12685.0], [40.2, 12685.0], [40.3, 12685.0], [40.4, 12686.0], [40.5, 12686.0], [40.6, 12686.0], [40.7, 12700.0], [40.8, 12700.0], [40.9, 12700.0], [41.0, 12700.0], [41.1, 13069.0], [41.2, 13069.0], [41.3, 13069.0], [41.4, 13110.0], [41.5, 13110.0], [41.6, 13110.0], [41.7, 13411.0], [41.8, 13411.0], [41.9, 13411.0], [42.0, 13411.0], [42.1, 13412.0], [42.2, 13412.0], [42.3, 13412.0], [42.4, 13691.0], [42.5, 13691.0], [42.6, 13691.0], [42.7, 13809.0], [42.8, 13809.0], [42.9, 13809.0], [43.0, 13809.0], [43.1, 14135.0], [43.2, 14135.0], [43.3, 14135.0], [43.4, 14218.0], [43.5, 14218.0], [43.6, 14218.0], [43.7, 14272.0], [43.8, 14272.0], [43.9, 14272.0], [44.0, 14272.0], [44.1, 14303.0], [44.2, 14303.0], [44.3, 14303.0], [44.4, 14306.0], [44.5, 14306.0], [44.6, 14306.0], [44.7, 14337.0], [44.8, 14337.0], [44.9, 14337.0], [45.0, 14337.0], [45.1, 14473.0], [45.2, 14473.0], [45.3, 14473.0], [45.4, 15120.0], [45.5, 15120.0], [45.6, 15120.0], [45.7, 15120.0], [45.8, 15120.0], [45.9, 15120.0], [46.0, 15120.0], [46.1, 15121.0], [46.2, 15121.0], [46.3, 15121.0], [46.4, 15121.0], [46.5, 15121.0], [46.6, 15121.0], [46.7, 15361.0], [46.8, 15361.0], [46.9, 15361.0], [47.0, 15361.0], [47.1, 15460.0], [47.2, 15460.0], [47.3, 15460.0], [47.4, 15533.0], [47.5, 15533.0], [47.6, 15533.0], [47.7, 15541.0], [47.8, 15541.0], [47.9, 15541.0], [48.0, 15541.0], [48.1, 15654.0], [48.2, 15654.0], [48.3, 15654.0], [48.4, 15661.0], [48.5, 15661.0], [48.6, 15661.0], [48.7, 15683.0], [48.8, 15683.0], [48.9, 15683.0], [49.0, 15683.0], [49.1, 15982.0], [49.2, 15982.0], [49.3, 15982.0], [49.4, 15991.0], [49.5, 15991.0], [49.6, 15991.0], [49.7, 16140.0], [49.8, 16140.0], [49.9, 16140.0], [50.0, 16140.0], [50.1, 16977.0], [50.2, 16977.0], [50.3, 16977.0], [50.4, 16978.0], [50.5, 16978.0], [50.6, 16978.0], [50.7, 17209.0], [50.8, 17209.0], [50.9, 17209.0], [51.0, 17209.0], [51.1, 17337.0], [51.2, 17337.0], [51.3, 17337.0], [51.4, 17339.0], [51.5, 17339.0], [51.6, 17339.0], [51.7, 17342.0], [51.8, 17342.0], [51.9, 17342.0], [52.0, 17342.0], [52.1, 17350.0], [52.2, 17350.0], [52.3, 17350.0], [52.4, 17351.0], [52.5, 17351.0], [52.6, 17351.0], [52.7, 17353.0], [52.8, 17353.0], [52.9, 17353.0], [53.0, 17353.0], [53.1, 17354.0], [53.2, 17354.0], [53.3, 17354.0], [53.4, 17367.0], [53.5, 17367.0], [53.6, 17367.0], [53.7, 17556.0], [53.8, 17556.0], [53.9, 17556.0], [54.0, 17556.0], [54.1, 17571.0], [54.2, 17571.0], [54.3, 17571.0], [54.4, 17571.0], [54.5, 17571.0], [54.6, 17571.0], [54.7, 17589.0], [54.8, 17589.0], [54.9, 17589.0], [55.0, 17589.0], [55.1, 17604.0], [55.2, 17604.0], [55.3, 17604.0], [55.4, 17607.0], [55.5, 17607.0], [55.6, 17607.0], [55.7, 17742.0], [55.8, 17742.0], [55.9, 17742.0], [56.0, 17742.0], [56.1, 17744.0], [56.2, 17744.0], [56.3, 17744.0], [56.4, 17744.0], [56.5, 17744.0], [56.6, 17744.0], [56.7, 17747.0], [56.8, 17747.0], [56.9, 17747.0], [57.0, 17747.0], [57.1, 18218.0], [57.2, 18218.0], [57.3, 18218.0], [57.4, 18219.0], [57.5, 18219.0], [57.6, 18219.0], [57.7, 18385.0], [57.8, 18385.0], [57.9, 18385.0], [58.0, 18385.0], [58.1, 18393.0], [58.2, 18393.0], [58.3, 18393.0], [58.4, 18394.0], [58.5, 18394.0], [58.6, 18394.0], [58.7, 18397.0], [58.8, 18397.0], [58.9, 18397.0], [59.0, 18397.0], [59.1, 18404.0], [59.2, 18404.0], [59.3, 18404.0], [59.4, 18446.0], [59.5, 18446.0], [59.6, 18446.0], [59.7, 21828.0], [59.8, 21828.0], [59.9, 21828.0], [60.0, 21828.0], [60.1, 21841.0], [60.2, 21841.0], [60.3, 21841.0], [60.4, 21841.0], [60.5, 21841.0], [60.6, 21841.0], [60.7, 21842.0], [60.8, 21842.0], [60.9, 21842.0], [61.0, 21842.0], [61.1, 22708.0], [61.2, 22708.0], [61.3, 22708.0], [61.4, 22720.0], [61.5, 22720.0], [61.6, 22720.0], [61.7, 24370.0], [61.8, 24370.0], [61.9, 24370.0], [62.0, 24370.0], [62.1, 24370.0], [62.2, 24370.0], [62.3, 24370.0], [62.4, 30817.0], [62.5, 30817.0], [62.6, 30817.0], [62.7, 30826.0], [62.8, 30826.0], [62.9, 30826.0], [63.0, 30826.0], [63.1, 30837.0], [63.2, 30837.0], [63.3, 30837.0], [63.4, 30844.0], [63.5, 30844.0], [63.6, 30844.0], [63.7, 30850.0], [63.8, 30850.0], [63.9, 30850.0], [64.0, 30850.0], [64.1, 30865.0], [64.2, 30865.0], [64.3, 30865.0], [64.4, 30869.0], [64.5, 30869.0], [64.6, 30869.0], [64.7, 30871.0], [64.8, 30871.0], [64.9, 30871.0], [65.0, 30871.0], [65.1, 30871.0], [65.2, 30871.0], [65.3, 30871.0], [65.4, 30872.0], [65.5, 30872.0], [65.6, 30872.0], [65.7, 30873.0], [65.8, 30873.0], [65.9, 30873.0], [66.0, 30873.0], [66.1, 30875.0], [66.2, 30875.0], [66.3, 30875.0], [66.4, 30880.0], [66.5, 30880.0], [66.6, 30880.0], [66.7, 30881.0], [66.8, 30881.0], [66.9, 30881.0], [67.0, 30881.0], [67.1, 30890.0], [67.2, 30890.0], [67.3, 30890.0], [67.4, 30890.0], [67.5, 30890.0], [67.6, 30890.0], [67.7, 30891.0], [67.8, 30891.0], [67.9, 30891.0], [68.0, 30891.0], [68.1, 30894.0], [68.2, 30894.0], [68.3, 30894.0], [68.4, 30894.0], [68.5, 30894.0], [68.6, 30894.0], [68.7, 30903.0], [68.8, 30903.0], [68.9, 30903.0], [69.0, 30903.0], [69.1, 30908.0], [69.2, 30908.0], [69.3, 30908.0], [69.4, 30910.0], [69.5, 30910.0], [69.6, 30910.0], [69.7, 30911.0], [69.8, 30911.0], [69.9, 30911.0], [70.0, 30911.0], [70.1, 30914.0], [70.2, 30914.0], [70.3, 30914.0], [70.4, 30914.0], [70.5, 30914.0], [70.6, 30914.0], [70.7, 30917.0], [70.8, 30917.0], [70.9, 30917.0], [71.0, 30917.0], [71.1, 31004.0], [71.2, 31004.0], [71.3, 31004.0], [71.4, 31031.0], [71.5, 31031.0], [71.6, 31031.0], [71.7, 31038.0], [71.8, 31038.0], [71.9, 31038.0], [72.0, 31038.0], [72.1, 31048.0], [72.2, 31048.0], [72.3, 31048.0], [72.4, 31066.0], [72.5, 31066.0], [72.6, 31066.0], [72.7, 31085.0], [72.8, 31085.0], [72.9, 31085.0], [73.0, 31085.0], [73.1, 31177.0], [73.2, 31177.0], [73.3, 31177.0], [73.4, 31178.0], [73.5, 31178.0], [73.6, 31178.0], [73.7, 31178.0], [73.8, 31178.0], [73.9, 31178.0], [74.0, 31178.0], [74.1, 31184.0], [74.2, 31184.0], [74.3, 31184.0], [74.4, 31189.0], [74.5, 31189.0], [74.6, 31189.0], [74.7, 31190.0], [74.8, 31190.0], [74.9, 31190.0], [75.0, 31190.0], [75.1, 31192.0], [75.2, 31192.0], [75.3, 31192.0], [75.4, 31195.0], [75.5, 31195.0], [75.6, 31195.0], [75.7, 31225.0], [75.8, 31225.0], [75.9, 31225.0], [76.0, 31225.0], [76.1, 31230.0], [76.2, 31230.0], [76.3, 31230.0], [76.4, 32079.0], [76.5, 32079.0], [76.6, 32079.0], [76.7, 32090.0], [76.8, 32090.0], [76.9, 32090.0], [77.0, 32090.0], [77.1, 32096.0], [77.2, 32096.0], [77.3, 32096.0], [77.4, 36990.0], [77.5, 36990.0], [77.6, 36990.0], [77.7, 38445.0], [77.8, 38445.0], [77.9, 38445.0], [78.0, 39404.0], [78.1, 39404.0], [78.2, 39404.0], [78.3, 39404.0], [78.4, 39411.0], [78.5, 39411.0], [78.6, 39411.0], [78.7, 39416.0], [78.8, 39416.0], [78.9, 39416.0], [79.0, 39423.0], [79.1, 39423.0], [79.2, 39423.0], [79.3, 39423.0], [79.4, 39424.0], [79.5, 39424.0], [79.6, 39424.0], [79.7, 39671.0], [79.8, 39671.0], [79.9, 39671.0], [80.0, 39673.0], [80.1, 39673.0], [80.2, 39673.0], [80.3, 39673.0], [80.4, 39674.0], [80.5, 39674.0], [80.6, 39674.0], [80.7, 39678.0], [80.8, 39678.0], [80.9, 39678.0], [81.0, 40727.0], [81.1, 40727.0], [81.2, 40727.0], [81.3, 40727.0], [81.4, 41421.0], [81.5, 41421.0], [81.6, 41421.0], [81.7, 41423.0], [81.8, 41423.0], [81.9, 41423.0], [82.0, 41433.0], [82.1, 41433.0], [82.2, 41433.0], [82.3, 41433.0], [82.4, 41447.0], [82.5, 41447.0], [82.6, 41447.0], [82.7, 41457.0], [82.8, 41457.0], [82.9, 41457.0], [83.0, 41638.0], [83.1, 41638.0], [83.2, 41638.0], [83.3, 41638.0], [83.4, 41856.0], [83.5, 41856.0], [83.6, 41856.0], [83.7, 42172.0], [83.8, 42172.0], [83.9, 42172.0], [84.0, 42174.0], [84.1, 42174.0], [84.2, 42174.0], [84.3, 42174.0], [84.4, 42263.0], [84.5, 42263.0], [84.6, 42263.0], [84.7, 42263.0], [84.8, 42263.0], [84.9, 42263.0], [85.0, 42263.0], [85.1, 42263.0], [85.2, 42263.0], [85.3, 42263.0], [85.4, 42288.0], [85.5, 42288.0], [85.6, 42288.0], [85.7, 42645.0], [85.8, 42645.0], [85.9, 42645.0], [86.0, 42780.0], [86.1, 42780.0], [86.2, 42780.0], [86.3, 42780.0], [86.4, 42795.0], [86.5, 42795.0], [86.6, 42795.0], [86.7, 42828.0], [86.8, 42828.0], [86.9, 42828.0], [87.0, 42837.0], [87.1, 42837.0], [87.2, 42837.0], [87.3, 42837.0], [87.4, 42842.0], [87.5, 42842.0], [87.6, 42842.0], [87.7, 42856.0], [87.8, 42856.0], [87.9, 42856.0], [88.0, 42863.0], [88.1, 42863.0], [88.2, 42863.0], [88.3, 42863.0], [88.4, 43584.0], [88.5, 43584.0], [88.6, 43584.0], [88.7, 44308.0], [88.8, 44308.0], [88.9, 44308.0], [89.0, 44336.0], [89.1, 44336.0], [89.2, 44336.0], [89.3, 44336.0], [89.4, 44811.0], [89.5, 44811.0], [89.6, 44811.0], [89.7, 44814.0], [89.8, 44814.0], [89.9, 44814.0], [90.0, 44974.0], [90.1, 44974.0], [90.2, 44974.0], [90.3, 44974.0], [90.4, 44983.0], [90.5, 44983.0], [90.6, 44983.0], [90.7, 45027.0], [90.8, 45027.0], [90.9, 45027.0], [91.0, 45056.0], [91.1, 45056.0], [91.2, 45056.0], [91.3, 45056.0], [91.4, 45080.0], [91.5, 45080.0], [91.6, 45080.0], [91.7, 45115.0], [91.8, 45115.0], [91.9, 45115.0], [92.0, 45125.0], [92.1, 45125.0], [92.2, 45125.0], [92.3, 45125.0], [92.4, 45921.0], [92.5, 45921.0], [92.6, 45921.0], [92.7, 45922.0], [92.8, 45922.0], [92.9, 45922.0], [93.0, 45933.0], [93.1, 45933.0], [93.2, 45933.0], [93.3, 45933.0], [93.4, 45940.0], [93.5, 45940.0], [93.6, 45940.0], [93.7, 45999.0], [93.8, 45999.0], [93.9, 45999.0], [94.0, 46434.0], [94.1, 46434.0], [94.2, 46434.0], [94.3, 46434.0], [94.4, 46608.0], [94.5, 46608.0], [94.6, 46608.0], [94.7, 46644.0], [94.8, 46644.0], [94.9, 46644.0], [95.0, 46660.0], [95.1, 46660.0], [95.2, 46660.0], [95.3, 46660.0], [95.4, 46670.0], [95.5, 46670.0], [95.6, 46670.0], [95.7, 46681.0], [95.8, 46681.0], [95.9, 46681.0], [96.0, 46681.0], [96.1, 46681.0], [96.2, 46681.0], [96.3, 46681.0], [96.4, 46948.0], [96.5, 46948.0], [96.6, 46948.0], [96.7, 46950.0], [96.8, 46950.0], [96.9, 46950.0], [97.0, 46955.0], [97.1, 46955.0], [97.2, 46955.0], [97.3, 46955.0], [97.4, 46956.0], [97.5, 46956.0], [97.6, 46956.0], [97.7, 47178.0], [97.8, 47178.0], [97.9, 47178.0], [98.0, 47184.0], [98.1, 47184.0], [98.2, 47184.0], [98.3, 47184.0], [98.4, 47186.0], [98.5, 47186.0], [98.6, 47186.0], [98.7, 47429.0], [98.8, 47429.0], [98.9, 47429.0], [99.0, 47525.0], [99.1, 47525.0], [99.2, 47525.0], [99.3, 47525.0], [99.4, 47526.0], [99.5, 47526.0], [99.6, 47526.0], [99.7, 47527.0], [99.8, 47527.0], [99.9, 47527.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[0.0, 88.0], [0.1, 88.0], [0.2, 88.0], [0.3, 88.0], [0.4, 88.0], [0.5, 88.0], [0.6, 88.0], [0.7, 89.0], [0.8, 89.0], [0.9, 89.0], [1.0, 91.0], [1.1, 91.0], [1.2, 91.0], [1.3, 91.0], [1.4, 92.0], [1.5, 92.0], [1.6, 92.0], [1.7, 92.0], [1.8, 92.0], [1.9, 92.0], [2.0, 94.0], [2.1, 94.0], [2.2, 94.0], [2.3, 94.0], [2.4, 94.0], [2.5, 94.0], [2.6, 94.0], [2.7, 94.0], [2.8, 94.0], [2.9, 94.0], [3.0, 95.0], [3.1, 95.0], [3.2, 95.0], [3.3, 95.0], [3.4, 95.0], [3.5, 95.0], [3.6, 95.0], [3.7, 96.0], [3.8, 96.0], [3.9, 96.0], [4.0, 97.0], [4.1, 97.0], [4.2, 97.0], [4.3, 97.0], [4.4, 98.0], [4.5, 98.0], [4.6, 98.0], [4.7, 99.0], [4.8, 99.0], [4.9, 99.0], [5.0, 99.0], [5.1, 99.0], [5.2, 99.0], [5.3, 99.0], [5.4, 103.0], [5.5, 103.0], [5.6, 103.0], [5.7, 106.0], [5.8, 106.0], [5.9, 106.0], [6.0, 107.0], [6.1, 107.0], [6.2, 107.0], [6.3, 107.0], [6.4, 107.0], [6.5, 107.0], [6.6, 107.0], [6.7, 107.0], [6.8, 107.0], [6.9, 107.0], [7.0, 110.0], [7.1, 110.0], [7.2, 110.0], [7.3, 110.0], [7.4, 110.0], [7.5, 110.0], [7.6, 110.0], [7.7, 111.0], [7.8, 111.0], [7.9, 111.0], [8.0, 112.0], [8.1, 112.0], [8.2, 112.0], [8.3, 112.0], [8.4, 112.0], [8.5, 112.0], [8.6, 112.0], [8.7, 112.0], [8.8, 112.0], [8.9, 112.0], [9.0, 113.0], [9.1, 113.0], [9.2, 113.0], [9.3, 113.0], [9.4, 113.0], [9.5, 113.0], [9.6, 113.0], [9.7, 114.0], [9.8, 114.0], [9.9, 114.0], [10.0, 117.0], [10.1, 117.0], [10.2, 117.0], [10.3, 117.0], [10.4, 118.0], [10.5, 118.0], [10.6, 118.0], [10.7, 118.0], [10.8, 118.0], [10.9, 118.0], [11.0, 118.0], [11.1, 118.0], [11.2, 118.0], [11.3, 118.0], [11.4, 119.0], [11.5, 119.0], [11.6, 119.0], [11.7, 119.0], [11.8, 119.0], [11.9, 119.0], [12.0, 119.0], [12.1, 119.0], [12.2, 119.0], [12.3, 119.0], [12.4, 122.0], [12.5, 122.0], [12.6, 122.0], [12.7, 123.0], [12.8, 123.0], [12.9, 123.0], [13.0, 123.0], [13.1, 123.0], [13.2, 123.0], [13.3, 123.0], [13.4, 124.0], [13.5, 124.0], [13.6, 124.0], [13.7, 124.0], [13.8, 124.0], [13.9, 124.0], [14.0, 128.0], [14.1, 128.0], [14.2, 128.0], [14.3, 128.0], [14.4, 129.0], [14.5, 129.0], [14.6, 129.0], [14.7, 130.0], [14.8, 130.0], [14.9, 130.0], [15.0, 130.0], [15.1, 130.0], [15.2, 130.0], [15.3, 130.0], [15.4, 130.0], [15.5, 130.0], [15.6, 130.0], [15.7, 131.0], [15.8, 131.0], [15.9, 131.0], [16.0, 131.0], [16.1, 131.0], [16.2, 131.0], [16.3, 131.0], [16.4, 136.0], [16.5, 136.0], [16.6, 136.0], [16.7, 137.0], [16.8, 137.0], [16.9, 137.0], [17.0, 138.0], [17.1, 138.0], [17.2, 138.0], [17.3, 138.0], [17.4, 140.0], [17.5, 140.0], [17.6, 140.0], [17.7, 140.0], [17.8, 140.0], [17.9, 140.0], [18.0, 143.0], [18.1, 143.0], [18.2, 143.0], [18.3, 143.0], [18.4, 147.0], [18.5, 147.0], [18.6, 147.0], [18.7, 149.0], [18.8, 149.0], [18.9, 149.0], [19.0, 151.0], [19.1, 151.0], [19.2, 151.0], [19.3, 151.0], [19.4, 152.0], [19.5, 152.0], [19.6, 152.0], [19.7, 152.0], [19.8, 152.0], [19.9, 152.0], [20.0, 153.0], [20.1, 153.0], [20.2, 153.0], [20.3, 153.0], [20.4, 154.0], [20.5, 154.0], [20.6, 154.0], [20.7, 154.0], [20.8, 154.0], [20.9, 154.0], [21.0, 154.0], [21.1, 154.0], [21.2, 154.0], [21.3, 154.0], [21.4, 154.0], [21.5, 154.0], [21.6, 154.0], [21.7, 154.0], [21.8, 154.0], [21.9, 154.0], [22.0, 154.0], [22.1, 154.0], [22.2, 154.0], [22.3, 154.0], [22.4, 155.0], [22.5, 155.0], [22.6, 155.0], [22.7, 155.0], [22.8, 155.0], [22.9, 155.0], [23.0, 155.0], [23.1, 155.0], [23.2, 155.0], [23.3, 155.0], [23.4, 155.0], [23.5, 155.0], [23.6, 155.0], [23.7, 156.0], [23.8, 156.0], [23.9, 156.0], [24.0, 156.0], [24.1, 156.0], [24.2, 156.0], [24.3, 156.0], [24.4, 162.0], [24.5, 162.0], [24.6, 162.0], [24.7, 165.0], [24.8, 165.0], [24.9, 165.0], [25.0, 165.0], [25.1, 165.0], [25.2, 165.0], [25.3, 165.0], [25.4, 165.0], [25.5, 165.0], [25.6, 165.0], [25.7, 165.0], [25.8, 165.0], [25.9, 165.0], [26.0, 165.0], [26.1, 165.0], [26.2, 165.0], [26.3, 165.0], [26.4, 165.0], [26.5, 165.0], [26.6, 165.0], [26.7, 166.0], [26.8, 166.0], [26.9, 166.0], [27.0, 166.0], [27.1, 166.0], [27.2, 166.0], [27.3, 166.0], [27.4, 166.0], [27.5, 166.0], [27.6, 166.0], [27.7, 166.0], [27.8, 166.0], [27.9, 166.0], [28.0, 166.0], [28.1, 166.0], [28.2, 166.0], [28.3, 166.0], [28.4, 166.0], [28.5, 166.0], [28.6, 166.0], [28.7, 166.0], [28.8, 166.0], [28.9, 166.0], [29.0, 166.0], [29.1, 166.0], [29.2, 166.0], [29.3, 166.0], [29.4, 167.0], [29.5, 167.0], [29.6, 167.0], [29.7, 167.0], [29.8, 167.0], [29.9, 167.0], [30.0, 167.0], [30.1, 167.0], [30.2, 167.0], [30.3, 167.0], [30.4, 167.0], [30.5, 167.0], [30.6, 167.0], [30.7, 167.0], [30.8, 167.0], [30.9, 167.0], [31.0, 168.0], [31.1, 168.0], [31.2, 168.0], [31.3, 168.0], [31.4, 169.0], [31.5, 169.0], [31.6, 169.0], [31.7, 176.0], [31.8, 176.0], [31.9, 176.0], [32.0, 176.0], [32.1, 176.0], [32.2, 176.0], [32.3, 176.0], [32.4, 176.0], [32.5, 176.0], [32.6, 176.0], [32.7, 176.0], [32.8, 176.0], [32.9, 176.0], [33.0, 177.0], [33.1, 177.0], [33.2, 177.0], [33.3, 177.0], [33.4, 177.0], [33.5, 177.0], [33.6, 177.0], [33.7, 177.0], [33.8, 177.0], [33.9, 177.0], [34.0, 178.0], [34.1, 178.0], [34.2, 178.0], [34.3, 178.0], [34.4, 178.0], [34.5, 178.0], [34.6, 178.0], [34.7, 178.0], [34.8, 178.0], [34.9, 178.0], [35.0, 178.0], [35.1, 178.0], [35.2, 178.0], [35.3, 178.0], [35.4, 181.0], [35.5, 181.0], [35.6, 181.0], [35.7, 182.0], [35.8, 182.0], [35.9, 182.0], [36.0, 183.0], [36.1, 183.0], [36.2, 183.0], [36.3, 183.0], [36.4, 184.0], [36.5, 184.0], [36.6, 184.0], [36.7, 185.0], [36.8, 185.0], [36.9, 185.0], [37.0, 185.0], [37.1, 186.0], [37.2, 186.0], [37.3, 186.0], [37.4, 197.0], [37.5, 197.0], [37.6, 197.0], [37.7, 1432.0], [37.8, 1432.0], [37.9, 1432.0], [38.0, 1432.0], [38.1, 1605.0], [38.2, 1605.0], [38.3, 1605.0], [38.4, 1843.0], [38.5, 1843.0], [38.6, 1843.0], [38.7, 1846.0], [38.8, 1846.0], [38.9, 1846.0], [39.0, 1846.0], [39.1, 1853.0], [39.2, 1853.0], [39.3, 1853.0], [39.4, 1884.0], [39.5, 1884.0], [39.6, 1884.0], [39.7, 1908.0], [39.8, 1908.0], [39.9, 1908.0], [40.0, 1908.0], [40.1, 1932.0], [40.2, 1932.0], [40.3, 1932.0], [40.4, 1968.0], [40.5, 1968.0], [40.6, 1968.0], [40.7, 1976.0], [40.8, 1976.0], [40.9, 1976.0], [41.0, 1976.0], [41.1, 2040.0], [41.2, 2040.0], [41.3, 2040.0], [41.4, 2234.0], [41.5, 2234.0], [41.6, 2234.0], [41.7, 2311.0], [41.8, 2311.0], [41.9, 2311.0], [42.0, 2311.0], [42.1, 2333.0], [42.2, 2333.0], [42.3, 2333.0], [42.4, 2340.0], [42.5, 2340.0], [42.6, 2340.0], [42.7, 2354.0], [42.8, 2354.0], [42.9, 2354.0], [43.0, 2354.0], [43.1, 2383.0], [43.2, 2383.0], [43.3, 2383.0], [43.4, 2427.0], [43.5, 2427.0], [43.6, 2427.0], [43.7, 2438.0], [43.8, 2438.0], [43.9, 2438.0], [44.0, 2438.0], [44.1, 2449.0], [44.2, 2449.0], [44.3, 2449.0], [44.4, 2454.0], [44.5, 2454.0], [44.6, 2454.0], [44.7, 2545.0], [44.8, 2545.0], [44.9, 2545.0], [45.0, 2545.0], [45.1, 2624.0], [45.2, 2624.0], [45.3, 2624.0], [45.4, 2644.0], [45.5, 2644.0], [45.6, 2644.0], [45.7, 2651.0], [45.8, 2651.0], [45.9, 2651.0], [46.0, 2651.0], [46.1, 2685.0], [46.2, 2685.0], [46.3, 2685.0], [46.4, 2688.0], [46.5, 2688.0], [46.6, 2688.0], [46.7, 2691.0], [46.8, 2691.0], [46.9, 2691.0], [47.0, 2691.0], [47.1, 2741.0], [47.2, 2741.0], [47.3, 2741.0], [47.4, 2746.0], [47.5, 2746.0], [47.6, 2746.0], [47.7, 2756.0], [47.8, 2756.0], [47.9, 2756.0], [48.0, 2756.0], [48.1, 2758.0], [48.2, 2758.0], [48.3, 2758.0], [48.4, 2760.0], [48.5, 2760.0], [48.6, 2760.0], [48.7, 2770.0], [48.8, 2770.0], [48.9, 2770.0], [49.0, 2770.0], [49.1, 2792.0], [49.2, 2792.0], [49.3, 2792.0], [49.4, 2800.0], [49.5, 2800.0], [49.6, 2800.0], [49.7, 2806.0], [49.8, 2806.0], [49.9, 2806.0], [50.0, 2806.0], [50.1, 2808.0], [50.2, 2808.0], [50.3, 2808.0], [50.4, 2812.0], [50.5, 2812.0], [50.6, 2812.0], [50.7, 2818.0], [50.8, 2818.0], [50.9, 2818.0], [51.0, 2818.0], [51.1, 2830.0], [51.2, 2830.0], [51.3, 2830.0], [51.4, 2857.0], [51.5, 2857.0], [51.6, 2857.0], [51.7, 2868.0], [51.8, 2868.0], [51.9, 2868.0], [52.0, 2868.0], [52.1, 2871.0], [52.2, 2871.0], [52.3, 2871.0], [52.4, 2877.0], [52.5, 2877.0], [52.6, 2877.0], [52.7, 2889.0], [52.8, 2889.0], [52.9, 2889.0], [53.0, 2889.0], [53.1, 2898.0], [53.2, 2898.0], [53.3, 2898.0], [53.4, 2910.0], [53.5, 2910.0], [53.6, 2910.0], [53.7, 2913.0], [53.8, 2913.0], [53.9, 2913.0], [54.0, 2913.0], [54.1, 2924.0], [54.2, 2924.0], [54.3, 2924.0], [54.4, 2941.0], [54.5, 2941.0], [54.6, 2941.0], [54.7, 2951.0], [54.8, 2951.0], [54.9, 2951.0], [55.0, 2951.0], [55.1, 2956.0], [55.2, 2956.0], [55.3, 2956.0], [55.4, 2977.0], [55.5, 2977.0], [55.6, 2977.0], [55.7, 2982.0], [55.8, 2982.0], [55.9, 2982.0], [56.0, 2982.0], [56.1, 2987.0], [56.2, 2987.0], [56.3, 2987.0], [56.4, 3005.0], [56.5, 3005.0], [56.6, 3005.0], [56.7, 3021.0], [56.8, 3021.0], [56.9, 3021.0], [57.0, 3021.0], [57.1, 3032.0], [57.2, 3032.0], [57.3, 3032.0], [57.4, 3058.0], [57.5, 3058.0], [57.6, 3058.0], [57.7, 3226.0], [57.8, 3226.0], [57.9, 3226.0], [58.0, 3226.0], [58.1, 3482.0], [58.2, 3482.0], [58.3, 3482.0], [58.4, 3561.0], [58.5, 3561.0], [58.6, 3561.0], [58.7, 3617.0], [58.8, 3617.0], [58.9, 3617.0], [59.0, 3617.0], [59.1, 3645.0], [59.2, 3645.0], [59.3, 3645.0], [59.4, 3781.0], [59.5, 3781.0], [59.6, 3781.0], [59.7, 3808.0], [59.8, 3808.0], [59.9, 3808.0], [60.0, 3808.0], [60.1, 3809.0], [60.2, 3809.0], [60.3, 3809.0], [60.4, 3830.0], [60.5, 3830.0], [60.6, 3830.0], [60.7, 3850.0], [60.8, 3850.0], [60.9, 3850.0], [61.0, 3850.0], [61.1, 3861.0], [61.2, 3861.0], [61.3, 3861.0], [61.4, 3864.0], [61.5, 3864.0], [61.6, 3864.0], [61.7, 3878.0], [61.8, 3878.0], [61.9, 3878.0], [62.0, 3878.0], [62.1, 4052.0], [62.2, 4052.0], [62.3, 4052.0], [62.4, 4063.0], [62.5, 4063.0], [62.6, 4063.0], [62.7, 4065.0], [62.8, 4065.0], [62.9, 4065.0], [63.0, 4065.0], [63.1, 4084.0], [63.2, 4084.0], [63.3, 4084.0], [63.4, 4090.0], [63.5, 4090.0], [63.6, 4090.0], [63.7, 4092.0], [63.8, 4092.0], [63.9, 4092.0], [64.0, 4092.0], [64.1, 4105.0], [64.2, 4105.0], [64.3, 4105.0], [64.4, 4107.0], [64.5, 4107.0], [64.6, 4107.0], [64.7, 4114.0], [64.8, 4114.0], [64.9, 4114.0], [65.0, 4114.0], [65.1, 4122.0], [65.2, 4122.0], [65.3, 4122.0], [65.4, 4141.0], [65.5, 4141.0], [65.6, 4141.0], [65.7, 4147.0], [65.8, 4147.0], [65.9, 4147.0], [66.0, 4147.0], [66.1, 4150.0], [66.2, 4150.0], [66.3, 4150.0], [66.4, 4150.0], [66.5, 4150.0], [66.6, 4150.0], [66.7, 4155.0], [66.8, 4155.0], [66.9, 4155.0], [67.0, 4155.0], [67.1, 4158.0], [67.2, 4158.0], [67.3, 4158.0], [67.4, 4173.0], [67.5, 4173.0], [67.6, 4173.0], [67.7, 4702.0], [67.8, 4702.0], [67.9, 4702.0], [68.0, 4702.0], [68.1, 4792.0], [68.2, 4792.0], [68.3, 4792.0], [68.4, 4799.0], [68.5, 4799.0], [68.6, 4799.0], [68.7, 4808.0], [68.8, 4808.0], [68.9, 4808.0], [69.0, 4808.0], [69.1, 4837.0], [69.2, 4837.0], [69.3, 4837.0], [69.4, 4847.0], [69.5, 4847.0], [69.6, 4847.0], [69.7, 4850.0], [69.8, 4850.0], [69.9, 4850.0], [70.0, 4850.0], [70.1, 4852.0], [70.2, 4852.0], [70.3, 4852.0], [70.4, 4870.0], [70.5, 4870.0], [70.6, 4870.0], [70.7, 4886.0], [70.8, 4886.0], [70.9, 4886.0], [71.0, 4886.0], [71.1, 4895.0], [71.2, 4895.0], [71.3, 4895.0], [71.4, 4898.0], [71.5, 4898.0], [71.6, 4898.0], [71.7, 4900.0], [71.8, 4900.0], [71.9, 4900.0], [72.0, 4900.0], [72.1, 4903.0], [72.2, 4903.0], [72.3, 4903.0], [72.4, 4907.0], [72.5, 4907.0], [72.6, 4907.0], [72.7, 4910.0], [72.8, 4910.0], [72.9, 4910.0], [73.0, 4910.0], [73.1, 4912.0], [73.2, 4912.0], [73.3, 4912.0], [73.4, 4914.0], [73.5, 4914.0], [73.6, 4914.0], [73.7, 4916.0], [73.8, 4916.0], [73.9, 4916.0], [74.0, 4916.0], [74.1, 4919.0], [74.2, 4919.0], [74.3, 4919.0], [74.4, 4925.0], [74.5, 4925.0], [74.6, 4925.0], [74.7, 4928.0], [74.8, 4928.0], [74.9, 4928.0], [75.0, 4928.0], [75.1, 4930.0], [75.2, 4930.0], [75.3, 4930.0], [75.4, 4935.0], [75.5, 4935.0], [75.6, 4935.0], [75.7, 4945.0], [75.8, 4945.0], [75.9, 4945.0], [76.0, 4945.0], [76.1, 4946.0], [76.2, 4946.0], [76.3, 4946.0], [76.4, 4962.0], [76.5, 4962.0], [76.6, 4962.0], [76.7, 4963.0], [76.8, 4963.0], [76.9, 4963.0], [77.0, 4963.0], [77.1, 4971.0], [77.2, 4971.0], [77.3, 4971.0], [77.4, 4979.0], [77.5, 4979.0], [77.6, 4979.0], [77.7, 4995.0], [77.8, 4995.0], [77.9, 4995.0], [78.0, 4995.0], [78.1, 4998.0], [78.2, 4998.0], [78.3, 4998.0], [78.4, 5002.0], [78.5, 5002.0], [78.6, 5002.0], [78.7, 5013.0], [78.8, 5013.0], [78.9, 5013.0], [79.0, 5021.0], [79.1, 5021.0], [79.2, 5021.0], [79.3, 5021.0], [79.4, 5533.0], [79.5, 5533.0], [79.6, 5533.0], [79.7, 5538.0], [79.8, 5538.0], [79.9, 5538.0], [80.0, 5648.0], [80.1, 5648.0], [80.2, 5648.0], [80.3, 5648.0], [80.4, 5685.0], [80.5, 5685.0], [80.6, 5685.0], [80.7, 5688.0], [80.8, 5688.0], [80.9, 5688.0], [81.0, 5697.0], [81.1, 5697.0], [81.2, 5697.0], [81.3, 5697.0], [81.4, 5706.0], [81.5, 5706.0], [81.6, 5706.0], [81.7, 5715.0], [81.8, 5715.0], [81.9, 5715.0], [82.0, 5748.0], [82.1, 5748.0], [82.2, 5748.0], [82.3, 5748.0], [82.4, 5751.0], [82.5, 5751.0], [82.6, 5751.0], [82.7, 5763.0], [82.8, 5763.0], [82.9, 5763.0], [83.0, 5764.0], [83.1, 5764.0], [83.2, 5764.0], [83.3, 5764.0], [83.4, 5778.0], [83.5, 5778.0], [83.6, 5778.0], [83.7, 5780.0], [83.8, 5780.0], [83.9, 5780.0], [84.0, 5787.0], [84.1, 5787.0], [84.2, 5787.0], [84.3, 5787.0], [84.4, 5792.0], [84.5, 5792.0], [84.6, 5792.0], [84.7, 5796.0], [84.8, 5796.0], [84.9, 5796.0], [85.0, 5803.0], [85.1, 5803.0], [85.2, 5803.0], [85.3, 5803.0], [85.4, 5809.0], [85.5, 5809.0], [85.6, 5809.0], [85.7, 5877.0], [85.8, 5877.0], [85.9, 5877.0], [86.0, 6020.0], [86.1, 6020.0], [86.2, 6020.0], [86.3, 6020.0], [86.4, 6035.0], [86.5, 6035.0], [86.6, 6035.0], [86.7, 6038.0], [86.8, 6038.0], [86.9, 6038.0], [87.0, 6047.0], [87.1, 6047.0], [87.2, 6047.0], [87.3, 6047.0], [87.4, 6053.0], [87.5, 6053.0], [87.6, 6053.0], [87.7, 6056.0], [87.8, 6056.0], [87.9, 6056.0], [88.0, 6107.0], [88.1, 6107.0], [88.2, 6107.0], [88.3, 6107.0], [88.4, 6113.0], [88.5, 6113.0], [88.6, 6113.0], [88.7, 6139.0], [88.8, 6139.0], [88.9, 6139.0], [89.0, 6149.0], [89.1, 6149.0], [89.2, 6149.0], [89.3, 6149.0], [89.4, 6155.0], [89.5, 6155.0], [89.6, 6155.0], [89.7, 6158.0], [89.8, 6158.0], [89.9, 6158.0], [90.0, 6163.0], [90.1, 6163.0], [90.2, 6163.0], [90.3, 6163.0], [90.4, 6172.0], [90.5, 6172.0], [90.6, 6172.0], [90.7, 6181.0], [90.8, 6181.0], [90.9, 6181.0], [91.0, 6184.0], [91.1, 6184.0], [91.2, 6184.0], [91.3, 6184.0], [91.4, 6190.0], [91.5, 6190.0], [91.6, 6190.0], [91.7, 6224.0], [91.8, 6224.0], [91.9, 6224.0], [92.0, 6233.0], [92.1, 6233.0], [92.2, 6233.0], [92.3, 6233.0], [92.4, 6245.0], [92.5, 6245.0], [92.6, 6245.0], [92.7, 6250.0], [92.8, 6250.0], [92.9, 6250.0], [93.0, 6254.0], [93.1, 6254.0], [93.2, 6254.0], [93.3, 6254.0], [93.4, 6265.0], [93.5, 6265.0], [93.6, 6265.0], [93.7, 6289.0], [93.8, 6289.0], [93.9, 6289.0], [94.0, 6290.0], [94.1, 6290.0], [94.2, 6290.0], [94.3, 6290.0], [94.4, 6323.0], [94.5, 6323.0], [94.6, 6323.0], [94.7, 7606.0], [94.8, 7606.0], [94.9, 7606.0], [95.0, 7613.0], [95.1, 7613.0], [95.2, 7613.0], [95.3, 7613.0], [95.4, 7631.0], [95.5, 7631.0], [95.6, 7631.0], [95.7, 7644.0], [95.8, 7644.0], [95.9, 7644.0], [96.0, 7656.0], [96.1, 7656.0], [96.2, 7656.0], [96.3, 7656.0], [96.4, 7675.0], [96.5, 7675.0], [96.6, 7675.0], [96.7, 7678.0], [96.8, 7678.0], [96.9, 7678.0], [97.0, 7682.0], [97.1, 7682.0], [97.2, 7682.0], [97.3, 7682.0], [97.4, 7685.0], [97.5, 7685.0], [97.6, 7685.0], [97.7, 7694.0], [97.8, 7694.0], [97.9, 7694.0], [98.0, 7709.0], [98.1, 7709.0], [98.2, 7709.0], [98.3, 7709.0], [98.4, 7740.0], [98.5, 7740.0], [98.6, 7740.0], [98.7, 7784.0], [98.8, 7784.0], [98.9, 7784.0], [99.0, 8000.0], [99.1, 8000.0], [99.2, 8000.0], [99.3, 8000.0], [99.4, 8004.0], [99.5, 8004.0], [99.6, 8004.0], [99.7, 8007.0], [99.8, 8007.0], [99.9, 8007.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 97.0, "series": [{"data": [[0.0, 94.0], [600.0, 4.0], [700.0, 17.0], [800.0, 6.0], [900.0, 8.0], [1100.0, 1.0], [1200.0, 3.0], [1300.0, 1.0], [1900.0, 1.0], [2400.0, 3.0], [2800.0, 1.0], [2700.0, 1.0], [3000.0, 1.0], [3100.0, 3.0], [3200.0, 2.0], [3300.0, 2.0], [3500.0, 3.0], [3700.0, 9.0], [3600.0, 2.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 3.0], [4300.0, 5.0], [4200.0, 1.0], [4600.0, 3.0], [4800.0, 3.0], [4700.0, 2.0], [5100.0, 1.0], [5000.0, 1.0], [4900.0, 9.0], [5200.0, 1.0], [5300.0, 1.0], [5400.0, 1.0], [5500.0, 6.0], [5600.0, 3.0], [6100.0, 1.0], [6000.0, 1.0], [6200.0, 1.0], [8000.0, 1.0], [10100.0, 1.0], [11200.0, 1.0], [11600.0, 2.0], [13200.0, 3.0], [13100.0, 7.0], [13600.0, 3.0], [13700.0, 6.0], [14100.0, 2.0], [14000.0, 1.0], [14300.0, 4.0], [14800.0, 1.0], [14400.0, 6.0], [14500.0, 1.0], [15200.0, 1.0], [15300.0, 2.0], [15100.0, 4.0], [15600.0, 4.0], [15400.0, 5.0], [15700.0, 1.0], [16200.0, 1.0], [17200.0, 3.0], [16800.0, 1.0], [16400.0, 5.0], [16600.0, 2.0], [16700.0, 2.0], [16500.0, 1.0], [100.0, 7.0], [200.0, 2.0], [300.0, 1.0], [400.0, 5.0], [500.0, 7.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[36900.0, 1.0], [40700.0, 1.0], [42100.0, 2.0], [42700.0, 2.0], [44900.0, 2.0], [44300.0, 2.0], [43500.0, 1.0], [45100.0, 2.0], [45900.0, 5.0], [47100.0, 3.0], [46900.0, 4.0], [47500.0, 3.0], [800.0, 3.0], [900.0, 4.0], [1000.0, 4.0], [1100.0, 3.0], [1400.0, 1.0], [1600.0, 2.0], [1900.0, 3.0], [2000.0, 2.0], [2100.0, 2.0], [2300.0, 2.0], [2400.0, 1.0], [2500.0, 3.0], [2600.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3300.0, 3.0], [3500.0, 3.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 4.0], [4100.0, 2.0], [5100.0, 1.0], [5000.0, 1.0], [5300.0, 1.0], [5500.0, 2.0], [5400.0, 1.0], [5700.0, 1.0], [6000.0, 5.0], [6300.0, 1.0], [6500.0, 4.0], [6600.0, 4.0], [6700.0, 3.0], [7000.0, 2.0], [7200.0, 1.0], [7300.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [8100.0, 3.0], [9100.0, 3.0], [9300.0, 1.0], [9700.0, 1.0], [10000.0, 4.0], [10500.0, 6.0], [10300.0, 1.0], [10700.0, 1.0], [11000.0, 6.0], [10900.0, 2.0], [11300.0, 1.0], [12000.0, 1.0], [12200.0, 3.0], [12700.0, 1.0], [12600.0, 2.0], [13000.0, 1.0], [13100.0, 1.0], [13600.0, 1.0], [13400.0, 2.0], [13800.0, 1.0], [14200.0, 2.0], [14300.0, 3.0], [14100.0, 1.0], [14400.0, 1.0], [15100.0, 4.0], [15300.0, 1.0], [15500.0, 2.0], [15600.0, 3.0], [15400.0, 1.0], [15900.0, 2.0], [16100.0, 1.0], [17300.0, 8.0], [16900.0, 2.0], [17200.0, 1.0], [17500.0, 4.0], [17600.0, 2.0], [17700.0, 4.0], [18300.0, 4.0], [18400.0, 2.0], [18200.0, 2.0], [21800.0, 4.0], [22700.0, 2.0], [24300.0, 2.0], [31100.0, 8.0], [31200.0, 2.0], [31000.0, 6.0], [30800.0, 19.0], [30900.0, 7.0], [32000.0, 3.0], [38400.0, 1.0], [39600.0, 4.0], [39400.0, 5.0], [42200.0, 4.0], [42600.0, 1.0], [42800.0, 5.0], [41400.0, 5.0], [41600.0, 1.0], [41800.0, 1.0], [44800.0, 2.0], [45000.0, 3.0], [46600.0, 6.0], [46400.0, 1.0], [47400.0, 1.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[0.0, 16.0], [1400.0, 1.0], [100.0, 97.0], [1600.0, 1.0], [1800.0, 4.0], [1900.0, 4.0], [2000.0, 1.0], [2300.0, 5.0], [2200.0, 1.0], [2400.0, 4.0], [2500.0, 1.0], [2600.0, 6.0], [2800.0, 12.0], [2700.0, 7.0], [2900.0, 9.0], [3000.0, 4.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 2.0], [3700.0, 1.0], [3800.0, 7.0], [4000.0, 6.0], [4100.0, 11.0], [4700.0, 3.0], [4800.0, 9.0], [4900.0, 20.0], [5000.0, 3.0], [5500.0, 2.0], [5600.0, 4.0], [5800.0, 3.0], [5700.0, 11.0], [6100.0, 11.0], [6000.0, 6.0], [6200.0, 8.0], [6300.0, 1.0], [7600.0, 10.0], [7700.0, 3.0], [8000.0, 3.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 47500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 611.0, "series": [{"data": [[0.0, 222.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 55.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 611.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 12.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 37.06944444444444, "minX": 1.611331027E12, "maxY": 300.0, "series": [{"data": [[1.611331054E12, 119.7], [1.611331052E12, 126.8], [1.611331051E12, 136.25], [1.611331059E12, 106.6], [1.611331058E12, 111.8], [1.611331028E12, 297.7272727272727], [1.611331027E12, 122.31862745098042], [1.61133107E12, 96.25], [1.611331029E12, 300.0], [1.611331072E12, 92.0], [1.611331067E12, 103.0], [1.611331069E12, 99.0], [1.611331033E12, 289.44444444444457], [1.611331076E12, 75.0], [1.611331075E12, 79.71428571428571], [1.611331034E12, 288.0], [1.61133103E12, 300.0], [1.611331032E12, 291.0], [1.611331031E12, 296.9423076923075], [1.611331074E12, 86.28571428571429], [1.611331038E12, 266.0], [1.61133104E12, 251.25], [1.611331039E12, 259.56249999999994], [1.611331036E12, 275.2758620689655], [1.611331035E12, 284.64583333333337], [1.611331078E12, 37.06944444444444], [1.611331037E12, 269.7692307692307], [1.611331044E12, 231.18181818181822], [1.611331043E12, 236.16666666666669], [1.611331045E12, 213.18518518518522], [1.611331041E12, 247.66666666666666], [1.611331042E12, 244.0], [1.611331049E12, 157.952380952381], [1.61133105E12, 142.33333333333334], [1.611331046E12, 188.51515151515153], [1.611331047E12, 166.13432835820888]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.611331078E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 60.42857142857143, "minX": 3.0, "maxY": 47526.0, "series": [{"data": [[123.0, 60.42857142857143], [127.0, 67.5], [128.0, 77.0], [129.0, 69.63157894736841], [130.0, 65.75], [135.0, 77.25], [136.0, 82.83333333333334], [137.0, 71.72727272727273], [139.0, 68.0], [141.0, 69.92307692307692], [142.0, 65.5], [164.0, 14381.874999999998], [173.0, 16604.2], [193.0, 14513.666666666666], [235.0, 13826.0], [250.0, 337.0], [248.0, 8070.0], [270.0, 4146.75], [266.0, 5154.235294117647], [260.0, 4084.1249999999995], [287.0, 972.7142857142857], [286.0, 4295.764705882353], [278.0, 403.0], [275.0, 609.0], [274.0, 4265.615384615385], [300.0, 737.3636363636365], [299.0, 1019.7272727272726], [297.0, 566.0], [292.0, 295.3333333333333], [290.0, 1782.5], [289.0, 1646.0526315789473], [288.0, 750.3333333333334]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[211.43999999999983, 4670.670000000003]], "isOverall": false, "label": "GET /login-Aggregated", "isController": false}, {"data": [[3.0, 30869.0], [5.0, 30883.5], [8.0, 30890.333333333332], [11.0, 37928.0], [12.0, 30875.0], [14.0, 41644.5], [16.0, 36170.0], [19.0, 38470.666666666664], [22.0, 38395.0], [24.0, 30914.0], [26.0, 36876.0], [28.0, 36870.0], [30.0, 36861.0], [31.0, 30881.0], [33.0, 42795.0], [32.0, 30872.0], [35.0, 43558.0], [37.0, 30850.0], [36.0, 43584.0], [39.0, 37588.5], [41.0, 45080.0], [40.0, 30844.0], [43.0, 30831.5], [45.0, 30817.0], [44.0, 45056.0], [47.0, 45999.0], [46.0, 31085.0], [48.0, 31066.0], [51.0, 46434.0], [50.0, 38037.5], [54.0, 40114.333333333336], [56.0, 38007.0], [59.0, 41238.0], [61.0, 31547.0], [63.0, 35262.0], [67.0, 43422.5], [65.0, 39423.5], [69.0, 43009.5], [75.0, 47526.0], [72.0, 39040.333333333336], [77.0, 46955.5], [83.0, 45940.0], [82.0, 47181.0], [80.0, 47028.0], [86.0, 45921.5], [84.0, 45933.0], [91.0, 45120.0], [89.0, 46670.0], [88.0, 46681.0], [94.0, 42288.0], [93.0, 44812.5], [99.0, 42173.0], [97.0, 42263.0], [103.0, 39674.0], [107.0, 31201.0], [104.0, 31225.0], [111.0, 31183.333333333332], [108.0, 31178.0], [113.0, 31191.0], [119.0, 6675.666666666667], [116.0, 6870.0], [123.0, 6647.0], [126.0, 6173.333333333333], [130.0, 7599.0], [129.0, 7607.0], [128.0, 24370.0], [143.0, 11369.0], [142.0, 22714.0], [140.0, 3826.75], [136.0, 3982.3333333333335], [144.0, 2726.0], [159.0, 1942.0], [157.0, 15547.384615384617], [164.0, 15103.333333333334], [161.0, 1982.0], [175.0, 914.0], [173.0, 15982.0], [172.0, 15822.5], [170.0, 15560.5], [168.0, 13274.5], [183.0, 18394.0], [182.0, 18404.0], [181.0, 18446.0], [180.0, 17373.333333333332], [177.0, 835.0], [176.0, 863.0], [186.0, 18393.0], [185.0, 18391.0], [197.0, 10670.25], [193.0, 8825.142857142857], [203.0, 13586.5], [201.0, 10536.0], [200.0, 9590.0], [213.0, 17600.0], [210.0, 17448.714285714286], [216.0, 17566.0], [229.0, 5954.0], [225.0, 1046.0], [224.0, 17349.125000000004], [238.0, 5782.0], [237.0, 15537.0], [235.0, 6271.0], [233.0, 5702.75], [247.0, 13691.0], [246.0, 12014.25], [242.0, 15120.5], [252.0, 3395.3333333333335], [249.0, 13069.0], [248.0, 1424.0], [271.0, 1647.0], [270.0, 10025.5], [268.0, 10027.0], [266.0, 11026.666666666668], [260.0, 993.0], [259.0, 2216.571428571429], [284.0, 2544.0], [286.0, 2409.0], [287.0, 2141.0], [285.0, 2375.0], [283.0, 2613.0], [282.0, 8111.333333333333], [279.0, 2038.0], [278.0, 1473.6666666666667], [275.0, 2182.0], [274.0, 6643.333333333333], [291.0, 1041.0], [300.0, 3033.0], [299.0, 3857.5], [297.0, 4085.5], [295.0, 4114.0], [294.0, 4102.0], [293.0, 3925.0], [292.0, 3568.0], [290.0, 925.0], [289.0, 811.0], [288.0, 2909.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[151.7266666666667, 20603.87333333334]], "isOverall": false, "label": "POST /graphql - Login-Aggregated", "isController": false}, {"data": [[135.0, 120.5], [137.0, 122.75], [141.0, 100.5], [142.0, 106.77777777777777], [144.0, 94.0], [282.0, 7676.692307692308], [278.0, 8003.666666666667], [300.0, 2551.3750000000005], [299.0, 3000.2], [297.0, 3748.8333333333335], [295.0, 4115.764705882353], [290.0, 4909.428571428572], [289.0, 5732.900000000001], [288.0, 6166.653846153847], [101.0, 143.13333333333335], [102.0, 150.4], [105.0, 164.66666666666669], [106.0, 144.90909090909088], [108.0, 165.83333333333331], [111.0, 177.16666666666669], [115.0, 133.9090909090909], [117.0, 119.25], [119.0, 94.66666666666667], [120.0, 91.0]], "isOverall": false, "label": "GET /", "isController": false}, {"data": [[225.67666666666676, 2864.4766666666665]], "isOverall": false, "label": "GET /-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1298.0, "minX": 1.611331027E12, "maxY": 581074.0, "series": [{"data": [[1.611331054E12, 14530.0], [1.611331052E12, 7265.0], [1.611331051E12, 17436.0], [1.611331059E12, 7265.0], [1.611331058E12, 7265.0], [1.611331028E12, 51135.0], [1.611331027E12, 581074.0], [1.61133107E12, 5812.0], [1.611331029E12, 35918.0], [1.611331072E12, 5812.0], [1.611331067E12, 5812.0], [1.611331069E12, 2906.0], [1.611331033E12, 210530.0], [1.611331076E12, 4359.0], [1.611331075E12, 10171.0], [1.611331034E12, 89836.0], [1.61133103E12, 150326.0], [1.611331032E12, 30741.0], [1.611331031E12, 146674.0], [1.611331074E12, 10171.0], [1.611331038E12, 48311.0], [1.61133104E12, 5812.0], [1.611331039E12, 24466.0], [1.611331036E12, 60452.0], [1.611331035E12, 113658.0], [1.611331078E12, 104616.0], [1.611331037E12, 25897.0], [1.611331044E12, 15983.0], [1.611331043E12, 11346.0], [1.611331045E12, 39231.0], [1.611331041E12, 4270.0], [1.611331042E12, 11624.0], [1.611331049E12, 30513.0], [1.61133105E12, 4359.0], [1.611331046E12, 55833.0], [1.611331047E12, 148159.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.611331054E12, 7080.0], [1.611331052E12, 3540.0], [1.611331051E12, 8496.0], [1.611331059E12, 3540.0], [1.611331058E12, 3540.0], [1.611331028E12, 2706.0], [1.611331027E12, 24527.0], [1.61133107E12, 2832.0], [1.611331029E12, 1298.0], [1.611331072E12, 2832.0], [1.611331067E12, 2832.0], [1.611331069E12, 1416.0], [1.611331033E12, 9781.0], [1.611331076E12, 2124.0], [1.611331075E12, 4956.0], [1.611331034E12, 3314.0], [1.61133103E12, 6141.0], [1.611331032E12, 3201.0], [1.611331031E12, 9736.0], [1.611331074E12, 4956.0], [1.611331038E12, 6339.0], [1.61133104E12, 2832.0], [1.611331039E12, 6648.0], [1.611331036E12, 7647.0], [1.611331035E12, 11689.0], [1.611331078E12, 50976.0], [1.611331037E12, 4524.0], [1.611331044E12, 7788.0], [1.611331043E12, 2493.0], [1.611331045E12, 19116.0], [1.611331041E12, 1539.0], [1.611331042E12, 5664.0], [1.611331049E12, 14868.0], [1.61133105E12, 2124.0], [1.611331046E12, 18099.0], [1.611331047E12, 13506.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.611331078E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 69.64835164835168, "minX": 1.611331027E12, "maxY": 47526.0, "series": [{"data": [[1.611331033E12, 1659.047619047619], [1.611331034E12, 741.5], [1.61133103E12, 1269.0], [1.611331032E12, 295.3333333333333], [1.611331031E12, 981.9166666666666], [1.611331038E12, 5154.235294117647], [1.611331039E12, 4084.1249999999995], [1.611331036E12, 3089.210526315789], [1.611331035E12, 3224.2], [1.611331037E12, 4146.75], [1.611331043E12, 13826.0], [1.611331041E12, 8070.0], [1.611331028E12, 695.0], [1.611331027E12, 69.64835164835168], [1.611331046E12, 14513.666666666666], [1.611331047E12, 14765.034482758618]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.611331054E12, 6722.5], [1.611331052E12, 13452.0], [1.611331051E12, 4533.916666666666], [1.611331059E12, 31201.2], [1.611331058E12, 31186.4], [1.61133107E12, 42269.25], [1.611331072E12, 44966.25], [1.611331067E12, 39674.0], [1.611331069E12, 42173.0], [1.611331033E12, 868.0], [1.611331076E12, 47526.0], [1.611331075E12, 47051.0], [1.61133103E12, 3033.0], [1.611331032E12, 2844.6666666666665], [1.611331031E12, 4017.0], [1.611331074E12, 46249.71428571429], [1.611331038E12, 11026.666666666668], [1.61133104E12, 5813.75], [1.611331039E12, 2063.625], [1.611331036E12, 3790.4285714285716], [1.611331035E12, 4136.3], [1.611331078E12, 37067.87500000001], [1.611331037E12, 8350.4], [1.611331044E12, 5474.090909090909], [1.611331043E12, 12285.333333333334], [1.611331045E12, 16033.74074074074], [1.611331041E12, 7557.5], [1.611331042E12, 13567.375], [1.611331049E12, 12285.714285714284], [1.61133105E12, 18932.333333333332], [1.611331046E12, 11271.749999999996], [1.611331047E12, 14649.555555555555]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.611331033E12, 5241.122448979592], [1.611331034E12, 6166.653846153847], [1.61133103E12, 2724.2222222222226], [1.611331032E12, 4945.5], [1.611331031E12, 3822.205882352941], [1.611331027E12, 140.5486725663717], [1.611331029E12, 1844.2727272727273], [1.611331036E12, 8003.666666666667], [1.611331035E12, 7676.692307692308]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.611331078E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 69.63736263736261, "minX": 1.611331027E12, "maxY": 47526.0, "series": [{"data": [[1.611331033E12, 1659.047619047619], [1.611331034E12, 741.5], [1.61133103E12, 1269.0], [1.611331032E12, 295.3333333333333], [1.611331031E12, 981.9166666666666], [1.611331038E12, 5154.235294117647], [1.611331039E12, 4084.1249999999995], [1.611331036E12, 3089.210526315789], [1.611331035E12, 3224.2], [1.611331037E12, 4146.75], [1.611331043E12, 13826.0], [1.611331041E12, 8070.0], [1.611331028E12, 695.0], [1.611331027E12, 69.63736263736261], [1.611331046E12, 14513.666666666666], [1.611331047E12, 14765.034482758618]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.611331054E12, 6722.5], [1.611331052E12, 13452.0], [1.611331051E12, 4533.916666666666], [1.611331059E12, 31201.2], [1.611331058E12, 31186.4], [1.61133107E12, 42269.25], [1.611331072E12, 44966.25], [1.611331067E12, 39674.0], [1.611331069E12, 42172.5], [1.611331033E12, 868.0], [1.611331076E12, 47526.0], [1.611331075E12, 47051.0], [1.61133103E12, 3033.0], [1.611331032E12, 2844.6666666666665], [1.611331031E12, 4017.0], [1.611331074E12, 46249.71428571429], [1.611331038E12, 11026.666666666668], [1.61133104E12, 5813.75], [1.611331039E12, 2063.625], [1.611331036E12, 3790.4285714285716], [1.611331035E12, 4136.2], [1.611331078E12, 37067.87500000001], [1.611331037E12, 8350.4], [1.611331044E12, 5474.0], [1.611331043E12, 12285.333333333334], [1.611331045E12, 16033.74074074074], [1.611331041E12, 7557.5], [1.611331042E12, 13567.375], [1.611331049E12, 12285.714285714284], [1.61133105E12, 18932.333333333332], [1.611331046E12, 11271.749999999996], [1.611331047E12, 14649.555555555555]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.611331033E12, 5241.102040816327], [1.611331034E12, 6166.423076923077], [1.61133103E12, 2724.2222222222226], [1.611331032E12, 4945.5], [1.611331031E12, 3822.205882352941], [1.611331027E12, 140.37168141592912], [1.611331029E12, 1844.2727272727273], [1.611331036E12, 8003.666666666667], [1.611331035E12, 7676.076923076923]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.611331078E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.611331027E12, "maxY": 62.026548672566385, "series": [{"data": [[1.611331033E12, 0.0], [1.611331034E12, 0.0], [1.61133103E12, 0.0], [1.611331032E12, 0.0], [1.611331031E12, 0.0], [1.611331038E12, 0.0], [1.611331039E12, 0.0], [1.611331036E12, 0.0], [1.611331035E12, 0.0], [1.611331037E12, 0.0], [1.611331043E12, 0.0], [1.611331041E12, 0.0], [1.611331028E12, 0.0], [1.611331027E12, 0.0], [1.611331046E12, 0.0], [1.611331047E12, 0.0]], "isOverall": false, "label": "GET /login", "isController": false}, {"data": [[1.611331054E12, 0.0], [1.611331052E12, 0.0], [1.611331051E12, 0.0], [1.611331059E12, 0.0], [1.611331058E12, 0.0], [1.61133107E12, 0.0], [1.611331072E12, 0.0], [1.611331067E12, 0.0], [1.611331069E12, 0.0], [1.611331033E12, 0.0], [1.611331076E12, 0.0], [1.611331075E12, 0.0], [1.61133103E12, 0.0], [1.611331032E12, 0.0], [1.611331031E12, 0.0], [1.611331074E12, 0.0], [1.611331038E12, 0.0], [1.61133104E12, 0.0], [1.611331039E12, 0.0], [1.611331036E12, 0.0], [1.611331035E12, 0.0], [1.611331078E12, 0.0], [1.611331037E12, 0.0], [1.611331044E12, 0.0], [1.611331043E12, 0.0], [1.611331045E12, 0.0], [1.611331041E12, 0.0], [1.611331042E12, 0.0], [1.611331049E12, 0.0], [1.61133105E12, 0.0], [1.611331046E12, 0.0], [1.611331047E12, 0.0]], "isOverall": false, "label": "POST /graphql - Login", "isController": false}, {"data": [[1.611331033E12, 30.408163265306122], [1.611331034E12, 29.923076923076923], [1.61133103E12, 35.82222222222221], [1.611331032E12, 28.833333333333336], [1.611331031E12, 37.058823529411754], [1.611331027E12, 62.026548672566385], [1.611331029E12, 37.72727272727272], [1.611331036E12, 27.0], [1.611331035E12, 31.0]], "isOverall": false, "label": "GET /", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.611331078E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 53.0, "minX": 1.611331027E12, "maxY": 47527.0, "series": [{"data": [[1.611331054E12, 7007.0], [1.611331052E12, 24370.0], [1.611331051E12, 7607.0], [1.611331059E12, 31230.0], [1.611331058E12, 31195.0], [1.611331028E12, 781.0], [1.611331027E12, 197.0], [1.61133107E12, 42288.0], [1.611331029E12, 2040.0], [1.611331072E12, 45125.0], [1.611331067E12, 39678.0], [1.611331069E12, 42174.0], [1.611331033E12, 5877.0], [1.611331076E12, 47527.0], [1.611331075E12, 47186.0], [1.611331034E12, 6323.0], [1.61133103E12, 3058.0], [1.611331032E12, 5013.0], [1.611331031E12, 4173.0], [1.611331074E12, 46681.0], [1.611331038E12, 11033.0], [1.61133104E12, 13069.0], [1.611331039E12, 4913.0], [1.611331036E12, 9145.0], [1.611331035E12, 8112.0], [1.611331078E12, 47429.0], [1.611331037E12, 10028.0], [1.611331044E12, 7213.0], [1.611331043E12, 15541.0], [1.611331045E12, 17747.0], [1.611331041E12, 13691.0], [1.611331042E12, 15121.0], [1.611331049E12, 21842.0], [1.61133105E12, 22720.0], [1.611331046E12, 18446.0], [1.611331047E12, 17294.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.611331054E12, 7006.7], [1.611331052E12, 24370.0], [1.611331051E12, 7604.6], [1.611331059E12, 31230.0], [1.611331058E12, 31195.0], [1.611331028E12, 779.4], [1.611331027E12, 167.5], [1.61133107E12, 42288.0], [1.611331029E12, 2027.2], [1.611331072E12, 45125.0], [1.611331067E12, 39678.0], [1.611331069E12, 42174.0], [1.611331033E12, 5779.6], [1.611331076E12, 47527.0], [1.611331075E12, 47186.0], [1.611331034E12, 6289.1], [1.61133103E12, 2990.6], [1.611331032E12, 5009.7], [1.611331031E12, 4149.1], [1.611331074E12, 46681.0], [1.611331038E12, 11029.8], [1.61133104E12, 13069.0], [1.611331039E12, 4913.0], [1.611331036E12, 8348.400000000001], [1.611331035E12, 7748.8], [1.611331078E12, 45072.8], [1.611331037E12, 10027.2], [1.611331044E12, 6989.400000000001], [1.611331043E12, 15541.0], [1.611331045E12, 17744.0], [1.611331041E12, 13691.0], [1.611331042E12, 15121.0], [1.611331049E12, 21841.0], [1.61133105E12, 22720.0], [1.611331046E12, 18395.8], [1.611331047E12, 16698.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.611331054E12, 7007.0], [1.611331052E12, 24370.0], [1.611331051E12, 7607.0], [1.611331059E12, 31230.0], [1.611331058E12, 31195.0], [1.611331028E12, 781.0], [1.611331027E12, 185.95], [1.61133107E12, 42288.0], [1.611331029E12, 2040.0], [1.611331072E12, 45125.0], [1.611331067E12, 39678.0], [1.611331069E12, 42174.0], [1.611331033E12, 5877.0], [1.611331076E12, 47527.0], [1.611331075E12, 47186.0], [1.611331034E12, 6323.0], [1.61133103E12, 3058.0], [1.611331032E12, 5013.0], [1.611331031E12, 4173.0], [1.611331074E12, 46681.0], [1.611331038E12, 11033.0], [1.61133104E12, 13069.0], [1.611331039E12, 4913.0], [1.611331036E12, 9145.0], [1.611331035E12, 8112.0], [1.611331078E12, 47429.0], [1.611331037E12, 10028.0], [1.611331044E12, 7213.0], [1.611331043E12, 15541.0], [1.611331045E12, 17747.0], [1.611331041E12, 13691.0], [1.611331042E12, 15121.0], [1.611331049E12, 21842.0], [1.61133105E12, 22720.0], [1.611331046E12, 18446.0], [1.611331047E12, 17294.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.611331054E12, 7007.0], [1.611331052E12, 24370.0], [1.611331051E12, 7607.0], [1.611331059E12, 31230.0], [1.611331058E12, 31195.0], [1.611331028E12, 780.85], [1.611331027E12, 178.0], [1.61133107E12, 42288.0], [1.611331029E12, 2040.0], [1.611331072E12, 45125.0], [1.611331067E12, 39678.0], [1.611331069E12, 42174.0], [1.611331033E12, 5798.8], [1.611331076E12, 47527.0], [1.611331075E12, 47186.0], [1.611331034E12, 6308.15], [1.61133103E12, 3028.2], [1.611331032E12, 5013.0], [1.611331031E12, 4156.05], [1.611331074E12, 46681.0], [1.611331038E12, 11033.0], [1.61133104E12, 13069.0], [1.611331039E12, 4913.0], [1.611331036E12, 9145.0], [1.611331035E12, 8111.0], [1.611331078E12, 46620.6], [1.611331037E12, 10028.0], [1.611331044E12, 7213.0], [1.611331043E12, 15541.0], [1.611331045E12, 17745.8], [1.611331041E12, 13691.0], [1.611331042E12, 15121.0], [1.611331049E12, 21841.9], [1.61133105E12, 22720.0], [1.611331046E12, 18416.6], [1.611331047E12, 17113.199999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.611331054E12, 6581.0], [1.611331052E12, 5456.0], [1.611331051E12, 3809.0], [1.611331059E12, 31178.0], [1.611331058E12, 31177.0], [1.611331028E12, 337.0], [1.611331027E12, 53.0], [1.61133107E12, 42263.0], [1.611331029E12, 1432.0], [1.611331072E12, 44811.0], [1.611331067E12, 39671.0], [1.611331069E12, 42172.0], [1.611331033E12, 61.0], [1.611331076E12, 47525.0], [1.611331075E12, 46948.0], [1.611331034E12, 571.0], [1.61133103E12, 1269.0], [1.611331032E12, 240.0], [1.611331031E12, 464.0], [1.611331074E12, 45921.0], [1.611331038E12, 4355.0], [1.61133104E12, 3322.0], [1.611331039E12, 3325.0], [1.611331036E12, 403.0], [1.611331035E12, 768.0], [1.611331078E12, 30817.0], [1.611331037E12, 1647.0], [1.611331044E12, 1046.0], [1.611331043E12, 5782.0], [1.611331045E12, 9113.0], [1.611331041E12, 8070.0], [1.611331042E12, 5176.0], [1.611331049E12, 1931.0], [1.61133105E12, 11369.0], [1.611331046E12, 835.0], [1.611331047E12, 11223.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.611331054E12, 6664.5], [1.611331052E12, 6533.0], [1.611331051E12, 3960.0], [1.611331059E12, 31189.0], [1.611331058E12, 31190.0], [1.611331028E12, 762.5], [1.611331027E12, 95.5], [1.61133107E12, 42263.0], [1.611331029E12, 1884.0], [1.611331072E12, 44964.5], [1.611331067E12, 39673.5], [1.611331069E12, 42173.0], [1.611331033E12, 4907.0], [1.611331076E12, 47526.0], [1.611331075E12, 46956.0], [1.611331034E12, 6160.5], [1.61133103E12, 2770.0], [1.611331032E12, 4313.5], [1.611331031E12, 3845.5], [1.611331074E12, 45940.0], [1.611331038E12, 5586.0], [1.61133104E12, 3432.0], [1.611331039E12, 3751.0], [1.611331036E12, 3823.0], [1.611331035E12, 4663.0], [1.611331078E12, 37717.5], [1.611331037E12, 4322.0], [1.611331044E12, 6090.0], [1.611331043E12, 14116.0], [1.611331045E12, 17351.0], [1.611331041E12, 10880.5], [1.611331042E12, 14713.0], [1.611331049E12, 12686.0], [1.61133105E12, 22708.0], [1.611331046E12, 14092.0], [1.611331047E12, 14441.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.611331078E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 95.5, "minX": 2.0, "maxY": 46814.5, "series": [{"data": [[33.0, 14092.0], [2.0, 42173.0], [47.0, 2770.0], [48.0, 4663.0], [3.0, 22714.0], [52.0, 3845.5], [4.0, 40970.5], [67.0, 14441.0], [72.0, 30817.0], [5.0, 31178.0], [6.0, 14116.0], [7.0, 46814.5], [8.0, 14713.0], [10.0, 6664.5], [11.0, 2008.0], [12.0, 3960.0], [204.0, 95.5], [13.0, 4322.0], [16.0, 3751.0], [21.0, 12686.0], [22.0, 762.5], [23.0, 5586.0], [27.0, 17351.0], [28.0, 6160.5], [29.0, 3823.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 1194.0], [72.0, 811.0], [48.0, 2409.0], [3.0, 1424.0], [29.0, 1022.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 204.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 95.5, "minX": 2.0, "maxY": 46814.5, "series": [{"data": [[33.0, 14092.0], [2.0, 42172.5], [47.0, 2770.0], [48.0, 4663.0], [3.0, 22714.0], [52.0, 3845.5], [4.0, 40970.5], [67.0, 14441.0], [72.0, 30817.0], [5.0, 31178.0], [6.0, 14116.0], [7.0, 46814.5], [8.0, 14713.0], [10.0, 6664.5], [11.0, 2008.0], [12.0, 3960.0], [204.0, 95.5], [13.0, 4322.0], [16.0, 3751.0], [21.0, 12686.0], [22.0, 762.5], [23.0, 5586.0], [27.0, 17351.0], [28.0, 6160.5], [29.0, 3823.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 1194.0], [72.0, 811.0], [48.0, 2409.0], [3.0, 1424.0], [29.0, 1022.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 204.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.611331027E12, "maxY": 400.0, "series": [{"data": [[1.611331033E12, 76.0], [1.611331034E12, 28.0], [1.61133103E12, 46.0], [1.611331032E12, 3.0], [1.611331031E12, 46.0], [1.611331038E12, 17.0], [1.611331039E12, 8.0], [1.611331036E12, 22.0], [1.611331035E12, 38.0], [1.611331037E12, 8.0], [1.611331043E12, 3.0], [1.611331041E12, 1.0], [1.611331028E12, 126.0], [1.611331027E12, 400.0], [1.611331029E12, 11.0], [1.611331046E12, 9.0], [1.611331047E12, 58.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.611331047E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.611331027E12, "maxY": 204.0, "series": [{"data": [[1.611331054E12, 10.0], [1.611331052E12, 5.0], [1.611331051E12, 12.0], [1.611331059E12, 5.0], [1.611331058E12, 5.0], [1.611331028E12, 22.0], [1.611331027E12, 204.0], [1.61133107E12, 4.0], [1.611331029E12, 11.0], [1.611331072E12, 4.0], [1.611331067E12, 4.0], [1.611331069E12, 2.0], [1.611331033E12, 71.0], [1.611331076E12, 3.0], [1.611331075E12, 7.0], [1.611331034E12, 28.0], [1.61133103E12, 47.0], [1.611331032E12, 12.0], [1.611331031E12, 52.0], [1.611331074E12, 7.0], [1.611331038E12, 23.0], [1.61133104E12, 4.0], [1.611331039E12, 10.0], [1.611331036E12, 26.0], [1.611331035E12, 47.0], [1.611331078E12, 72.0], [1.611331037E12, 13.0], [1.611331044E12, 11.0], [1.611331043E12, 6.0], [1.611331045E12, 27.0], [1.611331041E12, 2.0], [1.611331042E12, 8.0], [1.611331049E12, 21.0], [1.61133105E12, 3.0], [1.611331046E12, 33.0], [1.611331047E12, 67.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.611331033E12, 1.0], [1.611331041E12, 1.0], [1.611331039E12, 6.0], [1.611331036E12, 3.0], [1.611331035E12, 1.0]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.611331078E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.611331027E12, "maxY": 113.0, "series": [{"data": [[1.611331033E12, 49.0], [1.611331034E12, 26.0], [1.61133103E12, 45.0], [1.611331032E12, 6.0], [1.611331031E12, 34.0], [1.611331027E12, 113.0], [1.611331029E12, 11.0], [1.611331036E12, 3.0], [1.611331035E12, 13.0]], "isOverall": false, "label": "GET /-success", "isController": false}, {"data": [[1.611331054E12, 10.0], [1.611331052E12, 5.0], [1.611331051E12, 12.0], [1.611331059E12, 5.0], [1.611331058E12, 5.0], [1.61133107E12, 4.0], [1.611331072E12, 4.0], [1.611331067E12, 4.0], [1.611331069E12, 2.0], [1.611331033E12, 1.0], [1.611331076E12, 3.0], [1.611331075E12, 7.0], [1.61133103E12, 1.0], [1.611331032E12, 3.0], [1.611331031E12, 6.0], [1.611331074E12, 7.0], [1.611331038E12, 6.0], [1.61133104E12, 4.0], [1.611331039E12, 2.0], [1.611331036E12, 4.0], [1.611331035E12, 9.0], [1.611331078E12, 72.0], [1.611331037E12, 5.0], [1.611331044E12, 11.0], [1.611331043E12, 3.0], [1.611331045E12, 27.0], [1.611331041E12, 1.0], [1.611331042E12, 8.0], [1.611331049E12, 21.0], [1.61133105E12, 3.0], [1.611331046E12, 24.0], [1.611331047E12, 9.0]], "isOverall": false, "label": "POST /graphql - Login-success", "isController": false}, {"data": [[1.611331033E12, 1.0], [1.611331041E12, 1.0], [1.611331039E12, 6.0], [1.611331036E12, 3.0], [1.611331035E12, 1.0]], "isOverall": false, "label": "POST /graphql - Login-failure", "isController": false}, {"data": [[1.611331033E12, 21.0], [1.611331034E12, 2.0], [1.61133103E12, 1.0], [1.611331032E12, 3.0], [1.611331031E12, 12.0], [1.611331038E12, 17.0], [1.611331039E12, 8.0], [1.611331036E12, 19.0], [1.611331035E12, 25.0], [1.611331037E12, 8.0], [1.611331043E12, 3.0], [1.611331041E12, 1.0], [1.611331028E12, 22.0], [1.611331027E12, 91.0], [1.611331046E12, 9.0], [1.611331047E12, 58.0]], "isOverall": false, "label": "GET /login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.611331078E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.611331027E12, "maxY": 204.0, "series": [{"data": [[1.611331054E12, 10.0], [1.611331052E12, 5.0], [1.611331051E12, 12.0], [1.611331059E12, 5.0], [1.611331058E12, 5.0], [1.611331028E12, 22.0], [1.611331027E12, 204.0], [1.61133107E12, 4.0], [1.611331029E12, 11.0], [1.611331072E12, 4.0], [1.611331067E12, 4.0], [1.611331069E12, 2.0], [1.611331033E12, 71.0], [1.611331076E12, 3.0], [1.611331075E12, 7.0], [1.611331034E12, 28.0], [1.61133103E12, 47.0], [1.611331032E12, 12.0], [1.611331031E12, 52.0], [1.611331074E12, 7.0], [1.611331038E12, 23.0], [1.61133104E12, 4.0], [1.611331039E12, 10.0], [1.611331036E12, 26.0], [1.611331035E12, 47.0], [1.611331078E12, 72.0], [1.611331037E12, 13.0], [1.611331044E12, 11.0], [1.611331043E12, 6.0], [1.611331045E12, 27.0], [1.611331041E12, 2.0], [1.611331042E12, 8.0], [1.611331049E12, 21.0], [1.61133105E12, 3.0], [1.611331046E12, 33.0], [1.611331047E12, 67.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.611331033E12, 1.0], [1.611331041E12, 1.0], [1.611331039E12, 6.0], [1.611331036E12, 3.0], [1.611331035E12, 1.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.611331078E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

