=================
Contextualização
=================


Na programação funcional, o conceito de mónade é usado para sintetizar a ideia de computação.

Uma computação é vista como algo que se passa dentro de uma "Caixa Preta" e da qual conseguimos
apenas ver os resultados .
=================================================================================================

=================
Motivação 
=================

=================================================================================================
Digamos que temos como desafio a modelação de um tipo
de dados que nos permite representar expressões 
aritméticas, com constantes, variáveis, produtos, somas,
subtrações e divisões inteiras .

data Exp = Const Int | Var String | Prod Exp Exp | Add Exp Exp | Sub Exp Exp | Div Exp Exp 
    deriving Show 

Tendo este desafio ultrapassado, existe a necessidade de  calcular o valor de uma 
determinada expressão, para isto, é proposto a implementação de um novo tipo de dados 
"Dict" que por sua vez armazena numa lista o valor associado a uma determinada variável e
implementa-se a função "eval" responsável por calcular o valor de uma determinada expressão .

type Dict = [(String,Int)]

eval :: Dict -> Exp -> Int 
eval _ (Const n) = n 
eval dict (Var x) = fromJust (lookup x dict) 
eval dict (Prod e d) = (eval dict e) * (eval dict d )
eval dict (Add e d) = (eval dict e) + (eval dict d )
eval dict (Sub e d) = (eval dict e) - (eval dict d )
eval dict (Div e d) = div (eval dict e) (eval dict d )


Aos olhos de um bom observador ressaltam logo dois possíveis problemas :

1° :: A divisão de uma determinada expressão por 0 lançaria uma "exception",
      visto que não é possível efectuar esta operação.

      Exemplo : 
               exceptionDiv = Div (Const 4) (Const 0)
               eval [] exceptionDiv 
               *** Exception: divide by zero

2° :: O cálculo de uma determinada operação cuja variável não se encontra definida no nosso 
      dicionário .
      Seja o dict = [("x",0)]
      exceptionDict = Div (Const 4) (Var "y")
      eval dict exceptionDict 
      *** Exception: Maybe.fromJust: Nothing 


A razão destes problemas está fortemente relacionada com o facto de estarmos a definir uma função
parcial, isto é, uma função que não está definida para todos os valores do seu domínio.

Uma solução possível passa por declarar o construtor de tipos Maybe como instância da classe Monad,
sendo muito útil para trabalhar com computações parciais, pois permite fazer a propagação de 
erros.

                                            instance Monad Maybe where
                                                return x = Just x 
                                                (Just x) >>= f = f x
                                                Nothing >>= _ = Nothing
                                                fail _ = Nothing


Redefinindo a nossa solução inicial temos o seguinte :

eval' ::Dict -> Exp ->Maybe Int 
eval' _ (Const n) = return n  
eval' dict (Var x) = lookup x dict
eval' dict (Prod e d) = do 
                            esq <- eval' dict e
                            dir <- eval' dict d
                            return (esq*dir)
eval' dict (Add e d) = do 
                            esq <- eval' dict e
                            dir <- eval' dict d
                            return (esq+dir)                         
eval' dict (Sub e d) = do 
                            esq <- eval' dict e
                            dir <- eval' dict d
                            return (esq-dir)
eval' dict (Div e d) = do 
                            esq <- eval' dict e
                            dir <- eval' dict d
                            if dir==0 then Nothing 
                                      else return (div esq dir)



1° :: A divisão de uma determinada expressão por 0 lançaria uma exception, 
        visto que não é possível efectuar esta operação.

Exemplo : 
            exceptionDiv = Div (Const 4) (Const 0)
            eval' [] exceptionDiv 
            Nothing

2° :: O cálculo de uma determinada operação cuja variável não se encontra definida no nosso 
      dicionário .
      Seja o dict = [("x",0)]
             exceptionDict = Div (Const 4) (Var "y")
             eval' dict exceptionDict 
             Nothing


Com base nisso é possível constatar que uma das principais vantagens na utilização de 
mónades é a conversão de funções parciais em totais sem grande esforço, conseguindo mapear todos os valores 
do seu domínio para algum valor do contradomínio.
Como se pode verificar na solução final obtida outra grande vantagem em declarar 
instâncias da classe "Monad" é que passamos a poder usar uma notação especial 
para escrever funções mónadicas, sendo que esta notação baseia-se na equivalência

                                     d >>= \x -> e <=> do {x <- d; e }
    
tornando explícita a noção de extrair um valor de uma computação antes de ser usado.

Em suma mónades não são apenas construções matemáticas da teoria das categorias, mas 
abstrações poderosas que permitem reutilizar código para resolver problemas do mundo real.

=================================================================================================


======================
Curva de Aprendizagem
======================


=================================================================================================

No que concerne aos mónades, a curva de aprendizagem acaba por ser o maior empecilho para pessoas
que procuram aprender o conceito, pois apesar de o mesmo ser muito útil ele carrega um certo 
grau de dificuldade e alguns membros da comunidade acabam, por divulgar certos artigos/tutoriais de baixa
qualidade tornando mais confuso para quem procura perceber.
================================================================================================


======================
The Monadic Curse
======================

The Monadic Curse is that once someone learns what Monads are and how to use them,
they lose the ability to explain them to other people.

- "Crockford's Law (aka The Monadic Curse)"

Esperamos que não tenho sido esse caso :) .