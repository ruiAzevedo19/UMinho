/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 20:53:19 GMT 2020
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.GPS;
import Model.Utilizador;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import java.util.List;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00()  throws Throwable  {
        String[] stringArray0 = new String[8];
        Utilizador utilizador0 = Utilizador.fromArgs(stringArray0);
        assertNull(utilizador0);
    }

    @Test(timeout = 4000)
    public void test01()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador((String) null, (String) null, gPS0);
        String string0 = utilizador0.getNome();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test02()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador("Invalid codigo", ", local=", gPS0);
        String string0 = utilizador0.getNome();
        assertEquals(", local=", string0);
        assertEquals("Invalid codigo", utilizador0.getCodigo());
    }

    @Test(timeout = 4000)
    public void test03()  throws Throwable  {
        GPS gPS0 = new GPS();
        gPS0.setY(47.12734);
        Utilizador utilizador0 = new Utilizador(", nome='", ":", gPS0);
        utilizador0.getLocal();
        assertEquals(":", utilizador0.getNome());
        assertEquals(", nome='", utilizador0.getCodigo());
    }

    @Test(timeout = 4000)
    public void test04()  throws Throwable  {
        GPS gPS0 = new GPS(1246.38604, (-3201.18));
        Utilizador utilizador0 = new Utilizador("Invalid nome", "model.GPS", gPS0);
        utilizador0.getLocal();
        assertEquals("Invalid nome", utilizador0.getCodigo());
        assertEquals("model.GPS", utilizador0.getNome());
    }

    @Test(timeout = 4000)
    public void test05()  throws Throwable  {
        GPS gPS0 = new GPS((-2034.6684612354), (-1312.7350151527228));
        Utilizador utilizador0 = new Utilizador(":bvXK4}-xC&", "", gPS0);
        utilizador0.getLocal();
        assertEquals("", utilizador0.getNome());
        assertEquals(":bvXK4}-xC&", utilizador0.getCodigo());
    }

    @Test(timeout = 4000)
    public void test06()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador((String) null, ":", gPS0);
        String string0 = utilizador0.getCodigo();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test07()  throws Throwable  {
        GPS gPS0 = new GPS(964.73425652, 0.0);
        Utilizador utilizador0 = new Utilizador("", "a", gPS0);
        String string0 = utilizador0.getCodigo();
        assertEquals("a", utilizador0.getNome());
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test08()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador(", nome='", ":", gPS0);
        utilizador0.compareTo(utilizador0);
        assertEquals(":", utilizador0.getNome());
        assertEquals(", nome='", utilizador0.getCodigo());
    }

    @Test(timeout = 4000)
    public void test09()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador("Ut|Z$xGLlM", "E|rT*", gPS0);
        Utilizador utilizador1 = new Utilizador();
        int int0 = utilizador0.compareTo(utilizador1);
        assertEquals("E|rT*", utilizador0.getNome());
        assertEquals(12, int0);
        assertEquals("Invalid nome", utilizador1.getNome());
    }

    @Test(timeout = 4000)
    public void test10()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador("Ut|Z$xGLlM", "E|rT]w*", gPS0);
        Utilizador utilizador1 = new Utilizador();
        int int0 = utilizador1.compareTo(utilizador0);
        assertEquals((-12), int0);
        assertEquals("E|rT]w*", utilizador0.getNome());
        assertEquals("Invalid nome", utilizador1.getNome());
    }

    @Test(timeout = 4000)
    public void test11()  throws Throwable  {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "Pos Y: ";
        stringArray0[2] = "14Fj^g-'4M0T-HosSSZ";
        // Undeclared exception!
        try {
            Utilizador.fromArgs(stringArray0);
            fail("Expecting exception: NumberFormatException");

        } catch(NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test12()  throws Throwable  {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        // Undeclared exception!
        try {
            Utilizador.fromArgs(stringArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // 1
            //
            verifyException("Model.Utilizador", e);
        }
    }

    @Test(timeout = 4000)
    public void test13()  throws Throwable  {
        Utilizador utilizador0 = null;
        try {
            utilizador0 = new Utilizador((Utilizador) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("Model.Utilizador", e);
        }
    }

    @Test(timeout = 4000)
    public void test14()  throws Throwable  {
        Utilizador utilizador0 = null;
        try {
            utilizador0 = new Utilizador("Ou:KrVwW", "", (GPS) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("Model.Utilizador", e);
        }
    }

    @Test(timeout = 4000)
    public void test15()  throws Throwable  {
        GPS gPS0 = new GPS((-2034.6684612354), (-1312.7350151527228));
        Utilizador utilizador0 = new Utilizador(":bvXK4}-xC&", "", gPS0);
        String string0 = utilizador0.getNome();
        assertEquals(":bvXK4}-xC&", utilizador0.getCodigo());
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test16()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador("Ut|Z$xGLlM", "E|rT*", gPS0);
        String string0 = utilizador0.getCodigo();
        assertEquals("E|rT*", utilizador0.getNome());
        assertEquals("Ut|Z$xGLlM", string0);
    }

    @Test(timeout = 4000)
    public void test17()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador(", preco=", ", preco=", gPS0);
        GPS gPS1 = utilizador0.getLocal();
        assertEquals(0.0, gPS1.getX(), 0.01);
    }

    @Test(timeout = 4000)
    public void test18()  throws Throwable  {
        Utilizador utilizador0 = new Utilizador();
        GPS gPS0 = new GPS();
        Utilizador utilizador1 = new Utilizador("Invalid codigo", "Coordenadas:\n", gPS0);
        boolean boolean0 = utilizador0.equals(utilizador1);
        assertFalse(boolean0);
        assertEquals("Invalid codigo", utilizador1.getCodigo());
        assertEquals("Coordenadas:\n", utilizador1.getNome());
        assertEquals("Invalid nome", utilizador0.getNome());
        assertEquals("Invalid codigo", utilizador0.getCodigo());
    }

    @Test(timeout = 4000)
    public void test19()  throws Throwable  {
        Utilizador utilizador0 = new Utilizador();
        GPS gPS0 = new GPS();
        Utilizador utilizador1 = new Utilizador("Model.Utilizador{codigo='Invalid codigo', nome='Invalid nome', local=Coordenadas:\nPos X: 0.0;\nPos Y: 0.0;\n}", "Model.Utilizador{codigo='Invalid codigo', nome='Invalid nome', local=Coordenadas:\nPos X: 0.0;\nPos Y: 0.0;\n}", gPS0);
        boolean boolean0 = utilizador0.equals(utilizador1);
        assertFalse(boolean0);
        assertEquals("Invalid nome", utilizador0.getNome());
        assertEquals("Invalid codigo", utilizador0.getCodigo());
    }

    @Test(timeout = 4000)
    public void test20()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador(", preco=", ", preco=", gPS0);
        boolean boolean0 = utilizador0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test21()  throws Throwable  {
        Utilizador utilizador0 = new Utilizador();
        boolean boolean0 = utilizador0.equals(utilizador0);
        assertEquals("Invalid nome", utilizador0.getNome());
        assertEquals("Invalid codigo", utilizador0.getCodigo());
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test22()  throws Throwable  {
        String[] stringArray0 = new String[1];
        Utilizador utilizador0 = Utilizador.fromArgs(stringArray0);
        assertNull(utilizador0);
    }

    @Test(timeout = 4000)
    public void test23()  throws Throwable  {
        String[] stringArray0 = new String[4];
        // Undeclared exception!
        try {
            Utilizador.fromArgs(stringArray0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("Model.Utilizador", e);
        }
    }

    @Test(timeout = 4000)
    public void test24()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador(", preco=", ", preco=", gPS0);
        List<Encomenda> list0 = utilizador0.getHistorico();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test25()  throws Throwable  {
        Utilizador utilizador0 = new Utilizador();
        // Undeclared exception!
        try {
            utilizador0.compareTo((Utilizador) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("Model.Utilizador", e);
        }
    }

    @Test(timeout = 4000)
    public void test26()  throws Throwable  {
        Utilizador utilizador0 = new Utilizador();
        utilizador0.hashCode();
        assertEquals("Invalid nome", utilizador0.getNome());
        assertEquals("Invalid codigo", utilizador0.getCodigo());
    }

    @Test(timeout = 4000)
    public void test27()  throws Throwable  {
        Utilizador utilizador0 = new Utilizador();
        Utilizador utilizador1 = utilizador0.clone();
        boolean boolean0 = utilizador0.equals(utilizador1);
        assertTrue(boolean0);
        assertEquals("Invalid codigo", utilizador1.getCodigo());
        assertEquals("Invalid nome", utilizador1.getNome());
    }

    @Test(timeout = 4000)
    public void test28()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador(", preco=", ", preco=", gPS0);
        List<Encomenda> list0 = utilizador0.getEncomendasPorClassificar();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test29()  throws Throwable  {
        Utilizador utilizador0 = new Utilizador();
        utilizador0.getEncomendasDeTransportadoras();
        assertEquals("Invalid nome", utilizador0.getNome());
        assertEquals("Invalid codigo", utilizador0.getCodigo());
    }

    @Test(timeout = 4000)
    public void test30()  throws Throwable  {
        Utilizador utilizador0 = new Utilizador();
        List<Encomenda> list0 = utilizador0.getEncomendasClassificadas();
        boolean boolean0 = utilizador0.equals(list0);
        assertEquals("Invalid nome", utilizador0.getNome());
        assertFalse(boolean0);
        assertEquals("Invalid codigo", utilizador0.getCodigo());
    }

    @Test(timeout = 4000)
    public void test31()  throws Throwable  {
        Utilizador utilizador0 = new Utilizador();
        Utilizador utilizador1 = new Utilizador(utilizador0);
        assertTrue(utilizador1.equals((Object)utilizador0));
        assertEquals("Invalid nome", utilizador1.getNome());
        assertEquals("Invalid codigo", utilizador1.getCodigo());
    }

    @Test(timeout = 4000)
    public void test32()  throws Throwable  {
        GPS gPS0 = new GPS();
        Utilizador utilizador0 = new Utilizador(", preco=", ", preco=", gPS0);
        String string0 = utilizador0.toString();
        assertEquals("Model.Utilizador{codigo=', preco=', nome=', preco=', local=Coordenadas:\nPos X: 0.0;\nPos Y: 0.0;\n}", string0);
    }
}
