/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 19:26:30 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Map;
import model.Encomenda;
import model.GPS;
import model.Transportadora;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadora_ESTest extends Transportadora_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.review(0.0);
      transportadora0.review(3055.01735469);
      assertEquals(2, transportadora0.getNrReviews());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("3Tti", "X5G}m%Pz}W5,'#g", gPS0, "X5G}m%Pz}W5,'#g", 1766.11342235862, 1766.11342235862);
      Transportadora.minVelocidade = (-1.0);
      transportadora0.hashCode();
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(1766.11342235862, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(1766.11342235862, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals("X5G}m%Pz}W5,'#g", transportadora0.getNif());
      assertEquals("3Tti", transportadora0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("GIwd|8>*:", "GIwd|8>*:", gPS0, "Xv,jhA!$$T&v 63D", 0.0, (-2987.871757));
      Transportadora transportadora1 = new Transportadora("E", ", quant=", gPS0, "_[tP134vo}", 0.0, 0.0);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertEquals(", quant=", transportadora1.getNome());
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertFalse(boolean0);
      assertEquals("E", transportadora1.getCodigo());
      assertEquals("_[tP134vo}", transportadora1.getNif());
      assertEquals(0, transportadora1.getNrReviews());
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertTrue(transportadora1.isDisponivel());
      assertEquals((-2987.871757), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora((String) null, (String) null, gPS0, "&G<Twu'OAb) ", 4, (-1.0));
      Transportadora transportadora1 = new Transportadora("&G<Twu'OAb) ", "Coordenadas:\nPos X: 0.0;\nPos Y: 0.0;\n", gPS0, "&G<Twu'OAb) ", 0.0, 1.0);
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals("&G<Twu'OAb) ", transportadora1.getCodigo());
      assertEquals("&G<Twu'OAb) ", transportadora1.getNif());
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertTrue(transportadora1.isDisponivel());
      assertEquals("Coordenadas:\nPos X: 0.0;\nPos Y: 0.0;\n", transportadora1.getNome());
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(1.0, transportadora1.getPrecoKm(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, transportadora1.getNrReviews());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Transportadora transportadora0 = Transportadora.fromArgs(stringArray0);
      assertNull(transportadora0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(948);
      Transportadora transportadora0 = new Transportadora();
      Transportadora.minVelocidade = 0.0;
      transportadora0.randomVelocidade();
      double double0 = transportadora0.randomVelocidade();
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals("Invalid codigo", transportadora0.getCodigo());
      assertTrue(transportadora0.isDisponivel());
      assertEquals("Invalid nome", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(72.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GPS gPS0 = new GPS((-1579.9), (-1579.9));
      Transportadora transportadora0 = new Transportadora((String) null, ", raio=", gPS0, ", raio=", (-1852.67), (-1852.67));
      Transportadora.maxVelocidade = (-1579.9);
      double double0 = transportadora0.randomVelocidade();
      assertEquals((-121.99000000000001), double0, 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals((-1852.67), transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals((-1852.67), transportadora0.getRaio(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertTrue(transportadora0.isDisponivel());
      
      transportadora0.setDisponivel(false);
      boolean boolean0 = transportadora0.isDisponivel();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("Invalid codigo", transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals("Invalid nome", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      Transportadora.maxVelocidade = (-2495.272705011489);
      GPS gPS0 = new GPS();
      Transportadora transportadora1 = new Transportadora("", ":bAX3^`;/", gPS0, "", 0, 0);
      double double0 = transportadora1.getVelocidade();
      assertTrue(transportadora1.isDisponivel());
      assertEquals((-213.5272705011489), double0, 0.01);
      assertEquals("", transportadora1.getNif());
      assertEquals("", transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(":bAX3^`;/", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals(0, transportadora1.getNrReviews());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.review(3055.01735469);
      double double0 = transportadora0.getRating();
      assertEquals(1, transportadora0.getNrReviews());
      assertEquals(3055.01735469, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("3Tti", "X5G}m%Pz}W5,'#g", gPS0, "X5G}m%Pz}W5,'#g", 1766.11342235862, 1766.11342235862);
      transportadora0.review((-1658.097));
      double double0 = transportadora0.getRating();
      assertEquals(1, transportadora0.getNrReviews());
      assertEquals((-1658.097), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.getRaio();
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("Invalid nome", transportadora0.getNome());
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals("Invalid codigo", transportadora0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("!nnHkHu{C", "Model.Transportadora{codigo='", gPS0, "!nnHkHu{C", (-385.63477483739), 0.0);
      double double0 = transportadora0.getRaio();
      assertEquals((-385.63477483739), double0, 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals("Model.Transportadora{codigo='", transportadora0.getNome());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals("!nnHkHu{C", transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertTrue(transportadora0.isDisponivel());
      assertEquals("!nnHkHu{C", transportadora0.getNif());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.getPrecoKm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals("Invalid codigo", transportadora0.getCodigo());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals("Invalid nome", transportadora0.getNome());
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora((String) null, (String) null, gPS0, "&G<Twu'OAb) ", 4, (-1.0));
      double double0 = transportadora0.getPrecoKm();
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(4.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertTrue(transportadora0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.review(0.0);
      int int0 = transportadora0.getNrReviews();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GPS gPS0 = new GPS(196.85, 196.85);
      Transportadora transportadora0 = new Transportadora((String) null, (String) null, gPS0, "HIhsl", (-391.48517768), 196.85);
      String string0 = transportadora0.getNome();
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals((-391.48517768), transportadora0.getRaio(), 0.01);
      assertEquals(196.85, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertNull(string0);
      assertEquals(0, transportadora0.getNrReviews());
      assertTrue(transportadora0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GPS gPS0 = new GPS((-408.236932), (-408.236932));
      Transportadora transportadora0 = new Transportadora("", "", gPS0, ", peso=", 0.0, 1.0);
      String string0 = transportadora0.getNome();
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getCodigo());
      assertTrue(transportadora0.isDisponivel());
      assertEquals(1.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals("", string0);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(", peso=", transportadora0.getNif());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GPS gPS0 = new GPS((-2918.359874443), (-1.0));
      Transportadora transportadora0 = new Transportadora((String) null, "Di#bu[`", gPS0, (String) null, (-2918.359874443), (-2918.359874443));
      String string0 = transportadora0.getNif();
      assertEquals((-2918.359874443), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertTrue(transportadora0.isDisponivel());
      assertEquals((-2918.359874443), transportadora0.getRaio(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GPS gPS0 = new GPS(2092.44, 2092.44);
      Transportadora transportadora0 = new Transportadora("", "V[DI)P-t2z", gPS0, "", 635.05823, 635.05823);
      String string0 = transportadora0.getNif();
      assertEquals("", string0);
      assertEquals("", transportadora0.getCodigo());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(635.05823, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(635.05823, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals("V[DI)P-t2z", transportadora0.getNome());
      assertTrue(transportadora0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GPS gPS0 = new GPS(2635.48465, 80.0);
      Transportadora transportadora0 = new Transportadora("", "Invalid codigo", gPS0, "", 0.0, 80.0);
      transportadora0.getLocal();
      assertEquals("Invalid codigo", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals("", transportadora0.getCodigo());
      assertEquals(80.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertTrue(transportadora0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GPS gPS0 = new GPS((-2918.359874443), (-1.0));
      Transportadora transportadora0 = new Transportadora((String) null, "Di#bu[`", gPS0, (String) null, (-2918.359874443), (-2918.359874443));
      transportadora0.getLocal();
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals((-2918.359874443), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals((-2918.359874443), transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertTrue(transportadora0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GPS gPS0 = new GPS((-647.6692291819), (-3309.0819));
      Transportadora transportadora0 = new Transportadora("Q9VMF>KZ#)h!^4$", "Q9VMF>KZ#)h!^4$", gPS0, "", (-647.6692291819), (-647.6692291819));
      Double double0 = new Double((-647.6692291819));
      transportadora0.setKmPercorridos(double0);
      transportadora0.getKmPercorridos();
      assertEquals((-647.6692291819), transportadora0.getKmPercorridos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Double double0 = new Double(72.0);
      transportadora0.setKmPercorridos(double0);
      transportadora0.getKmPercorridos();
      assertEquals(72.0, transportadora0.getKmPercorridos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Double double0 = new Double(2433.321198608);
      transportadora0.setKmPercorridos(double0);
      transportadora0.getKmPercorridos();
      assertEquals(2433.321198608, transportadora0.getKmPercorridos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GPS gPS0 = new GPS((-2918.359874443), (-1.0));
      Transportadora transportadora0 = new Transportadora((String) null, "Di#bu[`", gPS0, (String) null, (-2918.359874443), (-2918.359874443));
      String string0 = transportadora0.getCodigo();
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals((-2918.359874443), transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertNull(string0);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals((-2918.359874443), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.getCodigo();
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals("Invalid codigo", string0);
      assertEquals("Invalid nome", transportadora0.getNome());
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.compareTo(transportadora0);
      assertEquals("Invalid nome", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals("Invalid codigo", transportadora0.getCodigo());
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("model.LinhaEncomenda", "", gPS0, "", 139.103602917853, 139.103602917853);
      Transportadora transportadora1 = new Transportadora();
      int int0 = transportadora0.compareTo(transportadora1);
      assertEquals(139.103602917853, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals(36, int0);
      assertEquals(0, transportadora1.getNrReviews());
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getNome());
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals("Invalid nome", transportadora1.getNome());
      assertTrue(transportadora1.isDisponivel());
      assertEquals(139.103602917853, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals("Invalid nif", transportadora1.getNif());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("", "", gPS0, "0^-<(DEmR_", 0.0, 1865.000053759084);
      Transportadora transportadora1 = new Transportadora();
      int int0 = transportadora0.compareTo(transportadora1);
      assertEquals("Invalid nome", transportadora1.getNome());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertTrue(transportadora1.isDisponivel());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals((-14), int0);
      assertEquals(0, transportadora1.getNrReviews());
      assertEquals(1865.000053759084, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertTrue(transportadora0.isDisponivel());
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertEquals("0^-<(DEmR_", transportadora0.getNif());
      assertEquals("Invalid nif", transportadora1.getNif());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      // Undeclared exception!
      try { 
        transportadora0.setKmPercorridos((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Transportadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Pos X: ";
      stringArray0[2] = "Model.LinhaEncomenda{cod_Produto='";
      // Undeclared exception!
      try { 
        Transportadora.fromArgs(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ", preco=";
      // Undeclared exception!
      try { 
        Transportadora.fromArgs(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("model.Transportadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GPS gPS0 = new GPS((-1190.2994619384313), (-1190.2994619384313));
      Transportadora transportadora0 = new Transportadora((String) null, "x6Q4sGhUP ", gPS0, (String) null, 0.0, 0.0);
      // Undeclared exception!
      try { 
        transportadora0.enviaPedido((Map.Entry<Double, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transportadora transportadora0 = null;
      try {
        transportadora0 = new Transportadora("Invalid codigo", "Invalid codigo", (GPS) null, "z{1#dUT?-KNdTo#W", 40.0, 180.971233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Transportadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("model.LinhaEncomenda", "model.LinhaEncomenda", gPS0, "model.LinhaEncomenda", 2.0, 2.0);
      Transportadora transportadora1 = new Transportadora("model.LinhaEncomenda", "model.LinhaEncomenda", gPS0, "PM~%iM9)#tU", 2.0, 2.0);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertFalse(boolean0);
      assertEquals(2.0, transportadora1.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertEquals("model.LinhaEncomenda", transportadora1.getNome());
      assertTrue(transportadora1.isDisponivel());
      assertEquals("model.LinhaEncomenda", transportadora1.getCodigo());
      assertEquals(2.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertEquals(0, transportadora1.getNrReviews());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("model.LinhaEncomenda", "model.LinhaEncomenda", gPS0, "model.LinhaEncomenda", 2.0, 2.0);
      gPS0.setX((-1934.94));
      Transportadora transportadora1 = new Transportadora("model.LinhaEncomenda", "model.LinhaEncomenda", gPS0, "PM~%iM9)#tU", 2.0, 2.0);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertFalse(boolean0);
      assertEquals("model.LinhaEncomenda", transportadora1.getNome());
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertEquals("PM~%iM9)#tU", transportadora1.getNif());
      assertEquals(2.0, transportadora1.getPrecoKm(), 0.01);
      assertTrue(transportadora1.isDisponivel());
      assertEquals(0, transportadora1.getNrReviews());
      assertEquals(2.0, transportadora1.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals("model.LinhaEncomenda", transportadora1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("kmodel.Lihancomend", "kmodel.Lihancomend", gPS0, "qOK;t_TMc\"[ ", 40.0, 40.0);
      Transportadora transportadora1 = new Transportadora("kmodel.Lihancomend", "PM~%iM9)#tU", gPS0, "PM~%iM9)#tU", 40.0, 40.0);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(40.0, transportadora1.getRaio(), 0.01);
      assertEquals("kmodel.Lihancomend", transportadora1.getCodigo());
      assertEquals("kmodel.Lihancomend", transportadora0.getNome());
      assertFalse(boolean0);
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertTrue(transportadora1.isDisponivel());
      assertEquals(40.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals("PM~%iM9)#tU", transportadora1.getNome());
      assertEquals(0, transportadora1.getNrReviews());
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals("qOK;t_TMc\"[ ", transportadora0.getNif());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("kmodel.Lihancomend", "kmodel.Lihancomend", gPS0, "kmodel.Lihancomend", 0.0, 0.0);
      Transportadora transportadora1 = new Transportadora();
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertEquals("Invalid codigo", transportadora1.getCodigo());
      assertEquals("Invalid nif", transportadora1.getNif());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals("Invalid nome", transportadora1.getNome());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0, transportadora1.getNrReviews());
      assertTrue(transportadora1.isDisponivel());
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora1.getRating(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      GPS gPS0 = new GPS((-6476.230870664053), 0.0);
      Transportadora transportadora1 = new Transportadora("c", "c", gPS0, "c", 0.0, (-6476.230870664053));
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertFalse(boolean0);
      assertTrue(transportadora1.isDisponivel());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertEquals((-6476.230870664053), transportadora1.getPrecoKm(), 0.01);
      assertEquals("Invalid codigo", transportadora0.getCodigo());
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals(0, transportadora1.getNrReviews());
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertEquals("Invalid nome", transportadora0.getNome());
      assertTrue(transportadora0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("model.LinhaEncomenda", "model.LinhaEncomenda", gPS0, "model.LinhaEncomenda", 2.0, 2.0);
      Transportadora transportadora1 = new Transportadora();
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals("Invalid nome", transportadora1.getNome());
      assertEquals(2.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertTrue(transportadora1.isDisponivel());
      assertEquals(0, transportadora0.getNrReviews());
      assertFalse(boolean0);
      assertEquals("Invalid nif", transportadora1.getNif());
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals("Invalid codigo", transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertEquals(2.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals(0, transportadora1.getNrReviews());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora();
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertTrue(boolean0);
      assertEquals(44.0, transportadora1.getVelocidade(), 0.01);
      assertTrue(transportadora1.isDisponivel());
      assertEquals(0, transportadora1.getNrReviews());
      assertEquals(0.0, transportadora1.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getRating(), 0.01);
      assertEquals("Invalid nome", transportadora1.getNome());
      assertEquals("Invalid nif", transportadora1.getNif());
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals("Invalid codigo", transportadora1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GPS gPS0 = new GPS((-312.7246797636757), 2576.519900281);
      Transportadora transportadora0 = new Transportadora("", "", gPS0, "", 0.0, 0.0);
      boolean boolean0 = transportadora0.equals((Object) null);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertFalse(boolean0);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      boolean boolean0 = transportadora0.equals(transportadora0);
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals(0, transportadora0.getNrReviews());
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(boolean0);
      assertEquals("Invalid nome", transportadora0.getNome());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("Invalid codigo", transportadora0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Object object0 = new Object();
      boolean boolean0 = transportadora0.equals(object0);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("Invalid codigo", transportadora0.getCodigo());
      assertTrue(transportadora0.isDisponivel());
      assertEquals("Invalid nome", transportadora0.getNome());
      assertFalse(boolean0);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Transportadora transportadora0 = Transportadora.fromArgs(stringArray0);
      assertNull(transportadora0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        Transportadora.fromArgs(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Transportadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("model.LinhaEncomenda", "model.LinhaEncomenda", gPS0, "model.LinhaEncomenda", 2.0, 2.0);
      double double0 = transportadora0.getPrecoKm();
      assertEquals(2.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(2.0, double0, 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GPS gPS0 = new GPS((-312.7246797636757), 2576.519900281);
      Transportadora transportadora0 = new Transportadora("", "", gPS0, "", 0.0, 0.0);
      transportadora0.getCodigo();
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("kmodel.Lihancomend", "kmodel.Lihancomend", gPS0, "kmodel.Lihancomend", 0.0, 0.0);
      int int0 = transportadora0.getNrReviews();
      assertEquals(0, int0);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.getEncomendasEntregadas();
      assertEquals("Invalid codigo", transportadora0.getCodigo());
      assertEquals("Invalid nome", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora(".E~[iDU96[ApExI`", ".E~[iDU96[ApExI`", gPS0, ".E~[iDU96[ApExI`", 1766.11342235862, 1766.11342235862);
      Double double0 = new Double(1766.11342235862);
      Encomenda encomenda0 = new Encomenda();
      AbstractMap.SimpleImmutableEntry<Double, Encomenda> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Encomenda>(double0, encomenda0);
      transportadora0.enviaPedido(abstractMap_SimpleImmutableEntry0);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(1766.11342235862, transportadora0.getRaio(), 0.01);
      assertEquals(1766.11342235862, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertTrue(transportadora0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.getNome();
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("Invalid nome", string0);
      assertTrue(transportadora0.isDisponivel());
      assertEquals("Invalid codigo", transportadora0.getCodigo());
      assertEquals("Invalid nif", transportadora0.getNif());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora(".E~[iDU96[ApExI`", ".E~[iDU96[ApExI`", gPS0, ".E~[iDU96[ApExI`", 1766.11342235862, 1766.11342235862);
      boolean boolean0 = transportadora0.isDisponivel();
      assertTrue(boolean0);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(1766.11342235862, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(1766.11342235862, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora(".E~[iDU96[ApExI`", ".E~[iDU96[ApExI`", gPS0, ".E~[iDU96[ApExI`", 1766.11342235862, 1766.11342235862);
      double double0 = transportadora0.getRating();
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(1766.11342235862, transportadora0.getPrecoKm(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1766.11342235862, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertTrue(transportadora0.isDisponivel());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora(".E~[iDU96[ApExI`", ".E~[iDU96[ApExI`", gPS0, ".E~[iDU96[ApExI`", 1766.11342235862, 1766.11342235862);
      Double double0 = transportadora0.getKmPercorridos();
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(1766.11342235862, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1766.11342235862, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      // Undeclared exception!
      try { 
        transportadora0.compareTo((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Transportadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("model.LinhaEncomenda", "model.LinhaEncomenda", gPS0, "model.LinhaEncomenda", 2.0, 2.0);
      double double0 = transportadora0.getRaio();
      assertEquals(2.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(2.0, double0, 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora(".E~[iDU96[ApExI`", ".E~[iDU96[ApExI`", gPS0, ".E~[iDU96[ApExI`", 1766.11342235862, 1766.11342235862);
      transportadora0.getNif();
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(1766.11342235862, transportadora0.getRaio(), 0.01);
      assertEquals(1766.11342235862, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora("kmodel.Lihancomend", "kmodel.Lihancomend", gPS0, "kmodel.Lihancomend", 0.0, 0.0);
      double double0 = transportadora0.getVelocidade();
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(40.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora(".E~[iDU96[ApExI`", ".E~[iDU96[ApExI`", gPS0, ".E~[iDU96[ApExI`", 1766.11342235862, 1766.11342235862);
      transportadora0.getLocal();
      assertEquals(1766.11342235862, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(1766.11342235862, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GPS gPS0 = new GPS();
      Transportadora transportadora0 = new Transportadora(".E~[iDU96[ApExI`", ".E~[iDU96[ApExI`", gPS0, ".E~[iDU96[ApExI`", 1766.11342235862, 1766.11342235862);
      transportadora0.getEncomendasPorEntregar();
      assertEquals(1766.11342235862, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.isDisponivel());
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(1766.11342235862, transportadora0.getPrecoKm(), 0.01);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.toString();
      assertEquals("Model.Transportadora{codigo='Invalid codigo', nome='Invalid nome', local=Coordenadas:\nPos X: 0.0;\nPos Y: 0.0;\n, nif='Invalid nif', raio=0.0, precoKm=0.0}", string0);
      assertEquals(40.0, transportadora0.getVelocidade(), 0.01);
      assertEquals(0.0, transportadora0.getKmPercorridos(), 0.01);
      assertEquals(0, transportadora0.getNrReviews());
      assertEquals(0.0, transportadora0.getRating(), 0.01);
      assertTrue(transportadora0.isDisponivel());
  }
}
