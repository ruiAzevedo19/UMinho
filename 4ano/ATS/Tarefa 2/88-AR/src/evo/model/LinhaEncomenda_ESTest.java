/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 19:17:26 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import model.LinhaEncomenda;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("9cJ+,!j12D5Fna*5", "9cJ+,!j12D5Fna*5", 0.0, 120.03371327616091);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertEquals(120.03371327616091, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuant(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda("", "", 1058.83538, 1058.83538);
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(1058.83538, linhaEncomenda1.getPreco(), 0.01);
      assertFalse(boolean0);
      assertEquals(1058.83538, linhaEncomenda1.getQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setQuant(972.911841912);
      double double0 = linhaEncomenda0.getQuant();
      assertEquals(972.911841912, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("R<h1%_}2::a!\"BtO", (String) null, (-1822.6111905004), (-1822.6111905004));
      double double0 = linhaEncomenda0.getQuant();
      assertEquals((-1822.6111905004), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-1822.6111905004), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setPreco((-1753.58981));
      double double0 = linhaEncomenda0.getPreco();
      assertEquals((-1753.58981), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.getDescricao();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "", 1340.464784907838, 340.97235081);
      String string0 = linhaEncomenda0.getCodProduto();
      assertEquals(1340.464784907838, linhaEncomenda0.getQuant(), 0.01);
      assertNull(string0);
      assertEquals(340.97235081, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("^2f4x?*KA[Mt)_rl_", "", 696.0, 1.0);
      String string0 = linhaEncomenda0.getCodProduto();
      assertEquals("", linhaEncomenda0.getDescricao());
      assertEquals(696.0, linhaEncomenda0.getQuant(), 0.01);
      assertEquals(1.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals("^2f4x?*KA[Mt)_rl_", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("9cJ+,!j12D5Fna*5", "9cJ+,!j12D5Fna*5", 0.0, 120.03371327616091);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      int int0 = linhaEncomenda0.compareTo(linhaEncomenda1);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertEquals(120.03371327616091, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
      assertEquals(16, int0);
      assertEquals(0.0, linhaEncomenda1.getQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      
      linhaEncomenda1.setCodProduto("##XV<nsg4");
      int int0 = linhaEncomenda0.compareTo(linhaEncomenda1);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "", 1340.464784907838, 340.97235081);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(340.97235081, linhaEncomenda1.getPreco(), 0.01);
      assertEquals(1340.464784907838, linhaEncomenda1.getQuant(), 0.01);
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, (-598.0), (-598.0));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals((-598.0), linhaEncomenda1.getQuant(), 0.01);
      assertEquals((-598.0), linhaEncomenda1.getPreco(), 0.01);
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("model.LinhaEncomenda", "model.LinhaEncomenda", (-774.925), (-774.925));
      linhaEncomenda0.getDescricao();
      assertEquals((-774.925), linhaEncomenda0.getQuant(), 0.01);
      assertEquals((-774.925), linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("9cJ+,!j12D5Fna*5", "9cJ+,!j12D5Fna*5", 0.0, 120.03371327616091);
      double double0 = linhaEncomenda0.getQuant();
      assertEquals(120.03371327616091, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("9cJ+,!j12D5Fna*5", "9cJ+,!j12D5Fna*5", 0.0, 120.03371327616091);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertEquals(120.03371327616091, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0, 0.0);
      linhaEncomenda0.getCodProduto();
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      
      linhaEncomenda0.setDescricao((String) null);
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setCodProduto("##XV<nsg4");
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda1.getQuant(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      linhaEncomenda1.setPreco(3120.4);
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertEquals(3120.4, linhaEncomenda1.getPreco(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      linhaEncomenda0.setQuant((-1.0));
      boolean boolean0 = linhaEncomenda1.equals(linhaEncomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals("%");
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals((Object) null);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.toString();
      assertEquals("Model.LinhaEncomenda{cod_Produto='', descricao='', quant=0.0, preco=0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setCodProduto((String) null);
      // Undeclared exception!
      try { 
        linhaEncomenda0.compareTo(linhaEncomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.compareTo(linhaEncomenda0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.hashCode();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setDescricao((String) null);
      linhaEncomenda0.getDescricao();
      assertEquals(0.0, linhaEncomenda0.getQuant(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }
}
