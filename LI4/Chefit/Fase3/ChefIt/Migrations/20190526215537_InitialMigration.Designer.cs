// <auto-generated />
using System;
using ChefIt.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChefIt.Migrations
{
    [DbContext(typeof(ChefitContext))]
    [Migration("20190526215537_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChefIt.Models.Ingrediente", b =>
                {
                    b.Property<int>("IngredienteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Calorias");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("IngredienteID");

                    b.ToTable("Ingredientes");
                });

            modelBuilder.Entity("ChefIt.Models.Passo", b =>
                {
                    b.Property<int>("PassoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acao")
                        .HasMaxLength(50);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("NrPasso");

                    b.HasKey("PassoID");

                    b.ToTable("Passos");
                });

            modelBuilder.Entity("ChefIt.Models.Receita", b =>
                {
                    b.Property<int>("ReceitaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Classificacao");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500);

                    b.Property<int>("Dificuldade");

                    b.Property<float>("Dose");

                    b.Property<int>("Duracao");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Preparacao");

                    b.Property<int>("UserID");

                    b.HasKey("ReceitaID");

                    b.HasIndex("UserID");

                    b.ToTable("Receitas");
                });

            modelBuilder.Entity("ChefIt.Models.ReceitaIngrediente", b =>
                {
                    b.Property<int>("ReceitaID");

                    b.Property<int>("IngredienteID");

                    b.Property<string>("Quantidade");

                    b.HasKey("ReceitaID", "IngredienteID");

                    b.HasIndex("IngredienteID");

                    b.ToTable("ReceitaIngredientes");
                });

            modelBuilder.Entity("ChefIt.Models.ReceitaIngredientePasso", b =>
                {
                    b.Property<int>("ReceitaID");

                    b.Property<int>("IngredienteID");

                    b.Property<int>("PassoID");

                    b.HasKey("ReceitaID", "IngredienteID", "PassoID");

                    b.HasIndex("IngredienteID");

                    b.HasIndex("PassoID");

                    b.ToTable("ReceitaIngredientePassos");
                });

            modelBuilder.Entity("ChefIt.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biografia")
                        .HasMaxLength(500);

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChefIt.Models.Receita", b =>
                {
                    b.HasOne("ChefIt.Models.User", "User")
                        .WithMany("Receitas")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChefIt.Models.ReceitaIngrediente", b =>
                {
                    b.HasOne("ChefIt.Models.Ingrediente", "Ingrediente")
                        .WithMany("ReceitaIngredientes")
                        .HasForeignKey("IngredienteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChefIt.Models.Receita", "Receita")
                        .WithMany("ReceitaIngredientes")
                        .HasForeignKey("ReceitaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChefIt.Models.ReceitaIngredientePasso", b =>
                {
                    b.HasOne("ChefIt.Models.Ingrediente", "Ingrediente")
                        .WithMany("ReceitaIngredientePassos")
                        .HasForeignKey("IngredienteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChefIt.Models.Passo", "Passo")
                        .WithMany("ReceitaIngredientePassos")
                        .HasForeignKey("PassoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChefIt.Models.Receita", "Receita")
                        .WithMany("ReceitaIngredientePassos")
                        .HasForeignKey("ReceitaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
