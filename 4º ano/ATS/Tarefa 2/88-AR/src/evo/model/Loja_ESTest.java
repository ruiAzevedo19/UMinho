/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 19:23:21 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.Set;
import model.Encomenda;
import model.GPS;
import model.LinhaEncomenda;
import model.Loja;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Loja_ESTest extends Loja_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("p26", "p26", gPS0);
      String[] stringArray0 = new String[3];
      loja0.fromArgs(stringArray0);
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GPS gPS0 = new GPS((-1681.2504284), (-1681.2504284));
      LinkedHashSet<LinhaEncomenda> linkedHashSet0 = new LinkedHashSet<LinhaEncomenda>();
      Loja loja0 = new Loja("]N<Yi|XE\"S2`S\"!,B!", "lATm/", gPS0, linkedHashSet0);
      loja0.getProdutosDisponiveis();
      assertEquals(0, loja0.getPorEntregar());
      assertEquals("lATm/", loja0.getNome());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GPS gPS0 = new GPS((-7.6), 0.0);
      LinkedHashSet<LinhaEncomenda> linkedHashSet0 = new LinkedHashSet<LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(", quant=", "1-V,6^PG\"O2_S#B", 0.0, 0.0);
      linkedHashSet0.add(linhaEncomenda0);
      Loja loja0 = new Loja("Model.Loja{codigo='', nome='Invalid nome', local=Coordenadas:\nPos X: 0.0;\nPos Y: 0.0;\n}", "Queijo", gPS0, linkedHashSet0);
      loja0.getProdutosDisponiveis();
      assertEquals("Queijo", loja0.getNome());
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GPS gPS0 = new GPS(1608.983449921, (-1146.11711));
      Loja loja0 = new Loja("h8=", "h8=", gPS0);
      loja0.setPorEntregar(2);
      int int0 = loja0.getPorEntregar();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.setPorEntregar((-1295));
      int int0 = loja0.getPorEntregar();
      assertEquals((-1295), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GPS gPS0 = new GPS((-1.0), 2252.9146073);
      LinkedHashSet<LinhaEncomenda> linkedHashSet0 = new LinkedHashSet<LinhaEncomenda>();
      Loja loja0 = new Loja((String) null, (String) null, gPS0, linkedHashSet0);
      loja0.getNome();
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("", "", gPS0);
      loja0.getNome();
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.setLocal((GPS) null);
      loja0.getLocal();
      assertEquals(0, loja0.getPorEntregar());
      assertEquals("Invalid codigo", loja0.getCodigo());
      assertEquals("Invalid nome", loja0.getNome());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GPS gPS0 = new GPS(0.0, 2350.44);
      Loja loja0 = new Loja((String) null, "2WoG", gPS0);
      gPS0.setX(2.0);
      loja0.setLocal(gPS0);
      loja0.getLocal();
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GPS gPS0 = new GPS((-1141.0), (-1141.0));
      Loja loja0 = new Loja("", "", gPS0, (Set<LinhaEncomenda>) null);
      loja0.getLocal();
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("", "", gPS0);
      Loja loja1 = new Loja(loja0);
      loja1.getEncomendaQueue();
      assertEquals(0, loja1.getPorEntregar());
      assertTrue(loja1.equals((Object)loja0));
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GPS gPS0 = new GPS(545.2070643, (-1653.946));
      Loja loja0 = new Loja((String) null, "YRI94", gPS0);
      String string0 = loja0.getCodigo();
      assertEquals(0, loja0.getPorEntregar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GPS gPS0 = new GPS(0.0, 0.0);
      Loja loja0 = new Loja("", "", gPS0, (Set<LinhaEncomenda>) null);
      loja0.getCodigo();
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.compareTo(loja0);
      assertEquals("Invalid nome", loja0.getNome());
      assertEquals("Invalid codigo", loja0.getCodigo());
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GPS gPS0 = new GPS(0.0, 2350.44);
      Loja loja0 = new Loja((String) null, "2WoG", gPS0);
      Loja loja1 = new Loja("Margarina", (String) null, gPS0, (Set<LinhaEncomenda>) null);
      loja0.setCodigo("");
      int int0 = loja1.compareTo(loja0);
      assertEquals(9, int0);
      assertEquals(0, loja0.getPorEntregar());
      assertEquals(0, loja1.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Loja loja0 = new Loja();
      GPS gPS0 = new GPS();
      Loja loja1 = new Loja("p13", "p13", gPS0);
      int int0 = loja0.compareTo(loja1);
      assertEquals((-39), int0);
      assertEquals("Invalid nome", loja0.getNome());
      assertEquals(0, loja1.getPorEntregar());
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Loja loja0 = new Loja();
      // Undeclared exception!
      try { 
        loja0.receivePedido((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Loja loja0 = new Loja();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "B+*_)'b+%ec:D";
      stringArray0[2] = "model.GPS";
      // Undeclared exception!
      try { 
        loja0.fromArgs(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Loja loja0 = new Loja();
      // Undeclared exception!
      try { 
        loja0.fromArgs((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("aC;|Yo)ljP,k", "aC;|Yo)ljP,k", gPS0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aC;|Yo)ljP,k";
      // Undeclared exception!
      try { 
        loja0.fromArgs(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("model.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Loja loja0 = new Loja();
      GPS gPS0 = new GPS();
      Loja loja1 = new Loja((String) null, "model.GPS", gPS0);
      // Undeclared exception!
      try { 
        loja0.equals(loja1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.setLocal((GPS) null);
      // Undeclared exception!
      try { 
        loja0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.setLocal((GPS) null);
      Loja loja1 = null;
      try {
        loja1 = new Loja(loja0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Loja loja0 = null;
      try {
        loja0 = new Loja("Q@61V", "", (GPS) null, (Set<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Loja loja0 = null;
      try {
        loja0 = new Loja("Sabao em pedra", "Sabao em pedra", (GPS) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("6", "6", gPS0);
      loja0.getNome();
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("6", "6", gPS0);
      loja0.getCodigo();
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("<", "J", gPS0);
      Loja loja1 = new Loja("<", "<", gPS0, (Set<LinhaEncomenda>) null);
      boolean boolean0 = loja0.equals(loja1);
      assertEquals(0, loja0.getPorEntregar());
      assertEquals(0, loja1.getPorEntregar());
      assertFalse(boolean0);
      assertEquals("<", loja0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GPS gPS0 = new GPS((-1681.2504284), (-1681.2504284));
      Loja loja0 = new Loja();
      Loja loja1 = new Loja();
      assertTrue(loja1.equals((Object)loja0));
      
      loja0.setLocal(gPS0);
      boolean boolean0 = loja0.equals(loja1);
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("6", "6", gPS0);
      Loja loja1 = loja0.clone();
      assertTrue(loja1.equals((Object)loja0));
      
      loja1.setCodigo("!4I_i?Vp<:IJ*");
      boolean boolean0 = loja1.equals(loja0);
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Loja loja0 = new Loja();
      boolean boolean0 = loja0.equals((Object) null);
      assertEquals("Invalid codigo", loja0.getCodigo());
      assertEquals(0, loja0.getPorEntregar());
      assertFalse(boolean0);
      assertEquals("Invalid nome", loja0.getNome());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("6", "6", gPS0);
      boolean boolean0 = loja0.equals(loja0);
      assertEquals(0, loja0.getPorEntregar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("6", "6", gPS0);
      boolean boolean0 = loja0.equals(gPS0);
      assertEquals(0, loja0.getPorEntregar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Loja loja0 = new Loja();
      String[] stringArray0 = new String[5];
      loja0.fromArgs(stringArray0);
      assertEquals(0, loja0.getPorEntregar());
      assertEquals("Invalid nome", loja0.getNome());
      assertEquals("Invalid codigo", loja0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Loja loja0 = new Loja();
      Encomenda encomenda0 = new Encomenda();
      loja0.receivePedido(encomenda0);
      assertEquals(0, loja0.getPorEntregar());
      assertEquals("Invalid nome", loja0.getNome());
      assertEquals("Invalid codigo", loja0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GPS gPS0 = new GPS((-1.0), (-246.431951992));
      Loja loja0 = new Loja((String) null, (String) null, gPS0);
      // Undeclared exception!
      try { 
        loja0.compareTo(loja0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Loja loja0 = new Loja();
      String string0 = loja0.toString();
      assertEquals("Model.Loja{codigo='Invalid codigo', nome='Invalid nome', local=Coordenadas:\nPos X: 0.0;\nPos Y: 0.0;\n}", string0);
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.hashCode();
      assertEquals(0, loja0.getPorEntregar());
      assertEquals("Invalid nome", loja0.getNome());
      assertEquals("Invalid codigo", loja0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.getProdutosDisponiveis();
      assertEquals("Invalid nome", loja0.getNome());
      assertEquals(0, loja0.getPorEntregar());
      assertEquals("Invalid codigo", loja0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Loja loja0 = new Loja();
      assertEquals("Invalid nome", loja0.getNome());
      
      loja0.setNome("M#4I=ZNF6oue");
      assertEquals("Invalid codigo", loja0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.getEncomendaQueue();
      assertEquals(0, loja0.getPorEntregar());
      assertEquals("Invalid codigo", loja0.getCodigo());
      assertEquals("Invalid nome", loja0.getNome());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Loja loja0 = new Loja();
      GPS gPS0 = loja0.getLocal();
      loja0.setLocal(gPS0);
      assertEquals(0, loja0.getPorEntregar());
      assertEquals("Invalid nome", loja0.getNome());
      assertEquals("Invalid codigo", loja0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("6", "6", gPS0);
      Loja loja1 = loja0.clone();
      boolean boolean0 = loja1.equals(loja0);
      assertEquals(0, loja1.getPorEntregar());
      assertTrue(boolean0);
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GPS gPS0 = new GPS();
      Loja loja0 = new Loja("6", "6", gPS0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Coordenadas:\nPos X: 0.0;\nPos Y: 0.0;\n";
      stringArray0[2] = "6";
      stringArray0[3] = "6";
      Loja loja1 = loja0.fromArgs(stringArray0);
      assertNotNull(loja1);
      assertEquals(0, loja1.getPorEntregar());
      assertEquals("\nPos X", loja1.getCodigo());
      assertEquals(0, loja0.getPorEntregar());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Loja loja0 = new Loja();
      int int0 = loja0.getPorEntregar();
      assertEquals(0, int0);
      assertEquals("Invalid codigo", loja0.getCodigo());
      assertEquals("Invalid nome", loja0.getNome());
  }
}
